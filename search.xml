<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Egg(二)_Egg项目配置路由，写接口数据</title>
      <link href="/posts/601.html"/>
      <url>/posts/601.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /># 前言<p><strong>给Egg项目中配置路由，并写入接口，提供数据。</strong></p><p><strong>实现效果：</strong></p><p><img src="https://img-blog.csdnimg.cn/direct/adb8588be5f44ae6a65b1993121c7077.png" alt="在这里插入图片描述"></p><h2 id="一、创建控制器-controller-home-js">一、创建控制器    controller/home.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// controller/home.js</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">Controller</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    ctx.<span class="property">body</span> = <span class="string">&#x27;hi, egg&#x27;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">list</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">  ctx.<span class="property">body</span>=(&#123;</span><br><span class="line">      <span class="attr">code</span>:<span class="number">200</span>,</span><br><span class="line">      <span class="attr">masg</span>:<span class="string">&#x27;查询成功&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>:[</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;李四&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">HomeController</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="二、编写路由">二、编写路由</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">Egg.Application</span>&#125; <span class="variable">app</span> - egg application</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; router, controller &#125; = app;</span><br><span class="line">  router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, controller.<span class="property">home</span>.<span class="property">index</span>);</span><br><span class="line">  router.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>, controller.<span class="property">home</span>.<span class="property">list</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="三、页面上输入：http-localhost-7001-list">三、页面上输入：<a href="http://localhost:7001/list">http://localhost:7001/list</a></h2><p><img src="https://img-blog.csdnimg.cn/direct/187ec0cee14b42a996648bf9baeb7ecd.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg(四)_Egg使用MySql数据库</title>
      <link href="/posts/603.html"/>
      <url>/posts/603.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>前言</h1><p><strong>Egg中配合使用mysql来实现数据的获取和写入，并通过Egg定义的方式发送到接口里面。</strong></p><h2 id="一、项目中安装mysql">一、项目中安装mysql</h2><h3 id="1、安装egg-mysql插件">1、安装egg-mysql插件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i --save egg-mysql</span><br></pre></td></tr></table></figure><h3 id="2、配置插件：打开config-plugin-js">2、配置插件：打开config/plugin.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mysql配置</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mysql</span>: &#123;</span><br><span class="line">    <span class="attr">enable</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">package</span>: <span class="string">&#x27;egg-mysql&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="3、配置插件：打开config-config-default-js">3、配置插件：打开config/config.default.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据库连接</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">mysql</span> = &#123;</span><br><span class="line">  <span class="comment">// 单数据库信息配置</span></span><br><span class="line">  <span class="attr">client</span>: &#123;</span><br><span class="line">     <span class="comment">// host</span></span><br><span class="line">     <span class="attr">host</span>: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">     <span class="comment">// 端口号</span></span><br><span class="line">     <span class="attr">port</span>: <span class="string">&#x27;3306&#x27;</span>,</span><br><span class="line">     <span class="comment">// 用户名</span></span><br><span class="line">     <span class="attr">user</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">     <span class="comment">// 密码</span></span><br><span class="line">     <span class="attr">password</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">     <span class="comment">// 数据库名</span></span><br><span class="line">     <span class="attr">database</span>: <span class="string">&#x27;egg&#x27;</span>,</span><br><span class="line"> &#125;,</span><br><span class="line">  <span class="comment">// 是否加载到 app 上，默认开启</span></span><br><span class="line">  <span class="attr">app</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 是否加载到 agent 上，默认关闭</span></span><br><span class="line">  <span class="attr">agent</span>: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二、Egg-js-操作-MySql-数据库">二、Egg.js 操作 MySql 数据库</h2><h3 id="1、新建一个stu数据库表">1、新建一个stu数据库表</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `stu` (  </span><br><span class="line"> `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT, </span><br><span class="line"> `name` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,   </span><br><span class="line"> `age` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (`id`) </span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h3 id="2、添加路由-router-js">2、添加路由  router.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/getStu&#x27;</span>, controller.<span class="property">stu</span>.<span class="property">getStu</span>);</span><br><span class="line"> router.<span class="title function_">post</span>(<span class="string">&#x27;/addStu&#x27;</span>, controller.<span class="property">stu</span>.<span class="property">addStu</span>);</span><br><span class="line"> router.<span class="title function_">post</span>(<span class="string">&#x27;/updateStu&#x27;</span>, controller.<span class="property">stu</span>.<span class="property">updateStu</span>);</span><br><span class="line"> router.<span class="title function_">post</span>(<span class="string">&#x27;/delStu&#x27;</span>, controller.<span class="property">stu</span>.<span class="property">delStu</span>);</span><br></pre></td></tr></table></figure><h3 id="3、添加学生信息">3、添加学生信息</h3><p>1、打开controller 中的stu.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加学生信息</span></span><br><span class="line"> <span class="keyword">async</span> <span class="title function_">addStu</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">     <span class="keyword">const</span> &#123; name, age &#125; = ctx.<span class="property">request</span>.<span class="property">body</span>;</span><br><span class="line">     <span class="keyword">const</span> result = <span class="keyword">await</span> ctx.<span class="property">service</span>.<span class="property">stu</span>.<span class="title function_">addStu</span>(name, age);</span><br><span class="line">     <span class="keyword">if</span> (result) &#123;</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">          <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">          <span class="attr">msg</span>: <span class="string">&#x27;添加成功&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">          <span class="attr">status</span>: <span class="number">201</span>,</span><br><span class="line">          <span class="attr">msg</span>: <span class="string">&#x27;添加失败&#x27;</span>,</span><br><span class="line">          <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>2、打开service中的stu.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加学生信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">name</span> -名称</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">age</span> -年龄</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">Object</span>&#125; 对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">addStu</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"> <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> params = &#123;</span><br><span class="line">       name,</span><br><span class="line">       age,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">mysql</span>.<span class="title function_">insert</span>(<span class="string">&#x27;stu&#x27;</span>, params);</span><br><span class="line">    <span class="keyword">const</span> insertSuccess = result.<span class="property">affectedRows</span> === <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (insertSuccess) &#123;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>调用接口如下图</strong><br><img src="https://img-blog.csdnimg.cn/direct/f24f8aaf91394ae98dd72c95b2058d65.png" alt="在这里插入图片描述"><br>·我们可以在数据库的表中查看到<br><img src="https://img-blog.csdnimg.cn/direct/8d6d2fd5c11447e7b07bc70dbee5e71b.png" alt="在这里插入图片描述"></p><h3 id="4、根据ID查寻学生信息">4、根据ID查寻学生信息</h3><p>1、打开controller 中的stu.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查询学生信息</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">getStu</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">   <span class="keyword">const</span> &#123; id &#125; = ctx.<span class="property">query</span>;</span><br><span class="line">   <span class="keyword">const</span> result = <span class="keyword">await</span> ctx.<span class="property">service</span>.<span class="property">stu</span>.<span class="title function_">getStu</span>(id);</span><br><span class="line">   ctx.<span class="property">body</span> = &#123;</span><br><span class="line">     <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">     <span class="attr">msg</span>: <span class="string">&#x27;查询成功&#x27;</span>,</span><br><span class="line">     <span class="attr">data</span>: result,</span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、打开service中的stu.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 查询学生信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; <span class="variable">id</span> -学生ID</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">Object</span>&#125; 学生信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="keyword">async</span> <span class="title function_">getStu</span>(<span class="params">id</span>) &#123;</span><br><span class="line">   <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> params = &#123;</span><br><span class="line">        id</span><br><span class="line">     &#125;;</span><br><span class="line">     <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">mysql</span>.<span class="title function_">get</span>(<span class="string">&#x27;stu&#x27;</span>, params);</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>调用接口如下图</strong><br><img src="https://img-blog.csdnimg.cn/direct/48b5a0630c324803a9858a094776d5ed.png" alt="在这里插入图片描述"></p><h3 id="5、根据ID更新学生信息">5、根据ID更新学生信息</h3><p>1、打开controller 中的stu.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新学生信息</span></span><br><span class="line"> <span class="keyword">async</span> <span class="title function_">updateStu</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">   <span class="keyword">const</span> params = ctx.<span class="property">request</span>.<span class="property">body</span>;</span><br><span class="line">   <span class="keyword">const</span> result = <span class="keyword">await</span> ctx.<span class="property">service</span>.<span class="property">stu</span>.<span class="title function_">updateStu</span>(params);</span><br><span class="line">   <span class="keyword">if</span> (result) &#123;</span><br><span class="line">       ctx.<span class="property">body</span> = &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;更新成功&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: result,</span><br><span class="line">       &#125;;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       ctx.<span class="property">body</span> = &#123;</span><br><span class="line">         <span class="attr">status</span>: <span class="number">201</span>,</span><br><span class="line">         <span class="attr">msg</span>: <span class="string">&#x27;更新失败&#x27;</span>,</span><br><span class="line">         <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>2、打开service中的stu.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 更新学生信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; params 学生信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">Object</span>&#125; 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="keyword">async</span> <span class="title function_">updateStu</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">mysql</span>.<span class="title function_">update</span>(<span class="string">&#x27;stu&#x27;</span>, params); </span><br><span class="line">     <span class="keyword">const</span> updateSuccess = result.<span class="property">affectedRows</span> === <span class="number">1</span>;</span><br><span class="line">     <span class="keyword">if</span> (updateSuccess) &#123;</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">     &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>调用接口如下图</strong><br><img src="https://img-blog.csdnimg.cn/direct/8c02efe0cfb7417a95f3a4d5604e58aa.png" alt="在这里插入图片描述"><br>我们可以在数据库的表看到数据已经更新啦<br><img src="https://img-blog.csdnimg.cn/direct/cbba90d3502749caa1328adeb805bc71.png" alt="在这里插入图片描述"></p><h3 id="6、根据ID删除学生信息">6、根据ID删除学生信息</h3><p>1、打开controller 中的stu.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除学生信息</span></span><br><span class="line"><span class="keyword">async</span> <span class="title function_">delStu</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">   <span class="keyword">const</span> &#123; id &#125; = ctx.<span class="property">request</span>.<span class="property">body</span>;</span><br><span class="line">   <span class="keyword">const</span> result = <span class="keyword">await</span> ctx.<span class="property">service</span>.<span class="property">stu</span>.<span class="title function_">delStu</span>(id);</span><br><span class="line">   <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      ctx.<span class="property">body</span> = &#123;</span><br><span class="line">         <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">         <span class="attr">msg</span>: <span class="string">&#x27;删除成功&#x27;</span>,</span><br><span class="line">         <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      ctx.<span class="property">body</span> = &#123;</span><br><span class="line">        <span class="attr">status</span>: <span class="number">201</span>,</span><br><span class="line">        <span class="attr">msg</span>: <span class="string">&#x27;删除失败&#x27;</span>,</span><br><span class="line">        <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">     &#125;;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>2、打开service中的stu.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 删除学生信息</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; id  学生ID</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> &#123;<span class="type">Object</span>&#125; 对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"> <span class="keyword">async</span> <span class="title function_">delStu</span>(<span class="params">id</span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">mysql</span>.<span class="title function_">delete</span>(<span class="string">&#x27;stu&#x27;</span>, &#123;</span><br><span class="line">          id,</span><br><span class="line">        &#125;);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>调用接口如下图</strong><br><img src="https://img-blog.csdnimg.cn/direct/d68034cb244d4ea0b09fd6a24e41d293.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg(五)_Egg+Mysql实现图片上传</title>
      <link href="/posts/604.html"/>
      <url>/posts/604.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /># 前言<p><strong>Egg实现图片上传</strong></p><blockquote><ol><li>首先前端调用上传接口，将上传的资源经过 FormData 实例封装之后，传给服务端</li><li>在服务端接收前端传进来的图片信息，通过 fs.readFileSync 方法，来读取图片内容，并存放在变量中</li><li>找个存放图片的公共位置</li><li>通过 fs.writeFileSync 方法，将图片内容写入公共位置</li><li>最后返回图片地址上传到数据库</li></ol></blockquote><hr><h2 id="一、数据库建表">一、数据库建表</h2><h3 id="1-数据库建表，表结构为">1.数据库建表，表结构为</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `img` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `imgurl` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图片url&#x27;</span>,</span><br><span class="line">  `filename` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;图片名称&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>MyISAM AUTO_INCREMENT<span class="operator">=</span><span class="number">210</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_unicode_ci;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/00cad9c7e04a45b29067c72d95843bc5.png" alt="在这里插入图片描述"></p><h2 id="二、egg实现图片上传">二、egg实现图片上传</h2><h3 id="1-安装依赖">1.安装依赖</h3><p><code>mkdirp</code> 是一款在 node.js 中像 mkdir -p 一样递归创建目录及其子目录。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g mkdirp</span><br></pre></td></tr></table></figure><p><code>Moment.js</code> 是一个轻量级的 JavaScript 时间库，它方便了日常开发中对时间的操作，提高了开发效率。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install moment</span><br></pre></td></tr></table></figure><h3 id="2-打开-config-config-defalut-js">2.打开 config -&gt; config.defalut.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先引入path</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">//文件存放路径和文件白名单</span></span><br><span class="line">  config.<span class="property">uploadDir</span> = <span class="string">&#x27;app/public/upload&#x27;</span></span><br><span class="line">  config.<span class="property">multipart</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;file&#x27;</span>,</span><br><span class="line">    <span class="attr">fileSize</span>: <span class="number">1048576000</span>,</span><br><span class="line">    <span class="attr">whitelist</span>: [ <span class="string">&#x27;.txt&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>, <span class="string">&#x27;.jpg&#x27;</span> ],</span><br><span class="line">  &#125;;</span><br><span class="line"><span class="comment">// 文件静态路径</span></span><br><span class="line">config.<span class="property">static</span> = &#123;</span><br><span class="line">    <span class="attr">prefix</span>: <span class="string">&#x27;/app/public&#x27;</span>, <span class="comment">//访问前缀</span></span><br><span class="line">    <span class="attr">dir</span>: path.<span class="title function_">join</span>(appInfo.<span class="property">baseDir</span>, <span class="string">&#x27;app/public&#x27;</span>), </span><br><span class="line">    <span class="attr">dynamic</span>: <span class="literal">true</span>, </span><br><span class="line">    <span class="attr">preload</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">maxAge</span>: <span class="number">31536000</span>, </span><br><span class="line">    <span class="attr">buffer</span>: <span class="literal">true</span>, </span><br><span class="line"> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="3-新建controller-upload-js">3.新建controller -&gt; upload.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> moment = <span class="built_in">require</span>(<span class="string">&#x27;moment&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> mkdirp = <span class="built_in">require</span>(<span class="string">&#x27;mkdirp&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">// const api = require(&#x27;../utils/utils&#x27;).api;</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">upload</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="comment">// 需要前往 config/config.default.js 设置 config.multipart 的 mode 属性为 file</span></span><br><span class="line">    <span class="keyword">const</span> file = ctx.<span class="property">request</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="comment">// 声明存放资源的路径</span></span><br><span class="line">    <span class="keyword">let</span> uploadDir = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> id = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">let</span> api = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// ctx.request.files[0] 表示获取第一个文件，若前端上传多个文件则可以遍历这个数组对象</span></span><br><span class="line">      <span class="keyword">const</span> f = fs.<span class="title function_">readFileSync</span>(file.<span class="property">filepath</span>);</span><br><span class="line">      <span class="comment">// 1.获取当前日期</span></span><br><span class="line">      <span class="keyword">const</span> day = <span class="title function_">moment</span>(<span class="keyword">new</span> <span class="title class_">Date</span>()).<span class="title function_">format</span>(<span class="string">&#x27;YYYYMMDD&#x27;</span>);</span><br><span class="line">      <span class="comment">// 2.创建图片保存的路径</span></span><br><span class="line">      <span class="keyword">const</span> dir = path.<span class="title function_">join</span>(<span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">uploadDir</span>, day);</span><br><span class="line">      <span class="keyword">const</span> date = <span class="title class_">Date</span>.<span class="title function_">now</span>(); <span class="comment">// 毫秒数</span></span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">mkdirp</span>(dir); <span class="comment">// 不存在就创建目录</span></span><br><span class="line">      <span class="comment">// 返回图片保存的路径</span></span><br><span class="line">      uploadDir = path.<span class="title function_">join</span>(dir, date + path.<span class="title function_">extname</span>(file.<span class="property">filename</span>));</span><br><span class="line">       api=<span class="string">&quot;http://localhost:7001/&quot;</span></span><br><span class="line">      <span class="comment">// decodeURI是为了中文乱码</span></span><br><span class="line">      id = <span class="keyword">await</span> ctx.<span class="property">service</span>.<span class="property">upload</span>.<span class="title function_">add</span>(&#123; <span class="attr">img_url</span>: api + uploadDir, <span class="attr">filename</span>: file.<span class="property">filename</span> &#125;);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>( id);</span><br><span class="line">      <span class="comment">// 写入文件夹</span></span><br><span class="line">      fs.<span class="title function_">writeFileSync</span>(uploadDir, f);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;error&#x27;</span>, e);</span><br><span class="line">      <span class="comment">// 清除临时文件</span></span><br><span class="line">      ctx.<span class="title function_">cleanupRequestFiles</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ctx.<span class="property">body</span> = &#123;</span><br><span class="line">      <span class="attr">status</span>: <span class="number">200</span>,</span><br><span class="line">      <span class="attr">msg</span>: <span class="string">&#x27;上传成功&#x27;</span>,</span><br><span class="line">      <span class="attr">data</span>: api + uploadDir,</span><br><span class="line">      id,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UploadController</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-新建-service-upload-js">4.新建 service -&gt; upload.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Service</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Service</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploadService</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Service</span> &#123;</span><br><span class="line">  <span class="comment">// 获取图片</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">query</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; app &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> app.<span class="property">mysql</span>.<span class="title function_">get</span>(<span class="string">&#x27;img&#x27;</span>, params);</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 增加图片</span></span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">add</span>(<span class="params">params</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; app &#125; = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> app.<span class="property">mysql</span>.<span class="title function_">insert</span>(<span class="string">&#x27;img&#x27;</span>, params);</span><br><span class="line">      <span class="keyword">return</span> result.<span class="property">insertId</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UploadService</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="5-最后在-router-js-中加入">5.最后在 router.js 中加入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/api/upload/upload&#x27;</span>,controller.<span class="property">upload</span>.<span class="property">upload</span>; <span class="comment">// 上传图片</span></span><br></pre></td></tr></table></figure><h3 id="6-发送接口请求数据">6.发送接口请求数据</h3><p><img src="https://img-blog.csdnimg.cn/direct/6e4c767068f94404ad83c5e63b9594b2.png" alt="在这里插入图片描述">数据库插入一条数据</p><p><img src="https://img-blog.csdnimg.cn/direct/e681bf2b6f7646228f914babdd5ea8ea.png" alt="在这里插入图片描述"><br>本地查看图片<br><img src="https://img-blog.csdnimg.cn/direct/98016aa675da402f97962c0b74047ea9.png" alt="在这里插入图片描述"></p><blockquote><p>在使用egg的上传图片功能的时候出现的这个报错：<code>Cannot read properties of undefined (reading ‘0‘)</code>  请查看这篇文章：<a href="https://blog.csdn.net/m0_58352785/article/details/135271321?spm=1001.2014.3001.5501">传送口</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg(六)_实现列表的模糊查询</title>
      <link href="/posts/605.html"/>
      <url>/posts/605.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>前言</h1><p><strong>列表数据系列增删改查的查询实现</strong></p><h2 id="一、实现步骤：">一、实现步骤：</h2><h3 id="1、路由配置：">1、路由配置：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * 路由配置</span><br><span class="line"> * @param app</span><br><span class="line"> */</span><br><span class="line">module.exports = app =&gt; &#123;</span><br><span class="line">   const &#123; router, controller &#125; = app;</span><br><span class="line">    //用户信息</span><br><span class="line">    router.get(<span class="string">&#x27;/getUser, controller.user.getUser);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2、controller-user-js-中-写入查询方法-getUser">2、controller  / user.js`中 写入查询方法  getUser</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> *  用户信息路由</span><br><span class="line"> * @param app</span><br><span class="line"> * @returns &#123;HomeController&#125;</span><br><span class="line"> */</span><br><span class="line">const Controller = require(<span class="string">&#x27;egg&#x27;</span>).Controller;</span><br><span class="line">class UserController extends Controller &#123;</span><br><span class="line">   async <span class="function"><span class="title">getUser</span></span>() &#123;</span><br><span class="line">    //查询库里的user表</span><br><span class="line">    <span class="built_in">let</span> params = this.ctx.query //获取路径后面的参数</span><br><span class="line">    console.log(<span class="string">&#x27;用户的参数：&#x27;</span>);</span><br><span class="line">    console.log(params);</span><br><span class="line">    <span class="built_in">let</span> sql = <span class="string">&#x27;select * from user&#x27;</span></span><br><span class="line"> </span><br><span class="line">    <span class="built_in">let</span> content = [];//参数</span><br><span class="line">    <span class="built_in">let</span> isMore = <span class="literal">false</span>;//是否有多个查询参数</span><br><span class="line">    /**</span><br><span class="line">     * @模糊查询-量大的时候效率低</span><br><span class="line">     * <span class="keyword">select</span> * from user <span class="built_in">where</span> name like ? % 内容 %</span><br><span class="line">     * 在user表中全局查找name值 == 内容的</span><br><span class="line">     * % 内容 % 全局查找内容</span><br><span class="line">     *   内容 %  查找以 内容 开头的数据</span><br><span class="line">     * */</span><br><span class="line">    <span class="keyword">if</span>(params.name)&#123;</span><br><span class="line">      sql += <span class="string">&quot; where name like ?&quot;</span>;</span><br><span class="line">      content.push( <span class="string">&quot;%&quot;</span>+params.name+<span class="string">&quot;%&quot;</span> );</span><br><span class="line">      isMore = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(params.phone)&#123;</span><br><span class="line">      <span class="keyword">if</span>(isMore)&#123;//true代表有多个参数</span><br><span class="line">        sql += <span class="string">&quot;and phone LIKE ?&quot;</span>;//and是两个条件都必须满足，or是或的关系</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        sql += <span class="string">&quot; WHERE phone LIKE ?&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      content.push( <span class="string">&quot;%&quot;</span>+params.phone+<span class="string">&quot;%&quot;</span> )</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    //开启分页</span><br><span class="line">    <span class="keyword">if</span>(params.page || params.pageSize)&#123;</span><br><span class="line">      <span class="built_in">let</span> current = params.page;//当前页码</span><br><span class="line">      <span class="built_in">let</span> pageSize = params.pageSize;//一页展示多少条数据</span><br><span class="line">      sql += <span class="string">&quot; limit ?,?&quot;</span>;</span><br><span class="line">      content.push((current-<span class="number">1</span>)*pageSize,parseInt(pageSize));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">    <span class="built_in">let</span> userList= await this.app.mysql.query(</span><br><span class="line">      sql,content</span><br><span class="line">    );</span><br><span class="line">    this.ctx.body = &#123;</span><br><span class="line">      code:200,</span><br><span class="line">      masg:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">      data:userList</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">module.exports = UserController;</span><br></pre></td></tr></table></figure><h2 id="二、接口如图所示">二、接口如图所示</h2><h3 id="1、页面输入：http-127-0-0-1-7001-getUser-page-1-pageSize-4">1、页面输入：<a href="http://127.0.0.1:7001/getUser?page=1&amp;pageSize=4">http://127.0.0.1:7001/getUser?page=1&amp;pageSize=4</a></h3><p><img src="https://img-blog.csdnimg.cn/direct/04577c907b86471e896836e450d40020.png" alt="在这里插入图片描述"></p><h3 id="2、页面输入：http-127-0-0-1-7001-getUser-name-张三">2、页面输入：<a href="http://127.0.0.1:7001/getUser?name=%E5%BC%A0%E4%B8%89">http://127.0.0.1:7001/getUser?name=张三</a></h3><p><img src="https://img-blog.csdnimg.cn/direct/a1cfde5c8e4f440090b7bbfbe2ef1b48.png" alt="在这里插入图片描述"></p><h3 id="3、页面输入：http-127-0-0-1-7001-getUser">3、页面输入：<a href="http://127.0.0.1:7001/getUser">http://127.0.0.1:7001/getUser</a></h3><p><img src="https://img-blog.csdnimg.cn/direct/290c35d1784043b0a37703493f8a1372.png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg(一)_创建一个Egg项目</title>
      <link href="/posts/600.html"/>
      <url>/posts/600.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>Egg 框架</h1><blockquote><p>Egg.js，为企业级框架和应用而生，是阿里开源的企业级 Node.js 框架。</p></blockquote><h3 id="官网入口：点我">官网入口：<a href="https://www.eggjs.org/zh-CN/intro/quickstart">点我</a></h3><h2 id="一、Egg与其他框架的对比：">一、Egg与其他框架的对比：</h2><p>与koa的对比：</p><p>Koa 由 Express 幕后的原班人马打造，设计初衷是抛掉express中不合时宜的回调以及引入更加强大的async/await机制和插件、中间件机制，目的是用更小的体积和更优雅的语法产生更快速的web服务端。 但对于面向企业级的应用框架来说，这还远远不够，多人协作的开发模式应以约定大于配置的形式来确保开发过程中产生更小的沟通成本，更高效的编码效率。而这也是egg最核心的东西。</p><p>egg带有一套自身的约定和规范，我们来看一下，用egg产生的工程目录。<br><img src="https://img-blog.csdnimg.cn/direct/876752dc2e7644f1a46a202df337f9f2.png" alt="在这里插入图片描述"></p><h2 id="二、如何构建一个Egg工程">二、如何构建一个Egg工程</h2><h3 id="1、安装node环境">1、安装node环境</h3><p>运行环境：建议选择 LTS 版本，最低要求 8.x。</p><h3 id="2、创建文件夹">2、创建文件夹</h3><p>可以手动创建，也可以使用命令行。</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> egg-<span class="built_in">example</span> &amp;&amp; cd egg-<span class="built_in">example</span></span><br></pre></td></tr></table></figure><h3 id="3、初始化Egg工程">3、初始化Egg工程</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init egg <span class="attribute">--type</span>=simple</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/b1996e8c1aaa45d8bbeaabc3c6de27e1.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/direct/9839f4cd7c164e849c3ebcad1403eafd.png" alt="在这里插入图片描述"></p><h3 id="4、执行依赖安装">4、执行依赖安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span></span><br></pre></td></tr></table></figure><h3 id="5、启动项目">5、启动项目</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="built_in">run</span> dev</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/2e7a17f8446e4fb5bf09adf820bb2836.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/direct/11f45e7ed4f549dfaaa80d554e42df0c.png" alt="在这里插入图片描述"></p><p><strong>至此一个简单的egg工程就创建完毕了。</strong></p>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Egg(三)_解决跨域问题</title>
      <link href="/posts/602.html"/>
      <url>/posts/602.html</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1>前言</h1><h3 id="Egg-项目中关闭csrf，使用-egg-cors处理跨域问题">Egg 项目中关闭csrf，使用 egg-cors处理跨域问题</h3><p><strong>文档：</strong><a href="https://www.npmjs.com/package/egg-cors">https://www.npmjs.com/package/egg-cors</a></p><hr><h2 id="一、安装">一、安装</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> egg-cors <span class="attr">--save</span></span><br></pre></td></tr></table></figure><h2 id="二、配置跨域插件-config-plugin-js">二、配置跨域插件 config/plugin.js</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跨域问题</span></span><br><span class="line"><span class="keyword">exports</span>.cors = &#123;</span><br><span class="line">  enable: <span class="literal">true</span>,</span><br><span class="line">  <span class="keyword">package</span>: <span class="string">&#x27;egg-cors&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三-、config-config-default-js-目录下配置">三 、config / config.default.js 目录下配置</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">config.security = &#123;</span><br><span class="line">    <span class="comment">// 关闭 csrf</span></span><br><span class="line">    csrf: &#123;</span><br><span class="line">      enable: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">     <span class="comment">// 跨域白名单</span></span><br><span class="line">    domainWhiteList: [ <span class="symbol">&#x27;http</span>:<span class="comment">//localhost:3000&#x27; ],</span></span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// 允许跨域的方法</span></span><br><span class="line">  config.cors = &#123;</span><br><span class="line">    origin: <span class="string">&#x27;*&#x27;</span>,</span><br><span class="line">    allowMethods: <span class="symbol">&#x27;GET</span>, PUT, POST, DELETE, PATCH&#x27;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Egg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3.0笔记</title>
      <link href="/posts/307.html"/>
      <url>/posts/307.html</url>
      
        <content type="html"><![CDATA[<h1>1. Vue3简介</h1><ul><li><p>2020年9月18日，<code>Vue.js</code>发布版<code>3.0</code>版本，代号：<code>One Piece</code>（n</p></li><li><p>经历了：<a href="https://github.com/vuejs/core/commits/main">4800+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs">40+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+">600+次PR</a>、<a href="https://github.com/vuejs/core/graphs/contributors">300+贡献者</a></p></li><li><p>官方发版地址：<a href="https://github.com/vuejs/core/releases/tag/v3.0.0">Release v3.0.0 One Piece · vuejs/core</a></p></li><li><p>截止2023年10月，最新的公开版本为：<code>3.3.4</code></p><img src="https://picdemo.cameliia.top/images//1695089947298-161c1b47-eb86-42fb-b1f8-d6a4fcab8ee2.png" alt="image.png" style="zoom:30%;" /> </li></ul><h2 id="1-1-【性能的提升】">1.1. 【性能的提升】</h2><ul><li><p>打包大小减少<code>41%</code>。</p></li><li><p>初次渲染快<code>55%</code>, 更新渲染快<code>133%</code>。</p></li><li><p>内存减少<code>54%</code>。</p></li></ul><h2 id="1-2-【-源码的升级】">1.2.【 源码的升级】</h2><ul><li><p>使用<code>Proxy</code>代替<code>defineProperty</code>实现响应式。</p></li><li><p>重写虚拟<code>DOM</code>的实现和<code>Tree-Shaking</code>。</p></li></ul><h2 id="1-3-【拥抱TypeScript】">1.3. 【拥抱TypeScript】</h2><ul><li><code>Vue3</code>可以更好的支持<code>TypeScript</code>。</li></ul><h2 id="1-4-【新的特性】">1.4. 【新的特性】</h2><ol><li><p><code>Composition API</code>（组合<code>API</code>）：</p><ul><li><p><code>setup</code></p></li><li><p><code>ref</code>与<code>reactive</code></p></li><li><p><code>computed</code>与<code>watch</code></p><p>…</p></li></ul></li><li><p>新的内置组件：</p><ul><li><p><code>Fragment</code></p></li><li><p><code>Teleport</code></p></li><li><p><code>Suspense</code></p><p>…</p></li></ul></li><li><p>其他改变：</p><ul><li><p>新的生命周期钩子</p></li><li><p><code>data</code> 选项应始终被声明为一个函数</p></li><li><p>移除<code>keyCode</code>支持作为<code> v-on</code> 的修饰符</p><p>…</p></li></ul></li></ol><h1>2. 创建Vue3工程</h1><h2 id="2-1-【基于-vue-cli-创建】">2.1. 【基于 vue-cli 创建】</h2><p>点击查看<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">官方文档</a></p><blockquote><p>备注：目前<code>vue-cli</code>已处于维护模式，官方推荐基于 <code>Vite</code> 创建项目。</p></blockquote><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue <span class="literal">--version</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli </span></span><br><span class="line">npm install <span class="literal">-g</span> @vue/<span class="built_in">cli</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 执行创建命令</span></span><br><span class="line">vue create vue_test</span><br><span class="line"></span><br><span class="line"><span class="comment">##  随后选择3.x</span></span><br><span class="line"><span class="comment">##  Choose a version of Vue.js that you want to start the project with (Use arrow keys)</span></span><br><span class="line"><span class="comment">##  &gt; 3.x</span></span><br><span class="line"><span class="comment">##    2.x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><hr><h2 id="2-2-【基于-vite-创建】-推荐">2.2. 【基于 vite 创建】(推荐)</h2><p><code>vite</code> 是新一代前端构建工具，官网地址：<a href="https://vitejs.cn/">https://vitejs.cn</a>，<code>vite</code>的优势如下：</p><ul><li>轻量快速的热重载（<code>HMR</code>），能实现极速的服务启动。</li><li>对 <code>TypeScript</code>、<code>JSX</code>、<code>CSS</code> 等支持开箱即用。</li><li>真正的按需编译，不再等待整个应用编译完成。</li><li><code>webpack</code>构建 与 <code>vite</code>构建对比图如下：<br><img src="https://picdemo.cameliia.top/images/1683167182037-71c78210-8217-4e7d-9a83-e463035efbbe.png" alt="webpack构建" title="webpack构建" style="zoom:20%;box-shadow:0 0 10px black" /><img src="https://picdemo.cameliia.top/images/1683167204081-582dc237-72bc-499e-9589-2cdfd452e62f.png" alt="vite构建" title="vite构建" style="zoom: 20%;box-shadow:0 0 10px black" /></li></ul><ul><li>具体操作如下（点击查看<a href="https://cn.vuejs.org/guide/quick-start.html#creating-a-vue-application">官方文档</a>）</li></ul><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 1.创建命令</span></span><br><span class="line">npm create vue@latest</span><br><span class="line"></span><br><span class="line"><span class="comment">## 2.具体配置</span></span><br><span class="line"><span class="comment">## 配置项目名称</span></span><br><span class="line">√ Project name: vue3_test</span><br><span class="line"><span class="comment">## 是否添加TypeScript支持</span></span><br><span class="line">√ Add TypeScript?  Yes</span><br><span class="line"><span class="comment">## 是否添加JSX支持</span></span><br><span class="line">√ Add JSX Support?  No</span><br><span class="line"><span class="comment">## 是否添加路由环境</span></span><br><span class="line">√ Add Vue Router <span class="keyword">for</span> Single Page Application development?  No</span><br><span class="line"><span class="comment">## 是否添加pinia环境</span></span><br><span class="line">√ Add Pinia <span class="keyword">for</span> state management?  No</span><br><span class="line"><span class="comment">## 是否添加单元测试</span></span><br><span class="line">√ Add Vitest <span class="keyword">for</span> Unit Testing?  No</span><br><span class="line"><span class="comment">## 是否添加端到端测试方案</span></span><br><span class="line">√ Add an <span class="keyword">End</span><span class="literal">-to-End</span> Testing Solution? » No</span><br><span class="line"><span class="comment">## 是否添加ESLint语法检查</span></span><br><span class="line">√ Add ESLint <span class="keyword">for</span> code quality?  Yes</span><br><span class="line"><span class="comment">## 是否添加Prettiert代码格式化</span></span><br><span class="line">√ Add Prettier <span class="keyword">for</span> code formatting?  No</span><br></pre></td></tr></table></figure><p>自己动手编写一个App组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h1&gt;你好啊！&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;App&#x27; //组件名</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">  .app &#123;</span><br><span class="line">    background-color: #ddd;</span><br><span class="line">    box-shadow: 0 0 10px;</span><br><span class="line">    border-radius: 10px;</span><br><span class="line">    padding: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>安装官方推荐的<code>vscode</code>插件：</p><img src="https://picdemo.cameliia.top/images/volar.png" alt="Snipaste_2023-10-08_20-46-34" style="zoom:50%;" /> <img src="https://picdemo.cameliia.top/images/image-20231218085906380.png" alt="image-20231218085906380" style="zoom:42%;" /> <p>总结：</p><ul><li><code>Vite</code> 项目中，<code>index.html</code> 是项目的入口文件，在项目最外层。</li><li>加载<code>index.html</code>后，<code>Vite</code> 解析 <code>&lt;script type=&quot;module&quot; src=&quot;xxx&quot;&gt;</code> 指向的<code>JavaScript</code>。</li><li><code>Vue3</code>**中是通过 **<code>createApp</code> 函数创建一个应用实例。</li></ul><h2 id="2-3-【一个简单的效果】">2.3. 【一个简单的效果】</h2><p><code>Vue3</code>向下兼容<code>Vue2</code>语法，且<code>Vue3</code>中的模板中可以没有根标签</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        name:&#x27;张三&#x27;,</span><br><span class="line">        age:18,</span><br><span class="line">        tel:&#x27;13888888888&#x27;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      changeName()&#123;</span><br><span class="line">        this.name = &#x27;zhang-san&#x27;</span><br><span class="line">      &#125;,</span><br><span class="line">      changeAge()&#123;</span><br><span class="line">        this.age += 1</span><br><span class="line">      &#125;,</span><br><span class="line">      showTel()&#123;</span><br><span class="line">        alert(this.tel)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1>3. Vue3核心语法</h1><h2 id="3-1-【OptionsAPI-与-CompositionAPI】">3.1.  【OptionsAPI 与 CompositionAPI】</h2><ul><li><code>Vue2</code>的<code>API</code>设计是<code>Options</code>（配置）风格的。</li><li><code>Vue3</code>的<code>API</code>设计是<code>Composition</code>（组合）风格的。</li></ul><h3 id="Options-API-的弊端">Options API 的弊端</h3><p><code>Options</code>类型的 <code>API</code>，数据、方法、计算属性等，是分散在：<code>data</code>、<code>methods</code>、<code>computed</code>中的，若想新增或者修改一个需求，就需要分别修改：<code>data</code>、<code>methods</code>、<code>computed</code>，不便于维护和复用。</p><p><img src="https://picdemo.cameliia.top/images/1696662197101-55d2b251-f6e5-47f4-b3f1-d8531bbf9279.gif" alt="1.gif" style="zoom:70%;border-radius:20px" /><img src="https://picdemo.cameliia.top/images/1696662200734-1bad8249-d7a2-423e-a3c3-ab4c110628be.gif" alt="2.gif" style="zoom:70%;border-radius:20px" /></p><h3 id="Composition-API-的优势">Composition API 的优势</h3><p>可以用函数的方式，更加优雅的组织代码，让相关功能的代码更加有序的组织在一起。</p><p><img src="https://picdemo.cameliia.top/images/1696662249851-db6403a1-acb5-481a-88e0-e1e34d2ef53a.gif" alt="3.gif" style="height:300px;border-radius:10px"  /><img src="https://picdemo.cameliia.top/images/1696662256560-7239b9f9-a770-43c1-9386-6cc12ef1e9c0.gif" alt="4.gif" style="height:300px;border-radius:10px"  /></p><blockquote><p>说明：以上四张动图原创作者：大帅老猿</p></blockquote><h2 id="3-2-【拉开序幕的-setup】">3.2. 【拉开序幕的 setup】</h2><h3 id="setup-概述">setup 概述</h3><p><code>setup</code>是<code>Vue3</code>中一个新的配置项，值是一个函数，它是 <code>Composition API</code> <strong>“表演的舞台</strong><em><strong>”</strong></em>，组件中所用到的：数据、方法、计算属性、监视…等等，均配置在<code>setup</code>中。</p><p>特点如下：</p><ul><li><code>setup</code>函数返回的对象中的内容，可直接在模板中使用。</li><li><code>setup</code>中访问<code>this</code>是<code>undefined</code>。</li><li><code>setup</code>函数会在<code>beforeCreate</code>之前调用，它是“领先”所有钩子执行的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Person&#x27;,</span><br><span class="line">    setup()&#123;</span><br><span class="line">      // 数据，原来写在data中（注意：此时的name、age、tel数据都不是响应式数据）</span><br><span class="line">      let name = &#x27;张三&#x27;</span><br><span class="line">      let age = 18</span><br><span class="line">      let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">      // 方法，原来写在methods中</span><br><span class="line">      function changeName()&#123;</span><br><span class="line">        name = &#x27;zhang-san&#x27; //注意：此时这么修改name页面是不变化的</span><br><span class="line">        console.log(name)</span><br><span class="line">      &#125;</span><br><span class="line">      function changeAge()&#123;</span><br><span class="line">        age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class="line">        console.log(age)</span><br><span class="line">      &#125;</span><br><span class="line">      function showTel()&#123;</span><br><span class="line">        alert(tel)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 返回一个对象，对象中的内容，模板中可以直接使用</span><br><span class="line">      return &#123;name,age,tel,changeName,changeAge,showTel&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="setup-的返回值">setup 的返回值</h3><ul><li>若返回一个<strong>对象</strong>：则对象中的：属性、方法等，在模板中均可以直接使用**（重点关注）。**</li><li>若返回一个<strong>函数</strong>：则可以自定义渲染内容，代码如下：</li></ul><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">setup</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">()=&gt;</span> <span class="string">&#x27;你好啊！&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setup-与-Options-API-的关系">setup 与 Options API 的关系</h3><ul><li><code>Vue2</code> 的配置（<code>data</code>、<code>methos</code>…）中<strong>可以访问到</strong> <code>setup</code>中的属性、方法。</li><li>但在<code>setup</code>中<strong>不能访问到</strong><code>Vue2</code>的配置（<code>data</code>、<code>methos</code>…）。</li><li>如果与<code>Vue2</code>冲突，则<code>setup</code>优先。</li></ul><h3 id="setup-语法糖">setup 语法糖</h3><p><code>setup</code>函数有一个语法糖，这个语法糖，可以让我们把<code>setup</code>独立出去，代码如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;Person&#x27;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 下面的写法是setup语法糖 --&gt;</span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  console.log(this) //undefined</span><br><span class="line">  </span><br><span class="line">  // 数据（注意：此时的name、age、tel都不是响应式数据）</span><br><span class="line">  let name = &#x27;张三&#x27;</span><br><span class="line">  let age = 18</span><br><span class="line">  let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changName()&#123;</span><br><span class="line">    name = &#x27;李四&#x27;//注意：此时这么修改name页面是不变化的</span><br><span class="line">  &#125;</span><br><span class="line">  function changAge()&#123;</span><br><span class="line">    console.log(age)</span><br><span class="line">    age += 1 //注意：此时这么修改age页面是不变化的</span><br><span class="line">  &#125;</span><br><span class="line">  function showTel()&#123;</span><br><span class="line">    alert(tel)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>扩展：上述代码，还需要编写一个不写<code>setup</code>的<code>script</code>标签，去指定组件名字，比较麻烦，我们可以借助<code>vite</code>中的插件简化</p><ol><li>第一步：<code>npm i vite-plugin-vue-setup-extend -D</code></li><li>第二步：<code>vite.config.ts</code></li></ol><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueSetupExtend</span> <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue-setup-extend&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [ <span class="title class_">VueSetupExtend</span>() ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol start="3"><li>第三步：<code>&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</code></li></ol><h2 id="3-3-【ref-创建：基本类型的响应式数据】">3.3. 【ref 创建：基本类型的响应式数据】</h2><ul><li>**作用：**定义响应式变量。</li><li><strong>语法：</strong><code>let xxx = ref(初始值)</code>。</li><li>**返回值：**一个<code>RefImpl</code>的实例对象，简称<code>ref对象</code>或<code>ref</code>，<code>ref</code>对象的<code>value</code><strong>属性是响应式的</strong>。</li><li><strong>注意点：</strong><ul><li><code>JS</code>中操作数据需要：<code>xxx.value</code>，但模板中不需要<code>.value</code>，直接使用即可。</li><li>对于<code>let name = ref('张三')</code>来说，<code>name</code>不是响应式的，<code>name.value</code>是响应式的。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;年龄+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;showTel&quot;&gt;点我查看联系方式&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">  // name和age是一个RefImpl的实例对象，简称ref对象，它们的value属性是响应式的。</span><br><span class="line">  let name = ref(&#x27;张三&#x27;)</span><br><span class="line">  let age = ref(18)</span><br><span class="line">  // tel就是一个普通的字符串，不是响应式的</span><br><span class="line">  let tel = &#x27;13888888888&#x27;</span><br><span class="line"></span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    // JS中操作ref对象时候需要.value</span><br><span class="line">    name.value = &#x27;李四&#x27;</span><br><span class="line">    console.log(name.value)</span><br><span class="line"></span><br><span class="line">    // 注意：name不是响应式的，name.value是响应式的，所以如下代码并不会引起页面的更新。</span><br><span class="line">    // name = ref(&#x27;zhang-san&#x27;)</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    // JS中操作ref对象时候需要.value</span><br><span class="line">    age.value += 1 </span><br><span class="line">    console.log(age.value)</span><br><span class="line">  &#125;</span><br><span class="line">  function showTel()&#123;</span><br><span class="line">    alert(tel)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-4-【reactive-创建：对象类型的响应式数据】">3.4. 【reactive 创建：对象类型的响应式数据】</h2><ul><li><strong>作用：<strong>定义一个</strong>响应式对象</strong>（基本类型不要用它，要用<code>ref</code>，否则报错）</li><li><strong>语法：</strong><code>let 响应式对象= reactive(源对象)</code>。</li><li>**返回值：**一个<code>Proxy</code>的实例对象，简称：响应式对象。</li><li><strong>注意点：</strong><code>reactive</code>定义的响应式数据是“深层次”的。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 数据</span><br><span class="line">let car = reactive(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class="line">let games = reactive([</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">let obj = reactive(&#123;</span><br><span class="line">  a:&#123;</span><br><span class="line">    b:&#123;</span><br><span class="line">      c:&#123;</span><br><span class="line">        d:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">function changeCarPrice() &#123;</span><br><span class="line">  car.price += 10</span><br><span class="line">&#125;</span><br><span class="line">function changeFirstGame() &#123;</span><br><span class="line">  games[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function test()&#123;</span><br><span class="line">  obj.a.b.c.d = 999</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-5-【ref-创建：对象类型的响应式数据】">3.5. 【ref 创建：对象类型的响应式数据】</h2><ul><li>其实<code>ref</code>接收的数据可以是：<strong>基本类型</strong>、<strong>对象类型</strong>。</li><li>若<code>ref</code>接收的是对象类型，内部其实也是调用了<code>reactive</code>函数。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;汽车信息：一台&#123;&#123; car.brand &#125;&#125;汽车，价值&#123;&#123; car.price &#125;&#125;万&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;游戏列表：&lt;/h2&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c.d&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCarPrice&quot;&gt;修改汽车价格&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFirstGame&quot;&gt;修改第一游戏&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">// 数据</span><br><span class="line">let car = ref(&#123; brand: &#x27;奔驰&#x27;, price: 100 &#125;)</span><br><span class="line">let games = ref([</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa01&#x27;, name: &#x27;英雄联盟&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa02&#x27;, name: &#x27;王者荣耀&#x27; &#125;,</span><br><span class="line">  &#123; id: &#x27;ahsgdyfa03&#x27;, name: &#x27;原神&#x27; &#125;</span><br><span class="line">])</span><br><span class="line">let obj = ref(&#123;</span><br><span class="line">  a:&#123;</span><br><span class="line">    b:&#123;</span><br><span class="line">      c:&#123;</span><br><span class="line">        d:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">console.log(car)</span><br><span class="line"></span><br><span class="line">function changeCarPrice() &#123;</span><br><span class="line">  car.value.price += 10</span><br><span class="line">&#125;</span><br><span class="line">function changeFirstGame() &#123;</span><br><span class="line">  games.value[0].name = &#x27;流星蝴蝶剑&#x27;</span><br><span class="line">&#125;</span><br><span class="line">function test()&#123;</span><br><span class="line">  obj.value.a.b.c.d = 999</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-6-【ref-对比-reactive】">3.6. 【ref 对比 reactive】</h2><p>宏观角度看：</p><blockquote><ol><li><p><code>ref</code>用来定义：<strong>基本类型数据</strong>、<strong>对象类型数据</strong>；</p></li><li><p><code>reactive</code>用来定义：<strong>对象类型数据</strong>。</p></li></ol></blockquote><ul><li>区别：</li></ul><blockquote><ol><li><p><code>ref</code>创建的变量必须使用<code>.value</code>（可以使用<code>volar</code>插件自动添加<code>.value</code>）。</p><img src="../../social/images/自动补充value.png" alt="自动补充value" style="zoom:50%;border-radius:20px" /> </li><li><p><code>reactive</code>重新分配一个新对象，会<strong>失去</strong>响应式（可以使用<code>Object.assign</code>去整体替换）。</p></li></ol></blockquote><ul><li>使用原则：</li></ul><blockquote><ol><li>若需要一个基本类型的响应式数据，必须使用<code>ref</code>。</li><li>若需要一个响应式对象，层级不深，<code>ref</code>、<code>reactive</code>都可以。</li><li>若需要一个响应式对象，且层级较深，推荐使用<code>reactive</code>。</li></ol></blockquote><h2 id="3-7-【toRefs-与-toRef】">3.7. 【toRefs 与 toRef】</h2><ul><li>作用：将一个响应式对象中的每一个属性，转换为<code>ref</code>对象。</li><li>备注：<code>toRefs</code>与<code>toRef</code>功能一致，但<code>toRefs</code>可以批量转换。</li><li>语法如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123;person.name&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123;person.age&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;性别：&#123;&#123;person.gender&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeGender&quot;&gt;修改性别&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,reactive,toRefs,toRef&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;name:&#x27;张三&#x27;, age:18, gender:&#x27;男&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">  // 通过toRefs将person对象中的n个属性批量取出，且依然保持响应式的能力</span><br><span class="line">  let &#123;name,gender&#125; =  toRefs(person)</span><br><span class="line"></span><br><span class="line">  // 通过toRef将person对象中的gender属性取出，且依然保持响应式的能力</span><br><span class="line">  let age = toRef(person,&#x27;age&#x27;)</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    name.value += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    age.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeGender()&#123;</span><br><span class="line">    gender.value = &#x27;女&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-8-【computed】">3.8. 【computed】</h2><p>作用：根据已有数据计算出新数据（和<code>Vue2</code>中的<code>computed</code>作用一致）。</p><img src="https://picdemo.cameliia.top/images/computed.gif" style="zoom:20%;" />  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    姓：&lt;input type=&quot;text&quot; v-model=&quot;firstName&quot;&gt; &lt;br&gt;</span><br><span class="line">    名：&lt;input type=&quot;text&quot; v-model=&quot;lastName&quot;&gt; &lt;br&gt;</span><br><span class="line">    全名：&lt;span&gt;&#123;&#123;fullName&#125;&#125;&lt;/span&gt; &lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;changeFullName&quot;&gt;全名改为：li-si&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;App&quot;&gt;</span><br><span class="line">  import &#123;ref,computed&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let firstName = ref(&#x27;zhang&#x27;)</span><br><span class="line">  let lastName = ref(&#x27;san&#x27;)</span><br><span class="line"></span><br><span class="line">  // 计算属性——只读取，不修改</span><br><span class="line">  /* let fullName = computed(()=&gt;&#123;</span><br><span class="line">    return firstName.value + &#x27;-&#x27; + lastName.value</span><br><span class="line">  &#125;) */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  // 计算属性——既读取又修改</span><br><span class="line">  let fullName = computed(&#123;</span><br><span class="line">    // 读取</span><br><span class="line">    get()&#123;</span><br><span class="line">      return firstName.value + &#x27;-&#x27; + lastName.value</span><br><span class="line">    &#125;,</span><br><span class="line">    // 修改</span><br><span class="line">    set(val)&#123;</span><br><span class="line">      console.log(&#x27;有人修改了fullName&#x27;,val)</span><br><span class="line">      firstName.value = val.split(&#x27;-&#x27;)[0]</span><br><span class="line">      lastName.value = val.split(&#x27;-&#x27;)[1]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  function changeFullName()&#123;</span><br><span class="line">    fullName.value = &#x27;li-si&#x27;</span><br><span class="line">  &#125; </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-9-【watch】">3.9.【watch】</h2><ul><li>作用：监视数据的变化（和<code>Vue2</code>中的<code>watch</code>作用一致）</li><li>特点：<code>Vue3</code>中的<code>watch</code>只能监视以下<strong>四种数据</strong>：</li></ul><blockquote><ol><li><code>ref</code>定义的数据。</li><li><code>reactive</code>定义的数据。</li><li>函数返回一个值（<code>getter</code>函数）。</li><li>一个包含上述内容的数组。</li></ol></blockquote><p>我们在<code>Vue3</code>中使用<code>watch</code>的时候，通常会遇到以下几种情况：</p><h3 id="情况一">* 情况一</h3><p>监视<code>ref</code>定义的【基本类型】数据：直接写数据名即可，监视的是其<code>value</code>值的改变。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况一：监视【ref】定义的【基本类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let sum = ref(0)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeSum()&#123;</span><br><span class="line">    sum.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  // 监视，情况一：监视【ref】定义的【基本类型】数据</span><br><span class="line">  const stopWatch = watch(sum,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;sum变化了&#x27;,newValue,oldValue)</span><br><span class="line">    if(newValue &gt;= 10)&#123;</span><br><span class="line">      stopWatch()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况二">* 情况二</h3><p>监视<code>ref</code>定义的【对象类型】数据：直接写数据名，监视的是对象的【地址值】，若想监视对象内部的数据，要手动开启深度监视。</p><blockquote><p>注意：</p><ul><li><p>若修改的是<code>ref</code>定义的对象中的属性，<code>newValue</code> 和 <code>oldValue</code> 都是新值，因为它们是同一个对象。</p></li><li><p>若修改整个<code>ref</code>定义的对象，<code>newValue</code> 是新值， <code>oldValue</code> 是旧值，因为不是同一个对象了。</p></li></ul></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况二：监视【ref】定义的【对象类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let person = ref(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.value.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.value.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changePerson()&#123;</span><br><span class="line">    person.value = &#123;name:&#x27;李四&#x27;,age:90&#125;</span><br><span class="line">  &#125;</span><br><span class="line">  /* </span><br><span class="line">    监视，情况一：监视【ref】定义的【对象类型】数据，监视的是对象的地址值，若想监视对象内部属性的变化，需要手动开启深度监视</span><br><span class="line">    watch的第一个参数是：被监视的数据</span><br><span class="line">    watch的第二个参数是：监视的回调</span><br><span class="line">    watch的第三个参数是：配置对象（deep、immediate等等.....） </span><br><span class="line">  */</span><br><span class="line">  watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况三">*  情况三</h3><p>监视<code>reactive</code>定义的【对象类型】数据，且默认开启了深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况三：监视【reactive】定义的【对象类型】数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changePerson&quot;&gt;修改整个人&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h2&gt;测试：&#123;&#123;obj.a.b.c&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;test&quot;&gt;修改obj.a.b.c&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18</span><br><span class="line">  &#125;)</span><br><span class="line">  let obj = reactive(&#123;</span><br><span class="line">    a:&#123;</span><br><span class="line">      b:&#123;</span><br><span class="line">        c:666</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changePerson()&#123;</span><br><span class="line">    Object.assign(person,&#123;name:&#x27;李四&#x27;,age:80&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  function test()&#123;</span><br><span class="line">    obj.a.b.c = 888</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况三：监视【reactive】定义的【对象类型】数据，且默认是开启深度监视的</span><br><span class="line">  watch(person,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;)</span><br><span class="line">  watch(obj,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;Obj变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况四">* 情况四</h3><p>监视<code>ref</code>或<code>reactive</code>定义的【对象类型】数据中的<strong>某个属性</strong>，注意点如下：</p><ol><li>若该属性值<strong>不是</strong>【对象类型】，需要写成函数形式。</li><li>若该属性值是<strong>依然</strong>是【对象类型】，可直接编，也可写成函数，建议写成函数。</li></ol><p>结论：监视的要是对象里的属性，那么最好写函数式，注意点：若是对象监视的是地址值，需要关注对象内部，需要手动开启深度监视。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况四：监视【ref】或【reactive】定义的【对象类型】数据中的某个属性&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18,</span><br><span class="line">    car:&#123;</span><br><span class="line">      c1:&#x27;奔驰&#x27;,</span><br><span class="line">      c2:&#x27;宝马&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC1()&#123;</span><br><span class="line">    person.car.c1 = &#x27;奥迪&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC2()&#123;</span><br><span class="line">    person.car.c2 = &#x27;大众&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeCar()&#123;</span><br><span class="line">    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况四：监视响应式对象中的某个属性，且该属性是基本类型的，要写成函数式</span><br><span class="line">  /* watch(()=&gt; person.name,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.name变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;) */</span><br><span class="line"></span><br><span class="line">  // 监视，情况四：监视响应式对象中的某个属性，且该属性是对象类型的，可以直接写，也能写函数，更推荐写函数</span><br><span class="line">  watch(()=&gt;person.car,(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="情况五">* 情况五</h3><p>监视上述的多个数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;情况五：监视上述的多个数据&lt;/h1&gt;</span><br><span class="line">    &lt;h2&gt;姓名：&#123;&#123; person.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄：&#123;&#123; person.age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;汽车：&#123;&#123; person.car.c1 &#125;&#125;、&#123;&#123; person.car.c2 &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改名字&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改年龄&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC1&quot;&gt;修改第一台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeC2&quot;&gt;修改第二台车&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCar&quot;&gt;修改整个车&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;reactive,watch&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let person = reactive(&#123;</span><br><span class="line">    name:&#x27;张三&#x27;,</span><br><span class="line">    age:18,</span><br><span class="line">    car:&#123;</span><br><span class="line">      c1:&#x27;奔驰&#x27;,</span><br><span class="line">      c2:&#x27;宝马&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeName()&#123;</span><br><span class="line">    person.name += &#x27;~&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeAge()&#123;</span><br><span class="line">    person.age += 1</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC1()&#123;</span><br><span class="line">    person.car.c1 = &#x27;奥迪&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeC2()&#123;</span><br><span class="line">    person.car.c2 = &#x27;大众&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">  function changeCar()&#123;</span><br><span class="line">    person.car = &#123;c1:&#x27;雅迪&#x27;,c2:&#x27;爱玛&#x27;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 监视，情况五：监视上述的多个数据</span><br><span class="line">  watch([()=&gt;person.name,person.car],(newValue,oldValue)=&gt;&#123;</span><br><span class="line">    console.log(&#x27;person.car变化了&#x27;,newValue,oldValue)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-10-【watchEffect】">3.10. 【watchEffect】</h2><ul><li><p>官网：立即运行一个函数，同时响应式地追踪其依赖，并在依赖更改时重新执行该函数。</p></li><li><p><code>watch</code>对比<code>watchEffect</code></p><blockquote><ol><li><p>都能监听响应式数据的变化，不同的是监听数据变化的方式不同</p></li><li><p><code>watch</code>：要明确指出监视的数据</p></li><li><p><code>watchEffect</code>：不用明确指出监视的数据（函数中用到哪些属性，那就监视哪些属性）。</p></li></ol></blockquote></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1&gt;需求：水温达到50℃，或水位达到20cm，则联系服务器&lt;/h1&gt;</span><br><span class="line">    &lt;h2 id=&quot;demo&quot;&gt;水温：&#123;&#123;temp&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;水位：&#123;&#123;height&#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changePrice&quot;&gt;水温+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;水位+10&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,watch,watchEffect&#125; from &#x27;vue&#x27;</span><br><span class="line">  // 数据</span><br><span class="line">  let temp = ref(0)</span><br><span class="line">  let height = ref(0)</span><br><span class="line"></span><br><span class="line">  // 方法</span><br><span class="line">  function changePrice()&#123;</span><br><span class="line">    temp.value += 10</span><br><span class="line">  &#125;</span><br><span class="line">  function changeSum()&#123;</span><br><span class="line">    height.value += 1</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 用watch实现，需要明确的指出要监视：temp、height</span><br><span class="line">  watch([temp,height],(value)=&gt;&#123;</span><br><span class="line">    // 从value中获取最新的temp值、height值</span><br><span class="line">    const [newTemp,newHeight] = value</span><br><span class="line">    // 室温达到50℃，或水位达到20cm，立刻联系服务器</span><br><span class="line">    if(newTemp &gt;= 50 || newHeight &gt;= 20)&#123;</span><br><span class="line">      console.log(&#x27;联系服务器&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  // 用watchEffect实现，不用</span><br><span class="line">  const stopWtach = watchEffect(()=&gt;&#123;</span><br><span class="line">    // 室温达到50℃，或水位达到20cm，立刻联系服务器</span><br><span class="line">    if(temp.value &gt;= 50 || height.value &gt;= 20)&#123;</span><br><span class="line">      console.log(document.getElementById(&#x27;demo&#x27;)?.innerText)</span><br><span class="line">      console.log(&#x27;联系服务器&#x27;)</span><br><span class="line">    &#125;</span><br><span class="line">    // 水温达到100，或水位达到50，取消监视</span><br><span class="line">    if(temp.value === 100 || height.value === 50)&#123;</span><br><span class="line">      console.log(&#x27;清理了&#x27;)</span><br><span class="line">      stopWtach()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-11-【标签的-ref-属性】">3.11. 【标签的 ref 属性】</h2><p>作用：用于注册模板引用。</p><blockquote><ul><li><p>用在普通<code>DOM</code>标签上，获取的是<code>DOM</code>节点。</p></li><li><p>用在组件标签上，获取的是组件实例对象。</p></li></ul></blockquote><p>用在普通<code>DOM</code>标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h1 ref=&quot;title1&quot;&gt;尚硅谷&lt;/h1&gt;</span><br><span class="line">    &lt;h2 ref=&quot;title2&quot;&gt;前端&lt;/h2&gt;</span><br><span class="line">    &lt;h3 ref=&quot;title3&quot;&gt;Vue&lt;/h3&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; ref=&quot;inpt&quot;&gt; &lt;br&gt;&lt;br&gt;</span><br><span class="line">    &lt;button @click=&quot;showLog&quot;&gt;点我打印内容&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let title1 = ref()</span><br><span class="line">  let title2 = ref()</span><br><span class="line">  let title3 = ref()</span><br><span class="line"></span><br><span class="line">  function showLog()&#123;</span><br><span class="line">    // 通过id获取元素</span><br><span class="line">    const t1 = document.getElementById(&#x27;title1&#x27;)</span><br><span class="line">    // 打印内容</span><br><span class="line">    console.log((t1 as HTMLElement).innerText)</span><br><span class="line">    console.log((&lt;HTMLElement&gt;t1).innerText)</span><br><span class="line">    console.log(t1?.innerText)</span><br><span class="line">    </span><br><span class="line">/************************************/</span><br><span class="line"></span><br><span class="line">    // 通过ref获取元素</span><br><span class="line">    console.log(title1.value)</span><br><span class="line">    console.log(title2.value)</span><br><span class="line">    console.log(title3.value)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>用在组件标签上：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 父组件App.vue --&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;Person ref=&quot;ren&quot;/&gt;</span><br><span class="line">  &lt;button @click=&quot;test&quot;&gt;测试&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;</span><br><span class="line">  import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  let ren = ref()</span><br><span class="line"></span><br><span class="line">  function test()&#123;</span><br><span class="line">    console.log(ren.value.name)</span><br><span class="line">    console.log(ren.value.age)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;!-- 子组件Person.vue中要使用defineExpose暴露内容 --&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123;ref,defineExpose&#125; from &#x27;vue&#x27;</span><br><span class="line">// 数据</span><br><span class="line">  let name = ref(&#x27;张三&#x27;)</span><br><span class="line">  let age = ref(18)</span><br><span class="line">  /****************************/</span><br><span class="line">  /****************************/</span><br><span class="line">  // 使用defineExpose将组件中的数据交给外部</span><br><span class="line">  defineExpose(&#123;name,age&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-12-【props】">3.12. 【props】</h2><blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment">// 定义一个接口，限制每个Person对象的格式</span></span><br><span class="line"><span class="keyword">export</span> interface <span class="title class_">PersonInter</span> &#123;</span><br><span class="line"> <span class="attr">id</span>:string,</span><br><span class="line"> <span class="attr">name</span>:string,</span><br><span class="line">    <span class="attr">age</span>:number</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line"><span class="comment">// 定义一个自定义类型Persons</span></span><br><span class="line"><span class="keyword">export</span> type <span class="title class_">Persons</span> = <span class="title class_">Array</span>&lt;<span class="title class_">PersonInter</span>&gt;</span><br></pre></td></tr></table></figure><p><code>App.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;template&gt;</span><br><span class="line">&lt;Person :list=&quot;persons&quot;/&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import Person from &#x27;./components/Person.vue&#x27;</span><br><span class="line">  import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">    import &#123;type Persons&#125; from &#x27;./types&#x27;</span><br><span class="line">  </span><br><span class="line">    let persons = reactive&lt;Persons&gt;([</span><br><span class="line">     &#123;id:&#x27;e98219e12&#x27;,name:&#x27;张三&#x27;,age:18&#125;,</span><br><span class="line">      &#123;id:&#x27;e98219e13&#x27;,name:&#x27;李四&#x27;,age:19&#125;,</span><br><span class="line">       &#123;id:&#x27;e98219e14&#x27;,name:&#x27;王五&#x27;,age:20&#125;</span><br><span class="line">     ])</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><p><code>Person.vue</code>中代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&gt;&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;person&quot;&gt;</span><br><span class="line"> &lt;ul&gt;</span><br><span class="line">     &lt;li v-for=&quot;item in list&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &#123;&#123;item.name&#125;&#125;--&#123;&#123;item.age&#125;&#125;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">import &#123;defineProps&#125; from &#x27;vue&#x27;</span><br><span class="line">import &#123;type PersonInter&#125; from &#x27;@/types&#x27;</span><br><span class="line">  </span><br><span class="line">  // 第一种写法：仅接收</span><br><span class="line">// const props = defineProps([&#x27;list&#x27;])</span><br><span class="line">  </span><br><span class="line">  // 第二种写法：接收+限制类型</span><br><span class="line">// defineProps&lt;&#123;list:Persons&#125;&gt;()</span><br><span class="line">  </span><br><span class="line">  // 第三种写法：接收+限制类型+指定默认值+限制必要性</span><br><span class="line">let props = withDefaults(defineProps&lt;&#123;list?:Persons&#125;&gt;(),&#123;</span><br><span class="line">     list:()=&gt;[&#123;id:&#x27;asdasg01&#x27;,name:&#x27;小猪佩奇&#x27;,age:18&#125;]</span><br><span class="line">  &#125;)</span><br><span class="line">   console.log(props)</span><br><span class="line">  &lt;/script&gt;</span><br></pre></td></tr></table></figure></blockquote><h2 id="3-13-【生命周期】">3.13. 【生命周期】</h2><ul><li><p>概念：<code>Vue</code>组件实例在创建时要经历一系列的初始化步骤，在此过程中<code>Vue</code>会在合适的时机，调用特定的函数，从而让开发者有机会在特定阶段运行自己的代码，这些特定的函数统称为：生命周期钩子</p></li><li><p>规律：</p><blockquote><p>生命周期整体分为四个阶段，分别是：<strong>创建、挂载、更新、销毁</strong>，每个阶段都有两个钩子，一前一后。</p></blockquote></li><li><p><code>Vue2</code>的生命周期</p><blockquote><p>创建阶段：<code>beforeCreate</code>、<code>created</code></p><p>挂载阶段：<code>beforeMount</code>、<code>mounted</code></p><p>更新阶段：<code>beforeUpdate</code>、<code>updated</code></p><p>销毁阶段：<code>beforeDestroy</code>、<code>destroyed</code></p></blockquote></li><li><p><code>Vue3</code>的生命周期</p><blockquote><p>创建阶段：<code>setup</code></p><p>挂载阶段：<code>onBeforeMount</code>、<code>onMounted</code></p><p>更新阶段：<code>onBeforeUpdate</code>、<code>onUpdated</code></p><p>卸载阶段：<code>onBeforeUnmount</code>、<code>onUnmounted</code></p></blockquote></li><li><p>常用的钩子：<code>onMounted</code>(挂载完毕)、<code>onUpdated</code>(更新完毕)、<code>onBeforeUnmount</code>(卸载之前)</p></li><li><p>示例代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;person&quot;&gt;</span><br><span class="line">    &lt;h2&gt;当前求和为：&#123;&#123; sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeSum&quot;&gt;点我sum+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- vue3写法 --&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;Person&quot;&gt;</span><br><span class="line">  import &#123; </span><br><span class="line">    ref, </span><br><span class="line">    onBeforeMount, </span><br><span class="line">    onMounted, </span><br><span class="line">    onBeforeUpdate, </span><br><span class="line">    onUpdated, </span><br><span class="line">    onBeforeUnmount, </span><br><span class="line">    onUnmounted </span><br><span class="line">  &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 数据</span><br><span class="line">  let sum = ref(0)</span><br><span class="line">  // 方法</span><br><span class="line">  function changeSum() &#123;</span><br><span class="line">    sum.value += 1</span><br><span class="line">  &#125;</span><br><span class="line">  console.log(&#x27;setup&#x27;)</span><br><span class="line">  // 生命周期钩子</span><br><span class="line">  onBeforeMount(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onMounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;挂载完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUpdate(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUpdated(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;更新完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onBeforeUnmount(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;卸载之前&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  onUnmounted(()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;卸载完毕&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-14-【自定义hook】">3.14. 【自定义hook】</h2><ul><li><p>什么是<code>hook</code>？—— 本质是一个函数，把<code>setup</code>函数中使用的<code>Composition API</code>进行了封装，类似于<code>vue2.x</code>中的<code>mixin</code>。</p></li><li><p>自定义<code>hook</code>的优势：复用代码, 让<code>setup</code>中的逻辑更清楚易懂。</p></li></ul><p>示例代码：</p><ul><li><p><code>useSum.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref,onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    sum.<span class="property">value</span> += <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">decrement</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    sum.<span class="property">value</span> -= <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">increment</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向外部暴露数据</span></span><br><span class="line">  <span class="keyword">return</span> &#123;sum,increment,decrement&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>useDog.ts</code>中内容如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;reactive,onMounted&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios,&#123;<span class="title class_">AxiosError</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> dogList = reactive&lt;string[]&gt;([])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 方法</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getDog</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 发请求</span></span><br><span class="line">      <span class="keyword">let</span> &#123;data&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://dog.ceo/api/breed/pembroke/images/random&#x27;</span>)</span><br><span class="line">      <span class="comment">// 维护数据</span></span><br><span class="line">      dogList.<span class="title function_">push</span>(data.<span class="property">message</span>)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="comment">// 处理错误</span></span><br><span class="line">      <span class="keyword">const</span> err = &lt;<span class="title class_">AxiosError</span>&gt;error</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 挂载钩子</span></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">getDog</span>()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向外部暴露数据</span></span><br><span class="line">  <span class="keyword">return</span> &#123;dogList,getDog&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件中具体使用：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;button @click=&quot;increment&quot;&gt;点我+1&lt;/button&gt;</span><br><span class="line">  &lt;button @click=&quot;decrement&quot;&gt;点我-1&lt;/button&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;img v-for=&quot;(u,index) in dogList.urlList&quot; :key=&quot;index&quot; :src=&quot;(u as string)&quot;&gt; </span><br><span class="line">  &lt;span v-show=&quot;dogList.isLoading&quot;&gt;加载中......&lt;/span&gt;&lt;br&gt;</span><br><span class="line">  &lt;button @click=&quot;getDog&quot;&gt;再来一只狗&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot;&gt;</span><br><span class="line">  import &#123;defineComponent&#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default defineComponent(&#123;</span><br><span class="line">    name:&#x27;App&#x27;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot;&gt;</span><br><span class="line">  import useSum from &#x27;./hooks/useSum&#x27;</span><br><span class="line">  import useDog from &#x27;./hooks/useDog&#x27;</span><br><span class="line"></span><br><span class="line">  let &#123;sum,increment,decrement&#125; = useSum()</span><br><span class="line">  let &#123;dogList,getDog&#125; = useDog()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h1>4. 路由</h1><h2 id="4-1-【对路由的理解】">4.1. 【对路由的理解】</h2><img src="../../social/images/image-20231018144351536.png" alt="image-20231018144351536" style="zoom:20%;border-radius:40px" /> <h2 id="4-2-【基本切换效果】">4.2. 【基本切换效果】</h2><ul><li><p><code>Vue3</code>中要使用<code>vue-router</code>的最新版本，目前是<code>4</code>版本。</p></li><li><p>路由配置文件代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">News</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/News.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&#x27;@/pages/About.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line"><span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>main.ts</code>代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router/index&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>App.vue</code>代码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2 class=&quot;title&quot;&gt;Vue路由测试&lt;/h2&gt;</span><br><span class="line">    &lt;!-- 导航区 --&gt;</span><br><span class="line">    &lt;div class=&quot;navigate&quot;&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/home&quot; active-class=&quot;active&quot;&gt;首页&lt;/RouterLink&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/news&quot; active-class=&quot;active&quot;&gt;新闻&lt;/RouterLink&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/about&quot; active-class=&quot;active&quot;&gt;关于&lt;/RouterLink&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 展示区 --&gt;</span><br><span class="line">    &lt;div class=&quot;main-content&quot;&gt;</span><br><span class="line">      &lt;RouterView&gt;&lt;/RouterView&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  import &#123;RouterLink,RouterView&#125; from &#x27;vue-router&#x27;  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-3-【两个注意点】">4.3. 【两个注意点】</h2><blockquote><ol><li><p>路由组件通常存放在<code>pages</code> 或 <code>views</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</p></li><li><p>通过点击导航，视觉效果上“消失” 了的路由组件，默认是被<strong>卸载</strong>掉的，需要的时候再去<strong>挂载</strong>。</p></li></ol></blockquote><h2 id="4-4-【路由器工作模式】">4.4.【路由器工作模式】</h2><ol><li><p><code>history</code>模式</p><blockquote><p>优点：<code>URL</code>更加美观，不带有<code>#</code>，更接近传统的网站<code>URL</code>。</p><p>缺点：后期项目上线，需要服务端配合处理路径问题，否则刷新会有<code>404</code>错误。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(), <span class="comment">//history模式</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li><li><p><code>hash</code>模式</p><blockquote><p>优点：兼容性更好，因为不需要服务器端处理路径。</p><p>缺点：<code>URL</code>带有<code>#</code>不太美观，且在<code>SEO</code>优化方面相对较差。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHashHistory</span>(), <span class="comment">//hash模式</span></span><br><span class="line">  <span class="comment">/******/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></blockquote></li></ol><h2 id="4-5-【to的两种写法】">4.5. 【to的两种写法】</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 第一种：to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; to=&quot;/home&quot;&gt;主页&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 第二种：to的对象写法 --&gt;</span><br><span class="line">&lt;router-link active-class=&quot;active&quot; :to=&quot;&#123;path:&#x27;/home&#x27;&#125;&quot;&gt;Home&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h2 id="4-6-【命名路由】">4.6. 【命名路由】</h2><p>作用：可以简化路由跳转及传参（后面就讲）。</p><p>给路由规则命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>跳转路由：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前：需要写完整的路径（to的字符串写法） --&gt;</span><br><span class="line">&lt;router-link to=&quot;/news/detail&quot;&gt;跳转&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后：直接通过名字跳转（to的对象写法配合name属性） --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;name:&#x27;guanyu&#x27;&#125;&quot;&gt;跳转&lt;/router-link&gt;</span><br></pre></td></tr></table></figure><h2 id="4-7-【嵌套路由】">4.7. 【嵌套路由】</h2><ol><li><p>编写<code>News</code>的子路由：<code>Detail.vue</code></p></li><li><p>配置路由规则，使用<code>children</code>配置项：</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>:<span class="title function_">createWebHistory</span>(),</span><br><span class="line"><span class="attr">routes</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;zhuye&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xinwen&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/news&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">News</span>,</span><br><span class="line"><span class="attr">children</span>:[</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiang&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;guanyu&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">About</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>跳转路由（记得要加完整路径）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=&quot;/news/detail&quot;&gt;xxxx&lt;/router-link&gt;</span><br><span class="line">&lt;!-- 或 --&gt;</span><br><span class="line">&lt;router-link :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;xxxx&lt;/router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>记得去<code>Home</code>组件中预留一个<code>&lt;router-view&gt;</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;news&quot;&gt;</span><br><span class="line">    &lt;nav class=&quot;news-list&quot;&gt;</span><br><span class="line">      &lt;RouterLink v-for=&quot;news in newsList&quot; :key=&quot;news.id&quot; :to=&quot;&#123;path:&#x27;/news/detail&#x27;&#125;&quot;&gt;</span><br><span class="line">        &#123;&#123;news.name&#125;&#125;</span><br><span class="line">      &lt;/RouterLink&gt;</span><br><span class="line">    &lt;/nav&gt;</span><br><span class="line">    &lt;div class=&quot;news-detail&quot;&gt;</span><br><span class="line">      &lt;RouterView/&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-8-【路由传参】">4.8. 【路由传参】</h2><h3 id="query参数">query参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;router-link to=&quot;/news/detail?a=1&amp;b=2&amp;content=欢迎你&quot;&gt;</span><br><span class="line">跳转</span><br><span class="line">&lt;/router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    //name:&#x27;xiang&#x27;, //用name也可以跳转</span><br><span class="line">    path:&#x27;/news/detail&#x27;,</span><br><span class="line">    query:&#123;</span><br><span class="line">      id:news.id,</span><br><span class="line">      title:news.title,</span><br><span class="line">      content:news.content</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="comment">// 打印query参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span><br></pre></td></tr></table></figure></li></ol><h3 id="params参数">params参数</h3><ol><li><p>传递参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数（to的字符串写法） --&gt;</span><br><span class="line">&lt;RouterLink :to=&quot;`/news/detail/001/新闻001/内容001`&quot;&gt;&#123;&#123;news.title&#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数（to的对象写法） --&gt;</span><br><span class="line">&lt;RouterLink </span><br><span class="line">  :to=&quot;&#123;</span><br><span class="line">    name:&#x27;xiang&#x27;, //用name跳转</span><br><span class="line">    params:&#123;</span><br><span class="line">      id:news.id,</span><br><span class="line">      title:news.title,</span><br><span class="line">      content:news.title</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;</span><br><span class="line">  &#123;&#123;news.title&#125;&#125;</span><br><span class="line">&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="comment">// 打印params参数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">params</span>)</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注1：传递<code>params</code>参数时，若使用<code>to</code>的对象写法，必须使用<code>name</code>配置项，不能用<code>path</code>。</p><p>备注2：传递<code>params</code>参数时，需要提前在规则中占位。</p></blockquote><h2 id="4-9-【路由的props配置】">4.9. 【路由的props配置】</h2><p>作用：让路由组件更方便的收到参数（可以将路由参数作为<code>props</code>传给组件）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;xiang&#x27;</span>,</span><br><span class="line"><span class="attr">path</span>:<span class="string">&#x27;detail/:id/:title/:content&#x27;</span>,</span><br><span class="line"><span class="attr">component</span>:<span class="title class_">Detail</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// props的对象写法，作用：把对象中的每一组key-value作为props传给Detail组件</span></span><br><span class="line">  <span class="comment">// props:&#123;a:1,b:2,c:3&#125;, </span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// props的布尔值写法，作用：把收到了每一组params参数，作为props传给Detail组件</span></span><br><span class="line">  <span class="comment">// props:true</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// props的函数写法，作用：把返回的对象中每一组key-value作为props传给Detail组件</span></span><br><span class="line">  <span class="title function_">props</span>(<span class="params">route</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> route.<span class="property">query</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-10-【-replace属性】">4.10. 【 replace属性】</h2><ol><li><p>作用：控制路由跳转时操作浏览器历史记录的模式。</p></li><li><p>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>：</p><ul><li><code>push</code>是追加历史记录（默认值）。</li><li><code>replace</code>是替换当前记录。</li></ul></li><li><p>开启<code>replace</code>模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;RouterLink replace .......&gt;News&lt;/RouterLink&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-11-【编程式导航】">4.11. 【编程式导航】</h2><p>路由组件的两个重要的属性：<code>$route</code>和<code>$router</code>变成了两个<code>hooks</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> route = <span class="title function_">useRoute</span>()</span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">useRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">parmas</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(router.<span class="property">push</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(router.<span class="property">replace</span>)</span><br></pre></td></tr></table></figure><h2 id="4-12-【重定向】">4.12. 【重定向】</h2><ol><li><p>作用：将特定的路径，重新定向到已有路由。</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="attr">redirect</span>:<span class="string">&#x27;/about&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1>5. pinia</h1><h2 id="5-1【准备一个效果】">5.1【准备一个效果】</h2><img src="../../social/images/pinia_example.gif" alt="pinia_example" style="zoom:30%;border:3px solid" /> <h2 id="5-2【搭建-pinia-环境】">5.2【搭建 pinia 环境】</h2><p>第一步：<code>npm install pinia</code></p><p>第二步：操作<code>src/main.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 引入createPinia，用于创建pinia */</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 创建pinia */</span></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用插件 */</span>&#123;&#125;</span><br><span class="line">app.<span class="title function_">use</span>(pinia)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><p>此时开发者工具中已经有了<code>pinia</code>选项</p><img src="https://cdn.nlark.com/yuque/0/2023/png/35780599/1684309952481-c67f67f9-d1a3-4d69-8bd6-2b381e003f31.png" style="zoom:80%;border:1px solid black;border-radius:10px" /><h2 id="5-3【存储-读取数据】">5.3【存储+读取数据】</h2><ol><li><p><code>Store</code>是一个保存：<strong>状态</strong>、<strong>业务逻辑</strong> 的实体，每个组件都可以<strong>读取</strong>、<strong>写入</strong>它。</p></li><li><p>它有三个概念：<code>state</code>、<code>getter</code>、<code>action</code>，相当于组件中的： <code>data</code>、 <code>computed</code> 和 <code>methods</code>。</p></li><li><p>具体编码：<code>src/store/count.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sum</span>:<span class="number">6</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>具体编码：<code>src/store/talk.ts</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;talk&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;&#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">talkList</span>:[</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada01&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;你今天有点怪，哪里怪？怪好看的！&#x27;</span>&#125;,</span><br><span class="line">     &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada02&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;草莓、蓝莓、蔓越莓，你想我了没？&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="attr">id</span>:<span class="string">&#x27;yuysada03&#x27;</span>,<span class="attr">content</span>:<span class="string">&#x27;心里给你留了一块地，我的死心塌地&#x27;</span>&#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中使用<code>state</code>中的数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;h2&gt;当前求和为：&#123;&#123; sumStore.sum &#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  // 引入对应的useXxxxxStore</span><br><span class="line">  import &#123;useSumStore&#125; from &#x27;@/store/sum&#x27;</span><br><span class="line">  </span><br><span class="line">  // 调用useXxxxxStore得到对应的store</span><br><span class="line">  const sumStore = useSumStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;talk in talkStore.talkList&quot; :key=&quot;talk.id&quot;&gt;</span><br><span class="line">      &#123;&#123; talk.content &#125;&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  import axios from &#x27;axios&#x27;</span><br><span class="line">  import &#123;useTalkStore&#125; from &#x27;@/store/talk&#x27;</span><br><span class="line"></span><br><span class="line">  const talkStore = useTalkStore()</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-4-【修改数据】-三种方式">5.4.【修改数据】(三种方式)</h2><ol><li><p>第一种修改方式，直接修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">countStore.<span class="property">sum</span> = <span class="number">666</span></span><br></pre></td></tr></table></figure></li><li><p>第二种修改方式：批量修改</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">countStore.$patch(&#123;</span><br><span class="line">  <span class="attr">sum</span>:<span class="number">999</span>,</span><br><span class="line">  <span class="attr">school</span>:<span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>第三种修改方式：借助<code>action</code>修改（<code>action</code>中可以编写一些业务逻辑）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">/*************/</span></span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">//加</span></span><br><span class="line">    <span class="title function_">increment</span>(<span class="params">value:number</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">sum</span> &lt; <span class="number">10</span>) &#123;</span><br><span class="line">        <span class="comment">//操作countStore中的sum</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sum</span> += value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//减</span></span><br><span class="line">    <span class="title function_">decrement</span>(<span class="params">value:number</span>)&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">sum</span> &gt; <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">sum</span> -= value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">/*************/</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中调用<code>action</code>即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用countStore</span></span><br><span class="line"><span class="keyword">const</span> countStore = <span class="title function_">useCountStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用对应action</span></span><br><span class="line">countStore.<span class="title function_">incrementOdd</span>(n.<span class="property">value</span>)</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-5-【storeToRefs】">5.5.【storeToRefs】</h2><ul><li>借助<code>storeToRefs</code>将<code>store</code>中的数据转为<code>ref</code>对象，方便在模板中使用。</li><li>注意：<code>pinia</code>提供的<code>storeToRefs</code>只会将数据做转换，而<code>Vue</code>的<code>toRefs</code>会转换<code>store</code>中数据。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;count&quot;&gt;</span><br><span class="line">&lt;h2&gt;当前求和为：&#123;&#123;sum&#125;&#125;&lt;/h2&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Count&quot;&gt;</span><br><span class="line">  import &#123; useCountStore &#125; from &#x27;@/store/count&#x27;</span><br><span class="line">  /* 引入storeToRefs */</span><br><span class="line">  import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class="line"></span><br><span class="line">/* 得到countStore */</span><br><span class="line">  const countStore = useCountStore()</span><br><span class="line">  /* 使用storeToRefs转换countStore，随后解构 */</span><br><span class="line">  const &#123;sum&#125; = storeToRefs(countStore)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-6-【getters】">5.6.【getters】</h2><ol><li><p>概念：当<code>state</code>中的数据，需要经过处理后再使用时，可以使用<code>getters</code>配置。</p></li><li><p>追加<code>getters</code>配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入defineStore用于创建store</span></span><br><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义并暴露一个store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCountStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;count&#x27;</span>,&#123;</span><br><span class="line">  <span class="comment">// 动作</span></span><br><span class="line">  <span class="attr">actions</span>:&#123;</span><br><span class="line">    <span class="comment">/************/</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 状态</span></span><br><span class="line">  <span class="title function_">state</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">sum</span>:<span class="number">1</span>,</span><br><span class="line">      <span class="attr">school</span>:<span class="string">&#x27;atguigu&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 计算</span></span><br><span class="line">  <span class="attr">getters</span>:&#123;</span><br><span class="line">    <span class="attr">bigSum</span>:(state):<span class="function"><span class="params">number</span> =&gt;</span> state.<span class="property">sum</span> *<span class="number">10</span>,</span><br><span class="line">    <span class="title function_">upperSchool</span>():string&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>. school.<span class="title function_">toUpperCase</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;increment,decrement&#125; = countStore</span><br><span class="line"><span class="keyword">let</span> &#123;sum,school,bigSum,upperSchool&#125; = <span class="title function_">storeToRefs</span>(countStore)</span><br></pre></td></tr></table></figure></li></ol><h2 id="5-7-【-subscribe】">5.7.【$subscribe】</h2><p>通过 store 的 <code>$subscribe()</code> 方法侦听 <code>state</code> 及其变化</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">talkStore.$subscribe(<span class="function">(<span class="params">mutate,state</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;LoveTalk&#x27;</span>,mutate,state)</span><br><span class="line">  <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;talk&#x27;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(talkList.<span class="property">value</span>))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-8-【store组合式写法】">5.8. 【store组合式写法】</h2><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore&#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;nanoid&#125; <span class="keyword">from</span> <span class="string">&#x27;nanoid&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;reactive&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useTalkStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;talk&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// talkList就是state</span></span><br><span class="line">  <span class="keyword">const</span> talkList = <span class="title function_">reactive</span>(</span><br><span class="line">    <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;talkList&#x27;</span>) <span class="keyword">as</span> <span class="built_in">string</span>) || []</span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getATalk函数相当于action</span></span><br><span class="line">  <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getATalk</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 发请求，下面这行的写法是：连续解构赋值+重命名</span></span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="attr">data</span>:&#123;<span class="attr">content</span>:title&#125;&#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;https://api.uomg.com/api/rand.qinghua?format=json&#x27;</span>)</span><br><span class="line">    <span class="comment">// 把请求回来的字符串，包装成一个对象</span></span><br><span class="line">    <span class="keyword">let</span> obj = &#123;<span class="attr">id</span>:<span class="title function_">nanoid</span>(),title&#125;</span><br><span class="line">    <span class="comment">// 放到数组中</span></span><br><span class="line">    talkList.<span class="title function_">unshift</span>(obj)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;talkList,getATalk&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1>6. 组件通信</h1><p><strong><code>Vue3</code>组件通信和<code>Vue2</code>的区别：</strong></p><ul><li>移出事件总线，使用<code>mitt</code>代替。</li></ul><ul><li><code>vuex</code>换成了<code>pinia</code>。</li><li>把<code>.sync</code>优化到了<code>v-model</code>里面了。</li><li>把<code>$listeners</code>所有的东西，合并到<code>$attrs</code>中了。</li><li><code>$children</code>被砍掉了。</li></ul><p><strong>常见搭配形式：</strong></p><img src="../../social/images/image-20231119185900990.png" alt="image-20231119185900990" style="zoom:60%;" /> <h2 id="6-1-【props】">6.1. 【props】</h2><p>概述：<code>props</code>是使用频率最高的一种通信方式，常用与 ：<strong>父 ↔ 子</strong>。</p><ul><li>若 <strong>父传子</strong>：属性值是<strong>非函数</strong>。</li><li>若 <strong>子传父</strong>：属性值是<strong>函数</strong>。</li></ul><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件，&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;儿子给的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;Child :car=&quot;car&quot; :getToy=&quot;getToy&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">// 数据</span><br><span class="line">const car = ref(&#x27;奔驰&#x27;)</span><br><span class="line">const toy = ref()</span><br><span class="line">// 方法</span><br><span class="line">function getToy(value:string)&#123;</span><br><span class="line">toy.value = value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;child&quot;&gt;</span><br><span class="line">    &lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;我的玩具：&#123;&#123; toy &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;父给我的车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;button @click=&quot;getToy(toy)&quot;&gt;玩具给父亲&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">const toy = ref(&#x27;奥特曼&#x27;)</span><br><span class="line"></span><br><span class="line">defineProps([&#x27;car&#x27;,&#x27;getToy&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-2-【自定义事件】">6.2. 【自定义事件】</h2><ol><li>概述：自定义事件常用于：<strong>子 =&gt; 父。</strong></li><li>注意区分好：原生事件、自定义事件。</li></ol><ul><li>原生事件：<ul><li>事件名是特定的（<code>click</code>、<code>mosueenter</code>等等）</li><li>事件对象<code>$event</code>: 是包含事件相关信息的对象（<code>pageX</code>、<code>pageY</code>、<code>target</code>、<code>keyCode</code>）</li></ul></li><li>自定义事件：<ul><li>事件名是任意名称</li><li><strong style="color:red">事件对象<code>$event</code>: 是调用<code>emit</code>时所提供的数据，可以是任意类型！！！</strong ></li></ul></li></ul><ol start="3"><li><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--在父组件中，给子组件绑定自定义事件：--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Child</span> @<span class="attr">send-toy</span>=<span class="string">&quot;toy = $event&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注意区分原生事件与自定义事件中的$event--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;toy = $event&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件中，触发事件：</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;send-toy&#x27;</span>, 具体数据)</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-3-【mitt】">6.3. 【mitt】</h2><p>概述：与消息订阅与发布（<code>pubsub</code>）功能类似，可以实现任意组件间通信。</p><p>安装<code>mitt</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i mitt</span><br></pre></td></tr></table></figure><p>新建文件：<code>src\utils\emitter.ts</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入mitt </span></span><br><span class="line"><span class="keyword">import</span> mitt <span class="keyword">from</span> <span class="string">&quot;mitt&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建emitter</span></span><br><span class="line"><span class="keyword">const</span> emitter = <span class="title function_">mitt</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  // 绑定事件</span></span><br><span class="line"><span class="comment">  emitter.on(&#x27;abc&#x27;,(value)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    console.log(&#x27;abc事件被触发&#x27;,value)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment">  emitter.on(&#x27;xyz&#x27;,(value)=&gt;&#123;</span></span><br><span class="line"><span class="comment">    console.log(&#x27;xyz事件被触发&#x27;,value)</span></span><br><span class="line"><span class="comment">  &#125;)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  setInterval(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">    // 触发事件</span></span><br><span class="line"><span class="comment">    emitter.emit(&#x27;abc&#x27;,666)</span></span><br><span class="line"><span class="comment">    emitter.emit(&#x27;xyz&#x27;,777)</span></span><br><span class="line"><span class="comment">  &#125;, 1000);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">  setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">    // 清理事件</span></span><br><span class="line"><span class="comment">    emitter.all.clear()</span></span><br><span class="line"><span class="comment">  &#125;, 3000); </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建并暴露mitt</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> emitter</span><br></pre></td></tr></table></figure><p>接收数据的组件中：绑定事件、同时在销毁前解绑事件：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;@/utils/emitter&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; onUnmounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line">emitter.<span class="title function_">on</span>(<span class="string">&#x27;send-toy&#x27;</span>,<span class="function">(<span class="params">value</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;send-toy事件被触发&#x27;</span>,value)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">onUnmounted</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 解绑事件</span></span><br><span class="line">  emitter.<span class="title function_">off</span>(<span class="string">&#x27;send-toy&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>【第三步】：提供数据的组件，在合适的时候触发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> emitter <span class="keyword">from</span> <span class="string">&quot;@/utils/emitter&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendToy</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="comment">// 触发事件</span></span><br><span class="line">  emitter.<span class="title function_">emit</span>(<span class="string">&#x27;send-toy&#x27;</span>,toy.<span class="property">value</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意这个重要的内置关系，总线依赖着这个内置关系</strong></p><h2 id="6-4-【v-model】">6.4.【v-model】</h2><ol><li><p>概述：实现 <strong>父↔子</strong> 之间相互通信。</p></li><li><p>前序知识 —— <code>v-model</code>的本质</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 使用v-model指令 --&gt;</span><br><span class="line">&lt;input type=&quot;text&quot; v-model=&quot;userName&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- v-model的本质是下面这行代码 --&gt;</span><br><span class="line">&lt;input </span><br><span class="line">  type=&quot;text&quot; </span><br><span class="line">  :value=&quot;userName&quot; </span><br><span class="line">  @input=&quot;userName =(&lt;HTMLInputElement&gt;$event.target).value&quot;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p>组件标签上的<code>v-model</code>的本质：<code>:moldeValue</code> ＋ <code>update:modelValue</code>事件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组件标签上使用v-model指令 --&gt;</span><br><span class="line">&lt;AtguiguInput v-model=&quot;userName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 组件标签上v-model的本质 --&gt;</span><br><span class="line">&lt;AtguiguInput :modelValue=&quot;userName&quot; @update:model-value=&quot;userName = $event&quot;/&gt;</span><br></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;!--将接收的value值赋给input元素的value属性，目的是：为了呈现数据 --&gt;</span><br><span class="line">&lt;!--给input元素绑定原生input事件，触发input事件时，进而触发update:model-value事件--&gt;</span><br><span class="line">    &lt;input </span><br><span class="line">       type=&quot;text&quot; </span><br><span class="line">       :value=&quot;modelValue&quot; </span><br><span class="line">       @input=&quot;emit(&#x27;update:model-value&#x27;,$event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;</span><br><span class="line">  // 接收props</span><br><span class="line">  defineProps([&#x27;modelValue&#x27;])</span><br><span class="line">  // 声明事件</span><br><span class="line">  const emit = defineEmits([&#x27;update:model-value&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>也可以更换<code>value</code>，例如改成<code>abc</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 也可以更换value，例如改成abc--&gt;</span><br><span class="line">&lt;AtguiguInput v-model:abc=&quot;userName&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 上面代码的本质如下 --&gt;</span><br><span class="line">&lt;AtguiguInput :abc=&quot;userName&quot; @update:abc=&quot;userName = $event&quot;/&gt;</span><br></pre></td></tr></table></figure><p><code>AtguiguInput</code>组件中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">    &lt;input </span><br><span class="line">       type=&quot;text&quot; </span><br><span class="line">       :value=&quot;abc&quot; </span><br><span class="line">       @input=&quot;emit(&#x27;update:abc&#x27;,$event.target.value)&quot;</span><br><span class="line">    &gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;AtguiguInput&quot;&gt;</span><br><span class="line">  // 接收props</span><br><span class="line">  defineProps([&#x27;abc&#x27;])</span><br><span class="line">  // 声明事件</span><br><span class="line">  const emit = defineEmits([&#x27;update:abc&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li><li><p>如果<code>value</code>可以更换，那么就可以在组件标签上多次使用<code>v-model</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;AtguiguInput v-model:abc=&quot;userName&quot; v-model:xyz=&quot;password&quot;/&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-5-【-attrs-】">6.5.【$attrs 】</h2><ol><li><p>概述：<code>$attrs</code>用于实现<strong>当前组件的父组件</strong>，向<strong>当前组件的子组件</strong>通信（<strong>祖→孙</strong>）。</p></li><li><p>具体说明：<code>$attrs</code>是一个对象，包含所有父组件传入的标签属性。</p><blockquote><p>注意：<code>$attrs</code>会自动排除<code>props</code>中声明的属性(可以认为声明过的 <code>props</code> 被子组件自己“消费”了)</p></blockquote></li></ol><p>父组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件&lt;/h3&gt;</span><br><span class="line">&lt;Child :a=&quot;a&quot; :b=&quot;b&quot; :c=&quot;c&quot; :d=&quot;d&quot; v-bind=&quot;&#123;x:100,y:200&#125;&quot; :updateA=&quot;updateA&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">import &#123; ref &#125; from &quot;vue&quot;;</span><br><span class="line">let a = ref(1)</span><br><span class="line">let b = ref(2)</span><br><span class="line">let c = ref(3)</span><br><span class="line">let d = ref(4)</span><br><span class="line"></span><br><span class="line">function updateA(value)&#123;</span><br><span class="line">a.value = value</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;child&quot;&gt;</span><br><span class="line">&lt;h3&gt;子组件&lt;/h3&gt;</span><br><span class="line">&lt;GrandChild v-bind=&quot;$attrs&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Child&quot;&gt;</span><br><span class="line">import GrandChild from &#x27;./GrandChild.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>孙组件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class=&quot;grand-child&quot;&gt;</span><br><span class="line">&lt;h3&gt;孙组件&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;a：&#123;&#123; a &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;b：&#123;&#123; b &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;c：&#123;&#123; c &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;d：&#123;&#123; d &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;x：&#123;&#123; x &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;h4&gt;y：&#123;&#123; y &#125;&#125;&lt;/h4&gt;</span><br><span class="line">&lt;button @click=&quot;updateA(666)&quot;&gt;点我更新A&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;</span><br><span class="line">defineProps([&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;,&#x27;d&#x27;,&#x27;x&#x27;,&#x27;y&#x27;,&#x27;updateA&#x27;])</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="6-6-【-refs、-parent】">6.6. 【$refs、$parent】</h2><ol><li><p>概述：</p><ul><li><code>$refs</code>用于 ：<strong>父→子。</strong></li><li><code>$parent</code>用于：<strong>子→父。</strong></li></ul></li><li><p>原理如下：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td><code>$refs</code></td><td>值为对象，包含所有被<code>ref</code>属性标识的<code>DOM</code>元素或组件实例。</td></tr><tr><td><code>$parent</code></td><td>值为对象，当前组件的父组件实例对象。</td></tr></tbody></table></li></ol><h2 id="6-7-【provide、inject】">6.7. 【provide、inject】</h2><ol><li><p>概述：实现<strong>祖孙组件</strong>直接通信</p></li><li><p>具体使用：</p><ul><li>在祖先组件中通过<code>provide</code>配置向后代组件提供数据</li><li>在后代组件中通过<code>inject</code>配置来声明接收数据</li></ul></li><li><p>具体编码：</p><p>【第一步】父组件中，使用<code>provide</code>提供数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;father&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件&lt;/h3&gt;</span><br><span class="line">    &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">    &lt;button @click=&quot;money += 1&quot;&gt;资产+1&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;car.price += 1&quot;&gt;汽车价格+1&lt;/button&gt;</span><br><span class="line">    &lt;Child/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup lang=&quot;ts&quot; name=&quot;Father&quot;&gt;</span><br><span class="line">  import Child from &#x27;./Child.vue&#x27;</span><br><span class="line">  import &#123; ref,reactive,provide &#125; from &quot;vue&quot;;</span><br><span class="line">  // 数据</span><br><span class="line">  let money = ref(100)</span><br><span class="line">  let car = reactive(&#123;</span><br><span class="line">    brand:&#x27;奔驰&#x27;,</span><br><span class="line">    price:100</span><br><span class="line">  &#125;)</span><br><span class="line">  // 用于更新money的方法</span><br><span class="line">  function updateMoney(value:number)&#123;</span><br><span class="line">    money.value += value</span><br><span class="line">  &#125;</span><br><span class="line">  // 提供数据</span><br><span class="line">  provide(&#x27;moneyContext&#x27;,&#123;money,updateMoney&#125;)</span><br><span class="line">  provide(&#x27;car&#x27;,car)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><blockquote><p>注意：子组件中不用编写任何东西，是不受到任何打扰的</p></blockquote><p>【第二步】孙组件中使用<code>inject</code>配置项接受数据。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   &lt;template&gt;</span><br><span class="line">     &lt;div class=&quot;grand-child&quot;&gt;</span><br><span class="line">       &lt;h3&gt;我是孙组件&lt;/h3&gt;</span><br><span class="line">       &lt;h4&gt;资产：&#123;&#123; money &#125;&#125;&lt;/h4&gt;</span><br><span class="line">       &lt;h4&gt;汽车：&#123;&#123; car &#125;&#125;&lt;/h4&gt;</span><br><span class="line">       &lt;button @click=&quot;updateMoney(6)&quot;&gt;点我&lt;/button&gt;</span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &lt;/template&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;script setup lang=&quot;ts&quot; name=&quot;GrandChild&quot;&gt;</span><br><span class="line">     import &#123; inject &#125; from &#x27;vue&#x27;;</span><br><span class="line">     // 注入数据</span><br><span class="line">    let &#123;money,updateMoney&#125; = inject(&#x27;moneyContext&#x27;,&#123;money:0,updateMoney:(x:number)=&gt;&#123;&#125;&#125;)</span><br><span class="line">     let car = inject(&#x27;car&#x27;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="6-8-【pinia】">6.8. 【pinia】</h2><p>参考之前<code>pinia</code>部分的讲解</p><h2 id="6-9-【slot】">6.9. 【slot】</h2><h3 id="1-默认插槽">1. 默认插槽</h3><p><img src="http://49.232.112.44/images/default_slot.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category title=&quot;今日热门游戏&quot;&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">          &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;!-- 默认插槽 --&gt;</span><br><span class="line">            &lt;slot&gt;&lt;/slot&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="2-具名插槽">2. 具名插槽</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category title=&quot;今日热门游戏&quot;&gt;</span><br><span class="line">          &lt;template v-slot:s1&gt;</span><br><span class="line">            &lt;ul&gt;</span><br><span class="line">              &lt;li v-for=&quot;g in games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">            &lt;/ul&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template #s2&gt;</span><br><span class="line">            &lt;a href=&quot;&quot;&gt;更多&lt;/a&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">          &lt;div class=&quot;item&quot;&gt;</span><br><span class="line">            &lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;</span><br><span class="line">            &lt;slot name=&quot;s1&quot;&gt;&lt;/slot&gt;</span><br><span class="line">            &lt;slot name=&quot;s2&quot;&gt;&lt;/slot&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/template&gt;</span><br></pre></td></tr></table></figure><h3 id="3-作用域插槽">3. 作用域插槽</h3><ol><li><p>理解：<span style="color:red">数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。</span>（新闻数据在<code>News</code>组件中，但使用数据所遍历出来的结构由<code>App</code>组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">      &lt;Game v-slot=&quot;params&quot;&gt;</span><br><span class="line">      &lt;!-- &lt;Game v-slot:default=&quot;params&quot;&gt; --&gt;</span><br><span class="line">      &lt;!-- &lt;Game #default=&quot;params&quot;&gt; --&gt;</span><br><span class="line">        &lt;ul&gt;</span><br><span class="line">          &lt;li v-for=&quot;g in params.games&quot; :key=&quot;g.id&quot;&gt;&#123;&#123; g.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/Game&gt;</span><br><span class="line"></span><br><span class="line">子组件中：</span><br><span class="line">      &lt;template&gt;</span><br><span class="line">        &lt;div class=&quot;category&quot;&gt;</span><br><span class="line">          &lt;h2&gt;今日游戏榜单&lt;/h2&gt;</span><br><span class="line">          &lt;slot :games=&quot;games&quot; a=&quot;哈哈&quot;&gt;&lt;/slot&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line"></span><br><span class="line">      &lt;script setup lang=&quot;ts&quot; name=&quot;Category&quot;&gt;</span><br><span class="line">        import &#123;reactive&#125; from &#x27;vue&#x27;</span><br><span class="line">        let games = reactive([</span><br><span class="line">          &#123;id:&#x27;asgdytsa01&#x27;,name:&#x27;英雄联盟&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa02&#x27;,name:&#x27;王者荣耀&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa03&#x27;,name:&#x27;红色警戒&#x27;&#125;,</span><br><span class="line">          &#123;id:&#x27;asgdytsa04&#x27;,name:&#x27;斗罗大陆&#x27;&#125;</span><br><span class="line">        ])</span><br><span class="line">      &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h1>7. 其它 API</h1><h2 id="7-1-【shallowRef-与-shallowReactive-】">7.1.【shallowRef 与 shallowReactive 】</h2><h3 id="shallowRef"><code>shallowRef</code></h3><ol><li><p>作用：创建一个响应式数据，但只对顶层属性进行响应式处理。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myVar = <span class="title function_">shallowRef</span>(initialValue);</span><br></pre></td></tr></table></figure></li><li><p>特点：只跟踪引用值的变化，不关心值内部的属性变化。</p></li></ol><h3 id="shallowReactive"><code>shallowReactive</code></h3><ol><li><p>作用：创建一个浅层响应式对象，只会使对象的最顶层属性变成响应式的，对象内部的嵌套属性则不会变成响应式的</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> myObj = <span class="title function_">shallowReactive</span>(&#123; ... &#125;);</span><br></pre></td></tr></table></figure></li><li><p>特点：对象的顶层属性是响应式的，但嵌套对象的属性不是。</p></li></ol><h3 id="总结">总结</h3><blockquote><p>通过使用 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowref"><code>shallowRef()</code></a> 和 <a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive"><code>shallowReactive()</code></a> 来绕开深度响应。浅层式 <code>API</code> 创建的状态只在其顶层是响应式的，对所有深层的对象不会做任何处理，避免了对每一个内部属性做响应式所带来的性能成本，这使得属性的访问变得更快，可提升性能。</p></blockquote><h2 id="7-2-【readonly-与-shallowReadonly】">7.2.【readonly 与 shallowReadonly】</h2><h3 id="readonly"><strong><code>readonly</code></strong></h3><ol><li><p>作用：用于创建一个对象的深只读副本。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = <span class="title function_">reactive</span>(&#123; ... &#125;);</span><br><span class="line"><span class="keyword">const</span> readOnlyCopy = <span class="title function_">readonly</span>(original);</span><br></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li>对象的所有嵌套属性都将变为只读。</li><li>任何尝试修改这个对象的操作都会被阻止（在开发模式下，还会在控制台中发出警告）。</li></ul></li><li><p>应用场景：</p><ul><li>创建不可变的状态快照。</li><li>保护全局状态或配置不被修改。</li></ul></li></ol><h3 id="shallowReadonly"><strong><code>shallowReadonly</code></strong></h3><ol><li><p>作用：与 <code>readonly</code> 类似，但只作用于对象的顶层属性。</p></li><li><p>用法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> original = <span class="title function_">reactive</span>(&#123; ... &#125;);</span><br><span class="line"><span class="keyword">const</span> shallowReadOnlyCopy = <span class="title function_">shallowReadonly</span>(original);</span><br></pre></td></tr></table></figure></li><li><p>特点：</p><ul><li><p>只将对象的顶层属性设置为只读，对象内部的嵌套属性仍然是可变的。</p></li><li><p>适用于只需保护对象顶层属性的场景。</p></li></ul></li></ol><h2 id="7-3-【toRaw-与-markRaw】">7.3.【toRaw 与 markRaw】</h2><h3 id="toRaw"><code>toRaw</code></h3><ol><li><p>作用：用于获取一个响应式对象的原始对象， <code>toRaw</code> 返回的对象不再是响应式的，不会触发视图更新。</p><blockquote><p>官网描述：这是一个可以用于临时读取而不引起代理访问/跟踪开销，或是写入而不触发更改的特殊方法。不建议保存对原始对象的持久引用，请谨慎使用。</p></blockquote><blockquote><p>何时使用？ —— 在需要将响应式对象传递给非 <code>Vue</code> 的库或外部系统时，使用 <code>toRaw</code> 可以确保它们收到的是普通对象</p></blockquote></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; reactive,toRaw,markRaw,isReactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* toRaw */</span></span><br><span class="line"><span class="comment">// 响应式对象</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="title function_">reactive</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;tony&#x27;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;)</span><br><span class="line"><span class="comment">// 原始对象</span></span><br><span class="line"><span class="keyword">let</span> rawPerson = <span class="title function_">toRaw</span>(person)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* markRaw */</span></span><br><span class="line"><span class="keyword">let</span> citysd = <span class="title function_">markRaw</span>([</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda01&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;北京&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda02&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;上海&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda03&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;天津&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda04&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;重庆&#x27;</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span></span><br><span class="line"><span class="keyword">let</span> citys2 = <span class="title function_">reactive</span>(citys)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(person))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(rawPerson))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(citys))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isReactive</span>(citys2))</span><br></pre></td></tr></table></figure></li></ol><h3 id="markRaw"><code>markRaw</code></h3><ol><li><p>作用：标记一个对象，使其<strong>永远不会</strong>变成响应式的。</p><blockquote><p>例如使用<code>mockjs</code>时，为了防止误把<code>mockjs</code>变为响应式对象，可以使用 <code>markRaw</code> 去标记<code>mockjs</code></p></blockquote></li><li><p>编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* markRaw */</span></span><br><span class="line"><span class="keyword">let</span> citys = <span class="title function_">markRaw</span>([</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda01&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;北京&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda02&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;上海&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda03&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;天津&#x27;</span>&#125;,</span><br><span class="line">  &#123;<span class="attr">id</span>:<span class="string">&#x27;asdda04&#x27;</span>,<span class="attr">name</span>:<span class="string">&#x27;重庆&#x27;</span>&#125;</span><br><span class="line">])</span><br><span class="line"><span class="comment">// 根据原始对象citys去创建响应式对象citys2 —— 创建失败，因为citys被markRaw标记了</span></span><br><span class="line"><span class="keyword">let</span> citys2 = <span class="title function_">reactive</span>(citys)</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-4-【customRef】">7.4.【customRef】</h2><p>作用：创建一个自定义的<code>ref</code>，并对其依赖项跟踪和更新触发进行逻辑控制。</p><p>实现防抖效果（<code>useSumRef.ts</code>）：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;customRef &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params">initValue:<span class="built_in">string</span>,delay:<span class="built_in">number</span></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> msg = <span class="title function_">customRef</span>(<span class="function">(<span class="params">track,trigger</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">timer</span>:<span class="built_in">number</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="title function_">get</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">track</span>() <span class="comment">// 告诉Vue数据msg很重要，要对msg持续关注，一旦变化就更新</span></span><br><span class="line">        <span class="keyword">return</span> initValue</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="title function_">set</span>(<span class="params">value</span>)&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer)</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          initValue = value</span><br><span class="line">          <span class="title function_">trigger</span>() <span class="comment">//通知Vue数据msg变化了</span></span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;) </span><br><span class="line">  <span class="keyword">return</span> &#123;msg&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件中使用：</p><h1>8. Vue3新组件</h1><h2 id="8-1-【Teleport】">8.1. 【Teleport】</h2><ul><li>什么是Teleport？—— Teleport 是一种能够将我们的<strong>组件html结构</strong>移动到指定位置的技术。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">teleport</span> <span class="attr">to</span>=<span class="string">&#x27;body&#x27;</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;modal&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是一个弹窗<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是弹窗中的一些内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;isShow = false&quot;</span>&gt;</span>关闭弹窗<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">teleport</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="8-2-【Suspense】">8.2. 【Suspense】</h2><ul><li>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</li><li>使用步骤：<ul><li>异步引入组件</li><li>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></li></ul></li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineAsyncComponent,<span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Child</span> = <span class="title function_">defineAsyncComponent</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h3&gt;我是App组件&lt;/h3&gt;</span><br><span class="line">        &lt;Suspense&gt;</span><br><span class="line">          &lt;template v-slot:default&gt;</span><br><span class="line">            &lt;Child/&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">          &lt;template v-slot:fallback&gt;</span><br><span class="line">            &lt;h3&gt;加载中.......&lt;/h3&gt;</span><br><span class="line">          &lt;/template&gt;</span><br><span class="line">        &lt;/Suspense&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="8-3-【全局API转移到应用对象】">8.3.【全局API转移到应用对象】</h2><ul><li><code>app.component</code></li><li><code>app.config</code></li><li><code>app.directive</code></li><li><code>app.mount</code></li><li><code>app.unmount</code></li><li><code>app.use</code></li></ul><h2 id="8-4-【其他】">8.4.【其他】</h2><ul><li><p>过渡类名 <code>v-enter</code> 修改为 <code>v-enter-from</code>、过渡类名 <code>v-leave</code> 修改为 <code>v-leave-from</code>。</p></li><li><p><code>keyCode</code> 作为 <code>v-on</code> 修饰符的支持。</p></li><li><p><code>v-model</code> 指令在组件上的使用已经被重新设计，替换掉了 <code>v-bind.sync。</code></p></li><li><p><code>v-if</code> 和 <code>v-for</code> 在同一个元素身上使用时的优先级发生了变化。</p></li><li><p>移除了<code>$on</code>、<code>$off</code> 和 <code>$once</code> 实例方法。</p></li><li><p>移除了过滤器 <code>filter</code>。</p></li><li><p>移除了<code>$children</code> 实例 <code>propert</code>。</p><p>…</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nodejs基础教程</title>
      <link href="/posts/302.html"/>
      <url>/posts/302.html</url>
      
        <content type="html"><![CDATA[<h1>Nodejs</h1><h2 id="介绍">介绍</h2><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境，是一个应用程序。</p><p>官方网址 <a href="https://nodejs.org/en/">https://nodejs.org/en/</a>，中文站 <a href="http://nodejs.cn/">http://nodejs.cn/</a></p><h2 id="作用">作用</h2><ul><li>解析运行 JS 代码</li><li>操作系统资源，如内存、硬盘、网络</li></ul><h2 id="应用场景">应用场景</h2><ul><li>APP 接口服务</li><li>网页聊天室</li><li>动态网站, 个人博客, 论坛, 商城等</li><li>后端的Web服务，例如服务器端的请求（爬虫），代理请求（跨域）</li><li>前端项目打包(webpack, gulp)</li></ul><h2 id="使用">使用</h2><h3 id="下载安装">下载安装</h3><p>工具一定要到官方下载，历史版本下载 <a href="https://npm.taobao.org/mirrors/node/">https://npm.taobao.org/mirrors/node/</a></p><p>![img](file://D:/project/git/h5200622-code/day09/%E8%AF%BE%E5%A0%82/1-NodeJS/%E8%AF%BE%E4%BB%B6/nodejs/assets/20190329115938531.png?lastModify=1599473396)</p><p>Nodejs 的版本号奇数为开发版本，偶数为发布版本，<span style="color:red">我们选择偶数号的 LTS 版本（长期维护版本 long term service）</span></p><p>![1572676490692](file://D:/project/git/h5200622-code/day09/%E8%AF%BE%E5%A0%82/1-NodeJS/%E8%AF%BE%E4%BB%B6/nodejs/assets/1572676490692.png?lastModify=1599473415)</p><p>双击打开安装文件，一路下一步即可😎，默认的安装路径是 <code>C:\Program Files\nodejs</code></p><p>安装完成后，在 CMD 命令行窗口下运行 <code>node -v</code>，如显示版本号则证明安装成功，反之安装失败，重新安装。</p><p>![1572678177784](file://D:/project/git/h5200622-code/day09/%E8%AF%BE%E5%A0%82/1-NodeJS/%E8%AF%BE%E4%BB%B6/nodejs/assets/1572678177784.png?lastModify=1599473424)</p><h3 id="初体验">初体验</h3><h4 id="交互模式">交互模式</h4><p>在命令行下输入命令 <code>node</code>，这时进入 nodejs 的交互模式</p><p>![1572678681282](file://D:/project/git/h5200622-code/day09/%E8%AF%BE%E5%A0%82/1-NodeJS/%E8%AF%BE%E4%BB%B6/nodejs/assets/1572678681282.png?lastModify=1599473439)</p><h4 id="文件执行">文件执行</h4><p>创建文件 hello.js ，并写入代码 console.log(‘hello world’)，命令行运行 <code>node hello.js</code></p><p>快速启动命令行的方法</p><ul><li>在文件夹上方的路径中，直接输入 cmd 即可</li><li>使用 webstorm 和 vscode 自带的命令行窗口</li></ul><p>![1572680753835](file://D:/project/git/h5200622-code/day09/%E8%AF%BE%E5%A0%82/1-NodeJS/%E8%AF%BE%E4%BB%B6/nodejs/assets/1572680753835.png?lastModify=1599473449)</p><h4 id="VScode-插件运行">VScode 插件运行</h4><p>安装插件 『code Runner』, 文件右键 -&gt; run code</p><p>![1593782861500](file://D:/project/git/h5200622-code/day09/%E8%AF%BE%E5%A0%82/1-NodeJS/%E8%AF%BE%E4%BB%B6/nodejs/assets/1593782861500.png?lastModify=1599473460)</p><h4 id="注意">注意</h4><p><span style="color:red">在 nodejs 环境下，不能使用 BOM 和 DOM ，也没有全局对象 window和docu，全局对象的名字叫 global</span></p><h3 id="Buffer-缓冲器">Buffer(缓冲器)</h3><h4 id="介绍-2">介绍</h4><p>Buffer 是一个和数组类似的对象，不同是 Buffer 是专门用来保存二进制数据的</p><h4 id="特点">特点</h4><ul><li>大小固定：在创建时就确定了，且无法调整</li><li>性能较好：直接对计算机的内存进行操作</li><li>每个元素大小为 1 字节（byte）</li></ul><h4 id="操作">操作</h4><h5 id="创建-Buffer">创建 Buffer</h5><ul><li>直接创建 Buffer.alloc</li><li>不安全创建 Buffer.allocUnsafe</li><li>通过数组和字符串创建 Buffer.from</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个长度为10字节的Buffer</span></span><br><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> buf2 = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> buf3 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;iloveyou&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="Buffer-读取和写入">Buffer 读取和写入</h5><p>可以直接通过 <code>[]</code> 的方式对数据进行处理，可以使用 toString 方法将 Buffer 输出为字符串</p><ul><li>==[ ]== 对 buffer 进行读取和设置</li><li>==toString== 将 Buffer 转化为字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Buffer内容的读取和设置</span></span><br><span class="line"><span class="keyword">let</span> res = buf3[<span class="number">1</span>]; <span class="comment">// 结果为10进制的数字</span></span><br><span class="line"><span class="comment">// 获取字符串形式</span></span><br><span class="line"><span class="keyword">let</span> res2 = buf3.<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置内容</span></span><br><span class="line">buf3[<span class="number">0</span>] = <span class="number">120</span>;</span><br></pre></td></tr></table></figure><h5 id="关于溢出">关于溢出</h5><p>溢出的高位数据会舍弃</p><h5 id="关于中文">关于中文</h5><p>一个 UTF-8 的中文字符==大多数情况都是占 3 个字节==</p><h5 id="关于单位换算">关于单位换算</h5><p>1Bit 对应的是 1 个二进制位</p><p>8 Bit = 1 字节（Byte）</p><p>1024Byte = 1KB</p><p>1024KB = 1MB</p><p>1024MB = 1GB</p><p>1024GB = 1TB</p><p>平时所说的网速 10M 20M 100M 这里指的是 Bit ，所以理论下载速度 除以 8 才是正常的理解的下载速度</p><h3 id="文件系统-fs">文件系统 fs</h3><p>fs 全称为 file system，是 NodeJS 中的内置模块，可以对计算机中的文件进行增删改查等操作。</p><h5 id="文件写入">文件写入</h5><ul><li>简单写入<ul><li>==（引入模块）const fs = require(“fs”);==</li><li>fs.writeFile(filePath, data, [,options], callback);</li><li>fs.writeFileSync(file, data);</li><li>options 选项<ul><li><code>encoding</code> <strong>默认值:</strong> <code>'utf8'</code></li><li><code>mode</code><strong>默认值:</strong> <code>0o666</code></li><li><code>flag</code> <strong>默认值:</strong> <code>'w'</code></li></ul></li></ul></li><li>流式写入<ul><li>fs.createWriteStream(path[, options])<ul><li>path</li><li>options<ul><li>==flags==   <strong>默认值:</strong> <code>'w'</code></li><li><code>encoding </code><strong>默认值:</strong> <code>'utf8'</code></li><li><code>mode</code>   <strong>默认值:</strong> <code>0o666</code></li></ul></li><li>事件监听 open  close  eg:  ws.on(‘open’, function(){});</li></ul></li></ul></li></ul><h5 id="文件读取">文件读取</h5><ul><li><p>简单读取</p><ul><li>fs.readFile(file, function(err, data){})</li><li>fs.readFileSync(file)</li></ul></li><li><p>流式读取</p><ul><li>fs.createReadStream();</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 绑定事件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line"><span class="comment">// 绑定事件,data是确定好的，不能更改</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>,<span class="function">(<span class="params">chunk</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(chunk.<span class="title function_">toString</span>());</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 关于小文件的读取-------readFile</span></span><br><span class="line"><span class="comment">// 关于大文件的读取-------createReadStream</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复制文件</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&quot;index-副本.html&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种方法</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&quot;data&quot;</span>,<span class="function"><span class="params">chunk</span>=&gt;</span>&#123;</span><br><span class="line">    ws.<span class="title function_">write</span>(chunk);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第二种方法</span></span><br><span class="line">rs.<span class="title function_">pipe</span>(ws);</span><br></pre></td></tr></table></figure></li></ul><h5 id="文件删除">文件删除</h5><ul><li>fs.unlink(‘./test.log’, function(err){});</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs.unlink(路径,fun)</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">unlink</span>(<span class="string">&quot;bak.ini&quot;</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除文件&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>fs.unlinkSync(‘./move.txt’);</li></ul><h5 id="移动文件-重命名">移动文件 + 重命名</h5><ul><li>fs.rename(‘./1.log’, ‘2.log’, function(err){})</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs.rename(oldname,newname,fun);</span></span><br><span class="line"><span class="comment">// 改名命令只能执行一次，再次执行时会报错 （no such file or directory）</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&quot;index,html&quot;</span>,<span class="string">&quot;home.html&quot;</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;改名成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动文件</span></span><br><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&quot;index.html&quot;</span>,<span class="string">&quot;./file/home.html&quot;</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;移动成功&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>fs.renameSync(‘1.log’,‘2.log’)</li></ul><h5 id="文件夹操作">文件夹操作</h5><ul><li>mkdir  创建文件夹<ul><li>path</li><li>options<ul><li>recursive 是否递归调用</li><li>mode  权限 默认为 0o777</li></ul></li><li>callback</li></ul></li><li>rmdir 删除文件夹</li><li>readdir  读取文件夹</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// fs.mkdir(path,[,option],callback)</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">mkdir</span>(<span class="string">&quot;./project&quot;</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;创建文件夹成功&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除文件夹,如果文件夹非空，使用recursive来一步清空</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&quot;./project&quot;</span>,&#123;<span class="attr">recursive</span>:<span class="literal">true</span>&#125;,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">     <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;删除文件夹成功&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取文件夹</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&quot;d:/&quot;</span>,<span class="function">(<span class="params">err,files</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(files);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="关于路径">关于路径</h5><ul><li>相对路径<ul><li>./index.html</li><li>…/images/logo.png</li><li>index.html</li></ul></li><li>绝对路径<ul><li>D:/www/share/day10/index.html (windows)</li><li>/home/root/index.html</li></ul></li></ul><p>fs模块中，参数路径如果为<strong>相对路径</strong>的话，参照物是==执行命令时所在的工作目录==</p><p>__dirname 全局变量，始终保存的是==当前文件所在目录的绝对路径==</p><h5 id="查看文件的状态-fs-stat">查看文件的状态( fs.stat() )</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.<span class="title function_">stat</span>(__dirname+<span class="string">&quot;index.html&quot;</span>,<span class="function">(<span class="params">err,stats</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stats);</span><br><span class="line">   <span class="comment">// 检查目标资源是否为文件夹</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="title function_">isDirectory</span>());</span><br><span class="line">   <span class="comment">// 检查目标资源是否为文件</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(stats.<span class="title function_">isFile</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="附录">附录</h2><h3 id="unicode-字符集">unicode 字符集</h3><ul><li><p><a href="https://www.tamasoft.co.jp/en/general-info/unicode.html">https://www.tamasoft.co.jp/en/general-info/unicode.html</a></p></li><li><p><a href="https://www.cnblogs.com/whiteyun/archive/2010/07/06/1772218.html">https://www.cnblogs.com/whiteyun/archive/2010/07/06/1772218.html</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React全家桶</title>
      <link href="/posts/400.html"/>
      <url>/posts/400.html</url>
      
        <content type="html"><![CDATA[<h1>React全家桶(技术栈)</h1><p>英文官网:<a href="https://reactjs.org">https://reactjs.org</a></p><h3 id="一、简介">一、简介</h3><h4 id="1-介绍描述">1.介绍描述</h4><p>​    ① 用于动态构建用户界面的 JavaScript 库(只关注于视图)</p><p>​    ②由Facebook开源</p><h4 id="2-特点">2.特点</h4><ul><li>声明式编码</li><li>组件化编码</li><li>React Native 编写原生应用</li><li>高效（优秀的Diffing算法）</li></ul><h4 id="3-高效原因">3.高效原因</h4><p>使用虚拟(virtual)DOM, 不总是直接操作页面真实DOM</p><p>DOM Diffing算法, 最小化页面重绘</p><h3 id="二、基本使用">二、基本使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 准备好一个容器，用于让react渲染用 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react核心库 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入react-dom，用于支持react操作DOM --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/react-dom.development.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入babel，用于将jsx转为js --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../js/babel.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 下面一定要将javascript改为babel，含义是：让babel翻译script标签中的代码。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1.创建虚拟DOM</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello,React<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span> <span class="comment">//此处一定不要写引号，因为VDOM不是字符串！！！</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//2.利用ReactDOM.render(虚拟DOM,容器) 方法将虚拟DOM插入指定容器</span></span></span><br><span class="line"><span class="language-javascript"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="variable constant_">VDOM</span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-创建虚拟DOM的两种方式">1.创建虚拟DOM的两种方式</h4><p>==①==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Hello,React<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>②（不推荐）</p><p>-----------------------React.createElement(标签名,{标签属性},标签体内容)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">VDOM</span> = <span class="title class_">React</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;h1&#x27;</span>,&#123;<span class="attr">id</span>:<span class="string">&#x27;title&#x27;</span>&#125;,<span class="string">&#x27;Hello,React&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2-虚拟DOM与真实DOM">2.虚拟DOM与真实DOM</h4><ul><li>虚拟DOM的本质就是Object类型的一般对象。</li><li>虚拟DOM比较“轻”，真实DOM比较“重”，因为虚拟DOM是给react用的,无需那么多的属性。</li><li>我们编码时基本只需要操作react的虚拟DOM相关数据，虚拟DOM对象最终都会被React转换为真实的DOM。</li></ul><h4 id="span-style-color-red-3-jsx的语法规则-span"><span style='color:red'>3.jsx的语法规则</span></h4><ul><li><pre><code>    **&lt;span style='color:red'&gt;创建虚拟DOM时，不要用引号&lt;/span&gt;。**</code></pre></li><li><pre><code>   **标签中想混入js表达式，需要用&lt;span style='color:red'&gt; &#123;&#125;&lt;/span&gt;包裹。**</code></pre></li><li><pre><code>        **&lt;span style='color:red'&gt;根标签&lt;/span&gt;必须只有&lt;span style='color:red'&gt;一个&lt;/span&gt;**</code></pre></li><li><pre><code>        **标签必须&lt;span style='color:red'&gt;闭合&lt;/span&gt;**</code></pre></li><li><pre><code>        **&lt;span style='color:red'&gt;样式的类名&lt;/span&gt;，不要用class，必须用&lt;span style='color:red'&gt;className&lt;/span&gt;**</code></pre></li><li><pre><code>         **&lt;span style='color:red'&gt;内联的样式&lt;/span&gt;要用 &lt;span style='color:red'&gt;style=&#123;&#123;&#125;&#125;&lt;/span&gt;形式去写**</code></pre></li><li><pre><code>         **标签可以随意的编写：**</code></pre></li></ul><p>​                  <strong>(1).若标签首字母是【小写】的，则react会尝试将当前的jsx标签对应成一个html标签</strong></p><p>​                          <strong>若对应成了，直接渲染，展示。</strong></p><p>​                          <strong>若无法对应，直接报错！</strong></p><p>​                  <strong>(2).若标签首字母是【大写】的，则react会查找Haha组件的定义的位置</strong></p><p>​                          <strong>若找见了，直接渲染Haha组件</strong></p><p>​                          <strong>若未找见，报错(Haha is not defined)</strong></p><h4 id="4-区分js语句与js表达式">4.区分js语句与js表达式</h4><p>​       ①表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方下面这些都是表达式：<br>​(1). a<br>​(2). a+b<br>​(3). demo(1)<br>​(4). arr.map()<br>​(5). function test () {}<br>​        ②语句(代码)：下面这些都是语句(代码)：<br>​(1).if(){}<br>​(2).for(){}<br>​(3).switch(){case:xxxx}</p><h4 id="备注：">备注：</h4><p>==①数组（Array）.map( )方法==：</p><p>​                   用来生成 / 创建一个新数组。<br>​                           其结果是 该数组中的每个元素 调用一次提供的函数后的返回值。<br>​                           map 不修改原数组本身</p><p>​                   所以map方法必须有返回值，如果没有return，那么新数组的每一项都为undefined，数组的个数与原数组一样</p><p><span style='color:red; font-size:18px; font-weight:700'> ②react可以自动遍历数组，但是不可以遍历对象</span></p><h3 id="三、模块与组件、模块化与组件化">三、模块与组件、模块化与组件化</h3><h4 id="1-模块与模块化">1.模块与模块化</h4><ul><li><p>理解：向外提供特定功能的js程序, 一般就是一个js文件</p></li><li><p>为什么要拆成模块：随着业务逻辑增加，代码越来越多且复杂。</p></li><li><p>作用：复用js, 简化js的编写, 提高js运行效率</p><p>==当应用的js都以模块来编写的, 这个应用就是一个模块化的应用==</p></li></ul><h4 id="2-组件与组件化">2.组件与组件化</h4><ul><li><p>理解：用来实现局部功能效果的代码和资源的集合(html/css/js/image等等)</p></li><li><p>为什么要用组件： 一个界面的功能更复杂</p></li><li><p>作用：复用编码, 简化项目编码, 提高运行效率</p><p>==当应用是以多组件的方式实现, 这个应用就是一个组件化的应用==</p></li></ul><h4 id="3-组件">3.组件</h4><p><span style='color:red'><strong>①函数式组件</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt; </span><br><span class="line"><span class="comment">//1.定义组件(函数式组件)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>)&#123;<span class="comment">//函数式组件 函数名字开头大写</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//此处的this是undefined，因为经过babel的编译后，开启了严格模式。</span></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用函数定义的组件（适用于【简单组件】的定义）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.渲染组件到页面 </span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  执行了ReactDOM.render后，发生了什么？</span></span><br><span class="line"><span class="comment">  1.React发现了&lt;MyComponent/&gt;标签，去寻找MyComponent组件定义的位置，发现MyComponent是用函数定义的。</span></span><br><span class="line"><span class="comment">  2.React调用MyComponent并获取MyComponent返回的虚拟DOM，随后转为真实DOM，随后渲染到页面。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><span style='color:red'><strong>②类式组件</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt; </span><br><span class="line"><span class="comment">//定义组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyComponent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"><span class="comment">//render是放在哪里的？ —————— MyComponent的原型对象上，是给MyComponent的实例对象用的。</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>); <span class="comment">//MyComponent的实例对象 &lt;==&gt; MyComponent组件实例对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是用类定义的组件（适用于【复杂组件】的定义）<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渲染组件到页面</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  执行了ReactDOM.render后，发生了什么？</span></span><br><span class="line"><span class="comment">  1.React发现了&lt;MyComponent/&gt;标签，去寻找MyComponent组件定义的位置，发现MyComponent是用类定义的。</span></span><br><span class="line"><span class="comment">  2.React new了一个MyComponent实例对象--m</span></span><br><span class="line"><span class="comment">  3.通过m调用到了MyComponent原型上的render方法，并获取到了返回的虚拟DOM，随后转为真实DOM，放在页面。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4-组件实例的三大核心属性">4.组件实例的三大核心属性</h4><p>①state：</p><p>state是组件对象最重要的属性, 值是对象(可以包含多个key-value的组合)</p><p>state(状态机)通过更新组件的state来更新对应的页面显示(重新渲染组件)。</p><p>基本使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt; </span><br><span class="line"><span class="comment">//1.定义组件----类式组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"><span class="comment">//构造器调用几次？-------- 看你组件用几次</span></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line"><span class="variable language_">super</span>(props)</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">state</span> = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>,<span class="attr">wind</span>:<span class="string">&#x27;微风&#x27;</span>&#125; <span class="comment">//初始化状态,isHot用于标识天气热不热</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">changeWeather</span> = <span class="variable language_">this</span>.<span class="property">changeWeather</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>) <span class="comment">//解决this指向问题</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//changeWeather调用几次？-------- 看你点几次</span></span><br><span class="line"><span class="title function_">changeWeather</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//若构造器中不做处理，那么下面的this是undefined，因为changeWeather不是通过实例调用的，而是作为点击的回调去使用，且类中的方法自动开启了严格模式。</span></span><br><span class="line"><span class="comment">//console.log(&#x27;changeWeather的this是&#x27;,this); </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//严重注意：状态(state)中的值是不能直接修改的！！！！下面这一行就是直接修改</span></span><br><span class="line"><span class="comment">//this.state.isHot = true</span></span><br><span class="line">                    </span><br><span class="line"><span class="comment">//获取原来的state中的isHot值</span></span><br><span class="line"><span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="comment">//更新状态</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;) <span class="comment">//此处更新状态是一个合并的动作，不是替换</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//render调几次？--------- 1+n次（n是更新状态的次数）</span></span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">                    <span class="comment">//React中的绑定单击事件是onClick其中C大写</span></span><br><span class="line"><span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span>今天天气很&#123;this.state.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;this.state.wind&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.渲染组件</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>==简写模式==</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt; </span><br><span class="line"><span class="comment">//1.定义组件----类式组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Weather</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line">state = &#123;<span class="attr">isHot</span>:<span class="literal">true</span>,<span class="attr">wind</span>:<span class="string">&#x27;微风23&#x27;</span>&#125; <span class="comment">//初始化状态</span></span><br><span class="line"><span class="comment">//事件的回调都需要写成赋值语句+箭头函数的形式</span></span><br><span class="line">changeWeather = <span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;changeWeather&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123;isHot&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;<span class="attr">isHot</span>:!isHot&#125;)</span><br><span class="line">&#125;</span><br><span class="line">render ()&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">onClick</span>=<span class="string">&#123;this.changeWeather&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">今天天气很&#123;this.state.isHot ? &#x27;炎热&#x27; : &#x27;凉爽&#x27;&#125;，&#123;this.state.wind&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.渲染组件</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Weather</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h5 id="注意">注意:</h5><p>​                          <span style='color:red'> 组件中render方法中的this为组件实例对象</span></p><p>​                           <span style='color:red'>  组件自定义的方法中this为undefined，如何解决？</span><br>​                                     <span style='color:red'>a)强制绑定this: 通过函数对象的bind()</span><br>​                                     <span style='color:red'>b)箭头函数:通过箭头函数的this由外层作用域的this决定这一特性</span></p><p>​                             <span style='color:red'>状态数据，不能直接修改或更新 需要通过setState({})</span></p><p>②props：</p><p>​     每个组件对象都会有props(properties的简写)属性，值是对象(包括函数式组件)</p><p>​     组件标签的所有属性都保存在props中</p><p>​     ==通过标签属性从组件外向组件内传递变化的数据==</p><p>基本使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt; </span><br><span class="line"><span class="comment">//定义组件(类)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span><br><span class="line"><span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;name,age,sex&#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//渲染组件</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> <span class="attr">name</span>=<span class="string">&quot;tom&quot;</span> <span class="attr">sex</span>=<span class="string">&quot;女&quot;</span> <span class="attr">age</span>=<span class="string">&quot;18&quot;</span>/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>))</span><br><span class="line"><span class="keyword">const</span> p1 = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;程老师&#x27;</span>,</span><br><span class="line"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下面的...p1，并不是原生js里的&#123;...p1&#125;,babel+react环境就可以让展开运算符展开一个对象，但是仅仅适用于传递标签属性！！</span></span><br><span class="line"><span class="title class_">ReactDOM</span>.<span class="title function_">render</span>(<span class="language-xml"><span class="tag">&lt;<span class="name">Person</span> &#123;<span class="attr">...p1</span>&#125;/&gt;</span></span>,<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test2&#x27;</span>))</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>对props中的属性值进行类型限制和必要性限制:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入prop-types，用于制定对props限制的具体规则 </span></span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;../js/prop-types.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//定义组件(类)</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span>&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//对传给Person组件的props进行类型的限制</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">static</span> propTypes = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>, <span class="comment">//限制name必须为字符串类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,<span class="comment">//限制sex必须为字符串类型，且是必要属性</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age必须为数值类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">address</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>, <span class="comment">//限制address必须为字符串类型</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">//对传给Person组件的props进行默认值的设置</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">static</span> defaultProps = &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">address</span>:<span class="string">&#x27;中国&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>函数组件的props属性（了解）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/babel&quot;</span>&gt; </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">props</span>)&#123;</span><br><span class="line"><span class="keyword">const</span> &#123;name,age,sex,address&#125; = props</span><br><span class="line"><span class="comment">//对传给Person组件的props进行类型的限制</span></span><br><span class="line"><span class="keyword">return</span>(</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;name&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>性别：&#123;sex&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>年龄：&#123;age&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>地址：&#123;address&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line">)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>, <span class="comment">//限制name必须为字符串类型</span></span><br><span class="line"><span class="attr">sex</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>.<span class="property">isRequired</span>,<span class="comment">//限制sex必须为字符串类型，且是必要属性</span></span><br><span class="line"><span class="attr">age</span>:<span class="title class_">PropTypes</span>.<span class="property">number</span>,<span class="comment">//限制age必须为数值类型</span></span><br><span class="line"><span class="attr">address</span>:<span class="title class_">PropTypes</span>.<span class="property">string</span>, <span class="comment">//限制address必须为字符串类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对传给Person组件的props进行默认值的设置</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line"><span class="attr">address</span>:<span class="string">&#x27;中国&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="备注：-2">备注：</h4><p>​     ①script type=“text/babel” 经过==babel==编译的 开启严格模式 ==普通函数内部的this指向由window变为undefined==</p><p>​     ② ES6==类(class)==中所有方法自动开启了严格模式 ==普通函数内部的this指向由window变为undefined==</p><p>​     ③扩展运算符(…)无法展开一个对象，但可以通过 const newObject ={…object} 进行对象复制</p>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Promise基础教程</title>
      <link href="/posts/303.html"/>
      <url>/posts/303.html</url>
      
        <content type="html"><![CDATA[<h1>Promise</h1><h2 id="1-Promise的介绍">1. Promise的介绍</h2><ul><li><p>它是一门新的技术（ES6中引入），是JS中进行异步编程的新解决方法，解决了就方案中的回调地狱问题。</p></li><li><p>在promise的语法上来看，<strong>它是一个构造函数</strong>；promise对象用来封装一个异步操作并可以获取成功或失败的结果值。</p></li><li><p>状态改变上分为两种情况：且一个promise对象的状态只能改变一次</p><p>​pending ----&gt; resolved</p><p>​pending ----&gt; rejected</p></li><li><p>promise的基本流程：如下图所示</p><p><img src="C:%5CUsers%5CAdministrator%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200915182146260.png" alt="image-20200915182146260"></p></li></ul><h2 id="2-Promise的基本使用">2. Promise的基本使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建promise对象，刚创建的对象状态为pending，指定执行器函数</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 在执行器函数中启动异步任务</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;./index.html&quot;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 如果状态为失败，就调用reject()</span></span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">        <span class="comment">// 如果状态为成功，就调用resolve()</span></span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// promise对象的状态改变后，就调用then方法</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">&#125;,<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-Promise中的API">3. Promise中的API</h2><h3 id="1-实例对象的方法">1. 实例对象的方法</h3><ul><li><p>Promise构造函数，new Promise（excutor{ }），执行器函数（同步）</p></li><li><p>Promise.prototype.then(onResolved, onRejected) ------ 成功的回调函数，失败的回调函数（异步）</p></li><li><p>Promise.prototype.catch(onRejected），专门用来解决失败的回调函数（异步）</p><p>.then()方法中可以只传入成功的回调函数，失败的回调都交给catch来解决</p></li></ul><h3 id="2-函数对象的方法">2.   函数对象的方法</h3><ul><li>Promise.resolve() 接收一个参数，返回Promise对象<ol><li>如果传入的参数是非Promise类型的数据，那么返回的这个promise对象的状态是resolve，值就是传入的参数的值</li><li>如果传入的参数是一个Promise对象，那么传入的promise对象的状态就决定了返回的这个promise对象的状态，值就是里面的promise对象中的值</li><li>作用：快速对数据进行包裹，进行promise的转换，方便后面的操作。</li></ol></li><li>Promise.reject()接收一个参数，始终是返回一个失败的promise对象<br>1. 无论传入的参数是什么，结果都是一个失败状态的Promise对象，且失败的值就是传入的参数的值。</li><li>Promise.all()，接收的参数是一个数组，且每个值都是一个Promise对象，返回的结果也是一个promise对象<ol><li>如果数组中所有对象的状态都为成功，那么返回的promise对象的状态为成功，成功的值和数组中的顺序一一对应；如果有一个为失败，那么返回的promise对象的状态就为失败，且失败的值就是那么失败的对象的值，如果几个值都失败了，那么谁先失败谁就决定结果。</li></ol></li><li>Promise.race() 接收的参数是一个数组，且每个值都是一个Promise对象，返回的结果也是一个promise对象 ，结果由最先改变状态的那个promise决定。</li></ul><h2 id="4-async-await-（回调地狱的终极解决方案）">4. async / await （回调地狱的终极解决方案）</h2><p>async函数是Generator函数的语法糖。但是相比Generator而言，async不需要调用next方法才能执行，它自带执行器（await）。</p><ul><li><p>语义</p><p>async表示函数里有异步操作，await表示紧跟在后的表达式需要<strong>等待结果</strong></p></li><li><p>await的返回值</p><p>await后面，可以跟Promise对象（异步）或原始类型的值（Number，String，Boolean）（同步）; 如果它的返回值是Promise对象，就可以使用then指定下一步的操作；如果是非Promise对象，就返回相应的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="number">123</span>; <span class="comment">// 相当于return 123</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f</span>().<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span><span class="variable language_">console</span>.<span class="title function_">log</span>(v)); <span class="comment">// 123</span></span><br><span class="line"><span class="comment">//************************************</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果await后面的Promise是reject状态，整个async函数会中断执行。这时需要catch来接收reject的参数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;出错了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">f</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">v</span>)=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(v)&#125;)</span><br><span class="line">   .<span class="title function_">catch</span>(<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(e)&#125;) <span class="comment">//出错了</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ********************************************</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不希望第一异步操作失败去影响第二个异步操作，可以使用try...catch..来处理</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;出错了&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">await</span> <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;成功执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>().<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(v)&#125;) <span class="comment">// 成功执行了</span></span><br><span class="line">.<span class="title function_">catch</span>(<span class="function"><span class="params">e</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(e)&#125;);</span><br></pre></td></tr></table></figure></li><li><p>async函数内部如果有return的值，会成为then方法的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">f</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello async&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title function_">f</span>().<span class="title function_">then</span>(<span class="function"><span class="params">v</span>=&gt;</span>&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(v)&#125;); <span class="comment">// hello async</span></span><br></pre></td></tr></table></figure></li><li><p>async后面的Promise对象的状态变化</p><p>由于async函数返回的都是Promise对象，因此，必须等到async内部所有的await命令后面的Promise对象都执行完，才会发生状态变化；除非遇到return语句或者抛出错误。（也就是说，只有当async函数内部的异步操作都执行完，才会执行then方法的回调函数）。</p></li></ul><h2 id="5-promise中的几个关键问题">5. promise中的几个关键问题</h2><ol><li><p>如何改变promise的状态</p><ul><li>resolve 函数pending ----&gt; resolve</li><li>reject 函数       pending ----&gt; reject</li><li>抛出异常 throw   pending ----&gt; reject</li></ul><ol start="2"><li>一个promise指定多个回调函数（也就是调用多个then或catch方法），都会调用吗？</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功&quot;</span>)</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">alert</span>(value);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>只要promise的状态改变了，那么<strong>对应的回调都会运行</strong></li></ul><ol start="3"><li>改变promise的状态和指定回调函数那个先执行? (都有可能)</li></ol><p>这两个的执行顺序主要是由执行器函数内部封装的任务决定的，如果封装的是同步任务，那么promise对象的状态先改变，指定回调后执行；如果封装的是异步任务，那么情况就反过来了；</p><p>大多数情况下，都是指定回调在前（then调用），改变状态在后（resolve，reject）；</p><ol start="4"><li>promise.then()的返回的新promise对象的结果由什么决定？</li></ol><p>由then指定的回调函数执行的结果决定</p><ul><li>抛出异常，新promise的状态变为rejected，reason为抛出的异常</li><li>返回的是非promise的任意数据，新promise的状态变为resolved，value为返回的值</li><li>返回的是另一个新的promise，这个promise的状态就会成为then返回的那个promise对象的状态</li></ul><ol start="5"><li>使用then方法的链式调用来串联多个操作任务，当使用了then的链式调用，可以在最后再进行失败的回调，这时利用了promise的异常穿透原理；想要中断链式调用时，就在回调函数中返回一个pending状态的promise对象。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;Ok&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value,<span class="number">1111</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value,<span class="number">2222</span>);</span><br><span class="line">    <span class="comment">// 如果不想执行到3333，就返回一个pending状态的promise对象</span></span><br><span class="line">    <span class="comment">// return new Promise(()=&gt;&#123;&#125;);</span></span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">then</span>(<span class="function"><span class="params">value</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value,<span class="number">3333</span>);</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason,<span class="number">4444</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果为:</span></span><br><span class="line"><span class="comment"> ok 1111</span></span><br><span class="line"><span class="comment"> undefined 222   结果为undefined是因为前一个then没有返回值，默认为undefined</span></span><br><span class="line"><span class="comment"> undefined 333 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="6-JS异步之红队列和微队列">6. JS异步之红队列和微队列</h2><h3 id="1-原理图">1. 原理图</h3><p><img src="https://img-blog.csdnimg.cn/20191111155015676.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MDAxMzgxNw==,size_16,color_FFFFFF,t_70" alt="img"></p><h3 id="2-JS中用来存储待执行回调函数的队列包含2个：">2. JS中用来存储待执行回调函数的队列包含2个：</h3><p>宏队列：用来保存待执行的宏任务（回调）</p><pre><code>* 定时器的回调* DOM事件回调* AJAX回调</code></pre><p>微队列：用来保存待执行的微任务（回调）</p><ul><li>promise回调</li><li>MutationObserver回调</li></ul><p>JS的执行顺序：先执行同步任务，碰到异步任务就将其放入对应的异步任务队列中（宏队列&amp;微队列）；同步任务执行完成后，每次准备执行宏队列之前，先检查微队列中是否有任务在等待执行，有就先执行微队列的任务；最后再执行宏队列中的待执行任务。</p><h2 id="7-promise的相关题目">7. promise的相关题目</h2><ul><li><p>第一题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 3 2 4 1</span></span><br></pre></td></tr></table></figure></li><li><p>第二题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">  <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line"><span class="comment">// 2 5 3 4 1</span></span><br></pre></td></tr></table></figure></li><li><p>第三题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">first</span> = (<span class="params"></span>) =&gt; (<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">7</span>)</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="number">6</span>)</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">2</span>)</span><br><span class="line">    p.<span class="title function_">then</span>(<span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;))</span><br><span class="line"><span class="title function_">first</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>)</span><br><span class="line"><span class="comment">// 3 7 4 1 2 5</span></span><br></pre></td></tr></table></figure></li><li><p>第四题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">  &#125;, <span class="number">0</span>)</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;        </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3&quot;</span>)</span><br><span class="line">      <span class="title function_">resolve</span>()</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;      </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4&quot;</span>)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;       </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;  </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;6&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;7&quot;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;         </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;8&quot;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="comment">// 1 7 2 3 8 4 6 5 0</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Promise </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack配置教程</title>
      <link href="/posts/309.html"/>
      <url>/posts/309.html</url>
      
        <content type="html"><![CDATA[<h2 id="webpack快速入门教程">webpack快速入门教程</h2><h3 id="1、webpack-介绍">1、webpack 介绍</h3><ul><li>什么是webpack<a href="https://www.webpackjs.com/">https://www.webpackjs.com/</a><ul><li>Webpack是一个模块打包器(bundler)。</li><li>在Webpack看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理</li><li>它将根据模块的依赖关系进行静态分析，生成对应的静态资源</li></ul></li><li>五个核心概念<ul><li>Entry：入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始</li><li>Output：output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件</li><li>Loader：loader 让 webpack 能够去处理那些非 JavaScript 文件</li><li>Plugins：插件则可以用于执行范围更广的任务。例如：打包优化、压缩，</li><li>Mode：模式，有生产模式 production 和开发模式 development</li></ul></li><li>理解 Loader<ul><li>Webpack 本身只能加载 JS/JSON 模块，如果要加载其他类型的文件(模块)，就需要使用对应的loader 进行转换/加载</li><li>Loader 本身也是运行在 node.js 环境中的 JavaScript 模块</li><li>loader 一般以 xxx-loader 的方式命名，xxx 代表了这个 loader 要做的转换功能，比如 less-loader。</li></ul></li><li>理解 Plugins<ul><li>插件可以完成一些loader不能完成的功能。</li><li>插件的使用一般是在 webpack 的配置信息 plugins 选项中指定。</li></ul></li><li>配置文件(默认)<ul><li>webpack.config.js : 是一个node模块，返回一个 json 格式的配置信息对象</li></ul></li></ul><h3 id="2、webpack-安装">2、webpack 安装</h3><ul><li>npm 初始化</li><li>安装 webpack<ul><li>npm install webpack webpack-cli -g  //全局安装,作为指令使用</li><li>npm install webpack webpack-cli -D //本地安装,作为本地依赖使用</li></ul></li></ul><h3 id="3、编译打包应用">3、编译打包应用</h3><ul><li><p>创建js文件</p><ul><li>src/js/app.js</li><li>src/js/module1.js</li><li>src/js/module2.js</li><li>src/js/module3.js</li></ul></li><li><p>创建json文件</p><ul><li>src/json/data.json</li></ul></li><li><p>创建主页面:</p><ul><li>src/index.html</li></ul></li><li><p>运行指令</p><ul><li><p>开发配置指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src/js/app.js -o build/js/app.js --mode=development</span><br></pre></td></tr></table></figure><blockquote><p>webpack 能够编译打包 js 和 json 文件，并且能将 es6 的模块化语法转换成浏览器能识别的语法</p></blockquote></li><li><p>生产配置指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack src/js/app.js -o build/js/app.js --mode=production</span><br></pre></td></tr></table></figure><blockquote><p>production 配置能够压缩代码</p></blockquote></li></ul></li><li><p>结论：</p><ul><li>webpack能够编译打包 js 和 json 文件</li><li>能将 es6 的模块化语法进行代码打包</li><li>能压缩代码</li></ul></li><li><p>缺点：</p><ul><li>不能编译打包 css、img 等文件</li><li>不能将 js 的 es6 基本语法转化为 es5 语法</li><li>打包命令复杂</li></ul></li></ul><h3 id="4、使用-webpack-配置文件">4、使用 webpack 配置文件</h3><ul><li>目的：在项目根目录定义配置文件，通过自定义配置文件，还原以上功能</li><li>文件名称：webpack.config.js</li><li>文件内容：  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">   <span class="comment">//node内置核心模块，用来设置路径。</span></span><br><span class="line">   <span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line">   <span class="comment">//只能使用 CommonJS 规范暴露</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 入口文件配置</span></span><br><span class="line">  <span class="attr">entry</span>: <span class="string">&#x27;./src/js/app.js&#x27;</span>,   </span><br><span class="line">  <span class="comment">// 输出配置</span></span><br><span class="line">  <span class="attr">output</span>: &#123;         </span><br><span class="line">       <span class="comment">// 输出文件名</span></span><br><span class="line">       <span class="attr">filename</span>: <span class="string">&#x27;./js/built.js&#x27;</span>,    </span><br><span class="line">       <span class="comment">//输出文件路径配置</span></span><br><span class="line">       <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)   </span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="comment">// development 与 production 开发环境(二选一)</span></span><br><span class="line">     <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>   </span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure></li><li>运行指令： webpack</li></ul><h3 id="5、打包-less-资源">5、打包 less 资源</h3><p>less 文件 webpack 不能解析，需要借助 loader 编译解析，使用步骤如下：</p><ol><li>创建less文件</li></ol><ul><li>src/css/test1.less</li><li>src/css/test2.less</li></ul><ol start="2"><li>入口app.js文件</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入两个 less 文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../css/test1.less&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../css/test2.less&#x27;</span>;</span><br></pre></td></tr></table></figure><ol start="3"><li>安装 loader</li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install css-loader style-loader less-loader less --save-dev </span><br></pre></td></tr></table></figure><ol start="4"><li><p>webpack.config.js 配置 loader</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attr">module</span>:&#123;</span><br><span class="line">        <span class="attr">rules</span>:[</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>:<span class="regexp">/\.less$/</span>,  <span class="comment">// 检查文件是否以.less结尾（检查是否是less文件）</span></span><br><span class="line">                   <span class="attr">use</span>:[<span class="comment">// 数组中loader执行是从下到上，从右到左顺序执行</span></span><br><span class="line">                       <span class="string">&#x27;style-loader&#x27;</span>, <span class="comment">// 创建style标签，添加上js中的css代码</span></span><br><span class="line">                       <span class="string">&#x27;css-loader&#x27;</span>, <span class="comment">// 将css以commonjs方式整合到js文件中</span></span><br><span class="line">                       <span class="string">&#x27;less-loader&#x27;</span> <span class="comment">// 将less文件解析成css文件</span></span><br><span class="line">                   ]</span><br><span class="line">               &#125;</span><br><span class="line">           ]</span><br><span class="line">       &#125;,</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>运行指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">webpack</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="6、JS-语法检查">6、JS 语法检查</h3><p>ESLint（<a href="https://eslint.bootcss.com/">https://eslint.bootcss.com/</a>） 能对 JS 基本语法错误/隐患进行提前检查，使用步骤</p><ol><li><p>安装loader</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint-loader eslint --save-dev</span><br></pre></td></tr></table></figure><blockquote><p>eslint 是语法检查的包</p><p>eslint-loader 是 eslint 在 webpack 中的 loader 包</p></blockquote></li><li><p>webpack.config.js 配置 loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,                  <span class="comment">//只检测js文件</span></span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,        <span class="comment">//排除node_modules文件夹</span></span><br><span class="line">                <span class="attr">enforce</span>: <span class="string">&quot;pre&quot;</span>,                 <span class="comment">//提前加载使用</span></span><br><span class="line">                <span class="attr">use</span>: &#123;                          </span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;eslint-loader&quot;</span><span class="comment">//使用eslint-loader解析</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 <code>.eslintrc.js</code> 文件</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="string">&quot;parserOptions&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;ecmaVersion&quot;</span>: <span class="number">6</span>, <span class="comment">// 支持es6</span></span><br><span class="line">        <span class="string">&quot;sourceType&quot;</span>: <span class="string">&quot;module&quot;</span><span class="comment">// 使用es6模块化</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;env&quot;</span>: &#123; <span class="comment">// 设置环境</span></span><br><span class="line">        <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span>,   <span class="comment">// 支持浏览器环境： 能够使用window上的全局变量</span></span><br><span class="line">        <span class="string">&quot;node&quot;</span>: <span class="literal">true</span>       <span class="comment">// 支持服务器环境:  能够使用node上global的全局变量</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;globals&quot;</span>: &#123;<span class="comment">// 声明使用的全局变量, 这样即使没有定义也不会报错了</span></span><br><span class="line">        <span class="string">&quot;$&quot;</span>: <span class="string">&quot;readonly&quot;</span><span class="comment">// $ 不允许重写变量</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: &#123;  <span class="comment">// eslint检查的规则  0 忽略 1 警告 2 错误</span></span><br><span class="line">        <span class="string">&quot;no-console&quot;</span>: <span class="number">0</span>, <span class="comment">// 不允许出现 console</span></span><br><span class="line">        <span class="string">&quot;eqeqeq&quot;</span>: <span class="number">0</span>,<span class="comment">// 必须使用 === </span></span><br><span class="line">        <span class="string">&quot;no-alert&quot;</span>: <span class="number">0</span> <span class="comment">// 不能使用 alert</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;eslint:recommended&quot;</span> <span class="comment">// 使用eslint推荐的默认规则</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">webpack</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="7、JS-语法转换">7、JS 语法转换</h3><p>借助 Babel 可以将浏览器不能识别的新语法（ES6, ES7）转换成原来识别的旧语法（ES5），浏览器兼容性处理</p><ol><li><p>安装loader</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install babel-loader @babel/core @babel/preset-env --save-dev</span></span><br></pre></td></tr></table></figure><blockquote><p>@babel/core  是 babel 的核心库</p><p>@babel/preset-env  是 babel 的预设的工具包，默认可以将所有最新的语法转为为 ES5</p><p>babel-loader   是 babel 在 webpack 中的 loader 包</p></blockquote></li><li><p>配置loader</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行指令</p></li></ol>  <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">webpack</span></span><br></pre></td></tr></table></figure><h3 id="8、JS-兼容性处理">8、JS 兼容性处理</h3><p>Polyfill 是一块代码（通常是 Web 上的 JavaScript），用来为旧浏览器提供它没有原生支持的较新的功能</p><ol><li><p>安装 polyfill</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install @babel/polyfill</span></span><br></pre></td></tr></table></figure></li><li><p>app.js（入口文件）引入</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@babel/polyfill&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>解决 babel 只能转换语法的问题(如：let/const/解构赋值…)，引入polyfill可以转换高级语法(如:Promise…)</p></blockquote><h3 id="9、打包样式文件中的图片资源">9、打包样式文件中的图片资源</h3><p>图片文件 webpack 不能解析，需要借助 url-loader编译解析</p><ol><li>两张资源图片:</li></ol><ul><li>小图, 小于8kb: src/images/vue.png</li><li>大图, 大于8kb: src/images/react.jpg</li></ul><ol start="2"><li><p>在 less 文件中通过背景图的方式引入图片</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.react</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;../images/react.png&#x27;</span>) no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.vue</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&#x27;../images/vue.png&#x27;</span>) no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>安装 loader</p></li></ol>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install file-loader url-loader --save-dev</span> </span><br></pre></td></tr></table></figure><blockquote><p>补充：url-loader是对象file-loader的上层封装，使用时需配合file-loader使用。</p></blockquote><ol start="4"><li><p>webpack.config.js 配置 loader</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">    .</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">                <span class="attr">use</span>: &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">limit</span>: <span class="number">8192</span>,               <span class="comment">// 8kb以下的图片会 base64 处理</span></span><br><span class="line">                        <span class="attr">outputPath</span>: <span class="string">&#x27;images&#x27;</span>,           <span class="comment">// 文件本地输出路径</span></span><br><span class="line">                        <span class="attr">publicPath</span>: <span class="string">&#x27;../build/images&#x27;</span>,   <span class="comment">// 图片的url路径</span></span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;[hash:8].[ext]&#x27;</span>,         <span class="comment">// 修改文件名称和后缀 </span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">webpack</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10、打包-HTML-文件">10、打包 HTML 文件</h3><p>HTML 文件不能直接被 webpack 解析，需要借助 <code>HtmlWebpackPlugin</code> 插件编译解析</p><ol><li><p>在 src 目录下创建 index.html 文件，==注意不要在 HTML 中引入任何 CSS 和  JS  文件==</p></li><li><p>安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install html-webpack-plugin --save-dev</span> </span><br></pre></td></tr></table></figure></li><li><p>webpack.config.js 修改配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插件都需要手动引入</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>);</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>,</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>, <span class="comment">// 设置要编译的 HTML 源文件路径</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行指令</p> <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">webpack</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>src 目录就是源文件目录，所有的代码和资源都保存在该目录，index.html 也是如此</p></blockquote><h3 id="11、打包-HTML-中图片资源">11、打包 HTML 中图片资源</h3><p>url-loader 只能处理 JS 和 CSS 中引入的图片，无法处理 HTML 中的 img 图片，需要 html-loader 处理。</p><ol><li>src/index.html 添加 img 标签</li></ol>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../social/images/sun.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>安装loader</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install html-loader --save-dev</span> </span><br></pre></td></tr></table></figure></li><li><p>配置loader</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(html)$/</span>,</span><br><span class="line">                <span class="attr">use</span>: &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&#x27;html-loader&#x27;</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行指令</p> <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">webpack</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="12、打包字体资源">12、打包字体资源</h3><p>字体文件需要借助 file-loader 编译解析，以 iconfont 为例，下载一个项目</p><ol><li>将字体文件保存在 <code>src/fonts</code> 目录下</li></ol><ul><li>src/fonts/iconfont.eot</li><li>src/fonts/iconfont.svg</li><li>src/fonts/iconfont.ttf</li><li>src/fonts/iconfont.woff</li><li>src/fonts/iconfont.woff2</li></ul><ol start="2"><li><p>创建 src/css/iconfont.less 并将 iconfont 的 css 样式粘到 less 文件中，并修改字体路径</p> <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;iconfont&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../fonts/iconfont.eot&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../fonts/iconfont.eot?#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;../fonts/iconfont.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;../fonts/iconfont.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;../fonts/iconfont.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">      <span class="built_in">url</span>(<span class="string">&#x27;../fonts/iconfont.svg#iconfont&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 <code>src/index.html</code></p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;iconfont&quot;</span>&gt;</span><span class="symbol">&amp;#xe8ab;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置 loader</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">               .</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="attr">test</span>: <span class="regexp">/\.(eot|svg|woff|woff2|ttf|mp3|mp4|avi)$/</span>,  <span class="comment">// 处理字体文件</span></span><br><span class="line">                   <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                   <span class="attr">options</span>: &#123;</span><br><span class="line">                     <span class="attr">outputPath</span>: <span class="string">&#x27;fonts&#x27;</span>,</span><br><span class="line">                     <span class="attr">name</span>: <span class="string">&#x27;[hash:8].[ext]&#x27;</span></span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           ]</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>运行指令</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">webpack</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="13、自动编译打包运行">13、自动编译打包运行</h3><p>之前的操作，每次修改代码都需要重新执行 webpack 命令，可以使用 webpack-dev-server 自动打包运行</p><ol><li><p>安装 loader</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install webpack-dev-server -g</span></span><br></pre></td></tr></table></figure></li><li><p>详细配置见官网  <a href="https://www.webpackjs.com/configuration/dev-server/">https://www.webpackjs.com/configuration/dev-server/</a></p></li><li><p>修改 webpack.config.js</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">   .</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">       .</span><br><span class="line">       <span class="attr">output</span>: &#123;</span><br><span class="line">           <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">           <span class="attr">filename</span>: <span class="string">&#x27;js/app.js&#x27;</span>,</span><br><span class="line">           <span class="comment">//1. 添加 devServer 服务后需要调整输出的路径</span></span><br><span class="line">           <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">module</span>: &#123;</span><br><span class="line">           <span class="attr">rules</span>: [</span><br><span class="line">               .</span><br><span class="line">               .</span><br><span class="line">               .</span><br><span class="line">               &#123;</span><br><span class="line">                   <span class="attr">test</span>: <span class="regexp">/\.(png|jpg|gif)$/</span>,</span><br><span class="line">                   <span class="attr">use</span>: &#123;</span><br><span class="line">                       <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">                       <span class="attr">options</span>: &#123;</span><br><span class="line">                           <span class="attr">limit</span>: <span class="number">8192</span>,               </span><br><span class="line">                           <span class="attr">outputPath</span>: <span class="string">&#x27;images&#x27;</span>,           </span><br><span class="line">                           <span class="attr">name</span>: <span class="string">&#x27;[hash:8].[ext]&#x27;</span>,       </span><br><span class="line">               <span class="comment">//2. 删除 publicPath 配置</span></span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;,</span><br><span class="line">               </span><br><span class="line">   </span><br><span class="line">           ]</span><br><span class="line">       &#125;,</span><br><span class="line">       .</span><br><span class="line">       .</span><br><span class="line">       <span class="comment">//3. 增加 devServer 配置</span></span><br><span class="line">       <span class="attr">devServer</span>: &#123;</span><br><span class="line">           <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 自动打开浏览器</span></span><br><span class="line">           <span class="attr">compress</span>: <span class="literal">true</span>, <span class="comment">// 启动gzip压缩</span></span><br><span class="line">           <span class="attr">port</span>: <span class="number">3000</span>, <span class="comment">// 端口号</span></span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li><li><p>现在就可以启动服务</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">webpack-dev-server</span></span><br></pre></td></tr></table></figure></li><li><p>配置 package.json 中 scripts 指令。增加 server 配置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">   .</span><br><span class="line">   .</span><br><span class="line">   .</span><br><span class="line">   <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server&quot;</span> </span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">   .</span><br><span class="line">   .</span><br><span class="line">   .</span><br><span class="line"> <span class="punctuation">&#125;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure></li><li><p>运行指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm run server</span> </span><br></pre></td></tr></table></figure></li></ol><h3 id="14、热模替换功能">14、热模替换功能</h3><p>模块热替换 (HMR - Hot Module Replacement) 功能会在应用程序运行过程中替换、添加或删除模块，而无需重新加载整个页面，详细配置地址（<a href="https://www.webpackjs.com/guides/hot-module-replacement/">https://www.webpackjs.com/guides/hot-module-replacement/</a>）</p><p>修改 webpack.config.js 的 devServer 配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">//index.html 不能自动刷新的解决方法</span></span><br><span class="line">    <span class="comment">//新增一个入口，解决开启热模块替换后首页无法刷新的问题</span></span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">main</span>:[<span class="string">&#x27;./src/js/app.js&#x27;</span>,<span class="string">&#x27;./src/index.html&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="attr">compress</span>: <span class="literal">true</span>, </span><br><span class="line">        <span class="attr">port</span>: <span class="number">3000</span>, </span><br><span class="line">        <span class="attr">hot</span>: <span class="literal">true</span><span class="comment">// 开启热模块替换功能</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="15、devtool">15、devtool</h3><p>devtool 配置控制 source-map 的生成 , 可以将压缩/编译文件中的代码映射回源文件中的原始位置，便于调试代码</p><p>详细配置官网地址 <a href="https://www.webpackjs.com/configuration/devtool/">https://www.webpackjs.com/configuration/devtool/</a></p><p>配置 webpack.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attr">devtool</span>:  <span class="string">&#x27;cheap-module-eval-source-map&#x27;</span>, <span class="comment">//设置 devtool 策略</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>推荐使用：</p><ul><li>开发环境： cheap-module-eval-source-map</li><li>生产环境： none   source-map</li></ul><h3 id="16、准备生产环境">16、准备生产环境</h3><p>webpack 可以使用不同的配置文件，进行不同的编译。</p><ol><li><p>创建文件夹 config，将 webpack.config.js 复制两份</p><ul><li>./config/webpack.dev.js</li><li>./config/webpack.prod.js</li></ul></li><li><p>修改 webpack.prod.js 配置，删除 webpack-dev-server 配置</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">main</span>:[<span class="string">&#x27;./src/js/app.js&#x27;</span>,<span class="string">&#x27;./src/index.html&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="comment">//1. 设置 devtool</span></span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">    <span class="comment">//2. 设置 mode</span></span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">    <span class="comment">//3. 删除 devServer 配置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改 package.json 的指令</p></li></ol>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --config ./config/webpack.dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --config ./config/webpack.prod.js&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>开发环境指令</li></ol><ul><li>npm run dev   用于开发环境   不打包文件</li><li>npm run build        用于生产环境    打包文件 （==打包后的index.html不能直接双击打开，需要启动服务==）</li></ul><h3 id="17、清除打包文件目录">17、清除打包文件目录</h3><p>每次打包生成了文件，都需要手动删除，引入插件 <code>clean-webpack-plugin</code> 帮助我们自动删除上一次生成的文件</p><ol><li><p>安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install clean-webpack-plugin --save-dev</span></span><br></pre></td></tr></table></figure></li><li><p><code>webpack.prod.js</code> 引入插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 引入插件</span></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;clean-webpack-plugin&#x27;</span>); </span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>, </span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">//2. 配置插件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>() </span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm run build</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="18、提取-CSS-成单独文件">18、提取 CSS 成单独文件</h3><p>前面的 CSS 样式代码都是放在 style 标签中，这里可以借助 mini-css-extract-plugin 抽离 CSS 文件</p><ol><li><p>安装插件</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install mini-css-extract-plugin --save-dev</span> </span><br></pre></td></tr></table></figure></li><li><p>配置 webpack.prod.js</p></li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="comment">// 1. 引入插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/.less$/</span>,</span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,   <span class="comment">// 2. 修改配置 loader</span></span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;less-loader&#x27;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;<span class="comment">// 3. 配置插件</span></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;css/[hash:8].css&quot;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>运行指令 <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">webpack</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="19、添加-CSS-兼容">19、添加 CSS 兼容</h3><ul><li><p>安装 loader</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install postcss-loader autoprefixer --save-dev</span> </span><br></pre></td></tr></table></figure></li><li><p>配置 loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">   .</span><br><span class="line">    .</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, </span><br><span class="line">                <span class="attr">use</span>: [</span><br><span class="line">                    <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">                    <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span>,      <span class="comment">// 1. 设置 postcss-loader</span></span><br><span class="line">                        <span class="attr">options</span>: &#123;</span><br><span class="line">                            <span class="attr">plugins</span>: [</span><br><span class="line">                                <span class="built_in">require</span>(<span class="string">&quot;autoprefixer&quot;</span>) <span class="comment">// 2. 配置插件</span></span><br><span class="line">                            ]</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            .</span><br><span class="line">            .</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在项目目录下创建 <code>.browserslistrc</code>  ==这里一要加目标浏览器设置==</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chrome 50</span><br><span class="line">last 1 versions</span><br><span class="line">ie 10</span><br><span class="line">iOS 7</span><br></pre></td></tr></table></figure></li><li><p>运行指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm run build</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="20、压缩-CSS">20、压缩 CSS</h3><ol><li><p>安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm install optimize-css-assets-webpack-plugin --save-dev</span> </span><br></pre></td></tr></table></figure></li><li><p>引入插件，配置插件</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 引入插件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">OptimizeCssAssetsPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">        .</span><br><span class="line">        <span class="comment">//2. 配置插件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">OptimizeCssAssetsPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">cssProcessorPluginOptions</span>: &#123;</span><br><span class="line">        <span class="comment">//移除所有的注释</span></span><br><span class="line">                <span class="attr">preset</span>: [<span class="string">&#x27;default&#x27;</span>, &#123;<span class="attr">discardComments</span>: &#123;<span class="attr">removeAll</span>: <span class="literal">true</span>&#125;&#125;],</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 解决没有source map问题</span></span><br><span class="line">            <span class="attr">cssProcessorOptions</span>: &#123;                  </span><br><span class="line">                <span class="attr">map</span>: &#123;</span><br><span class="line">                    <span class="comment">// 不生成内联映射,这样配置就会生成一个source-map文件</span></span><br><span class="line">                    <span class="attr">inline</span>: <span class="literal">false</span>,</span><br><span class="line">                    <span class="comment">// 向css文件添加source-map路径注释</span></span><br><span class="line">                    <span class="comment">// 如果没有此项压缩后的css会去除source-map路径注释</span></span><br><span class="line">                    <span class="attr">annotation</span>: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">npm run build</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="附录">附录</h2><h3 id="browserslist">browserslist</h3><p>browserslist 目标浏览器配置表，可以针对目标浏览器进行编译处理，避免不必要的兼容代码</p><p>配置的方法有两种，一种是在 package.json 中，一种是创建 <code>.browserslistrc</code></p><p>package.json 形式</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line">.</span><br><span class="line"><span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;&gt; 1%&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;last 2 versions&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>.browserslistrc</code> 形式</p><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript"><span class="number">1</span>%</span></span><br><span class="line">last 2 versions</span><br></pre></td></tr></table></figure><p>配置规则介绍</p><table><thead><tr><th>规则</th><th>介绍</th></tr></thead><tbody><tr><td>&gt; 1%</td><td>全球超过1%人使用的浏览器</td></tr><tr><td>&gt; 5% in US</td><td>指定国家使用率覆盖</td></tr><tr><td>last 2 versions</td><td>所有浏览器兼容到最后两个版本根据CanIUse.com追踪的版本</td></tr><tr><td>Firefox &gt; 20</td><td>指定浏览器的版本范围</td></tr><tr><td>not ie &lt;=8</td><td>排除 ie8 及以下</td></tr><tr><td>Firefox 12.1</td><td>指定浏览器的兼容到指定版本</td></tr><tr><td>since 2013</td><td>2013年之后发布的所有版本</td></tr><tr><td>not dead with &gt; 0.2%</td><td>仍然还在使用且使用率大于 0.2%</td></tr><tr><td>last 2 Chrome versions</td><td>最新的两个 Chrome 配置</td></tr><tr><td>cover 99.5%</td><td>99.5% 的浏览器都是目标</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串（String）的常用方法</title>
      <link href="/posts/310.html"/>
      <url>/posts/310.html</url>
      
        <content type="html"><![CDATA[<h1>字符串（String）的常用方法</h1><h3 id="1-str-charAt-index）动态方法">1. str.charAt(index）动态方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回子字符串</span></span><br></pre></td></tr></table></figure><h3 id="2-str-charCodeAt-index-动态方法">2. str.charCodeAt(index) 动态方法</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回子字符串的Unicode编码</span></span><br></pre></td></tr></table></figure><h3 id="3-String-fromCharCode-num1-num2-…">3. String.fromCharCode(num1,num2,…)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据Unicode编码返回字符串</span></span><br></pre></td></tr></table></figure><h3 id="4-str-indexOf-searchString-startIndex">4. str.indexOf(searchString,startIndex)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回子字符串第一次出现的位置，从startIndex开始查找，找不到返回-1</span></span><br></pre></td></tr></table></figure><h3 id="5-str-lastIndexOf-searchString-startIndex">5. str.lastIndexOf(searchString,startIndex)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从右往左开始查找，找不到返回-1</span></span><br></pre></td></tr></table></figure><h3 id="6-截取字符串">6. 截取字符串</h3><h4 id="1-str-substring-start-end">1) str.substring(start,end)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个参数都为正数，返回值就是[start,end-1]这段的字符串</span></span><br></pre></td></tr></table></figure><h4 id="2-str-slice-start-end">2) str.slice(start,end)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 两个参数可正可负，返回值就是[start,end-1]这段的字符串</span></span><br></pre></td></tr></table></figure><h3 id="7-str-split-separator-limit">7. str.split(separator,limit)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数1指定字符串或正则，参数2指定数组的最大长度</span></span><br><span class="line"><span class="comment">// 字符串变数组</span></span><br><span class="line">str.<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>); <span class="comment">// 每个字符被分割[&quot;&quot;,&quot;&quot;,&quot;&quot;]；</span></span><br><span class="line"><span class="comment">// 数组变成字符串</span></span><br><span class="line">arr.<span class="title function_">join</span>(分隔符)</span><br></pre></td></tr></table></figure><h3 id="8-str-replace-rgExp-substr-replaceText">8. str.replace(rgExp/substr,replaceText)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回替换后的字符串</span></span><br></pre></td></tr></table></figure><h3 id="9-str-match-rgExp">9. str.match(rgExp)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正则匹配</span></span><br></pre></td></tr></table></figure><h1>JS中获取数据类型的四种方法</h1><p>JS中获取数据类型常用的方法有四种：</p><h3 id="1-typeof">1. typeof</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断js中基本数据类型，但是无法判断对象的具体类型</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">null</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a:&quot;</span>+<span class="title function_">typeof</span>(a)); <span class="comment">// a: object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b:&quot;</span>+<span class="title function_">typeof</span>(b)); <span class="comment">// b: object</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr:&quot;</span>+<span class="title function_">typeof</span>(arr)); <span class="comment">// arr: object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr1:&quot;</span>+<span class="title function_">typeof</span>(arr1)); <span class="comment">// arr1: object</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：当使用基本包装类型创建字符串、数组或者布尔值时，使用typeof返回的是Object</span></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s); <span class="comment">// Object</span></span><br></pre></td></tr></table></figure><h3 id="2-Object-prototype-toString-call">2. Object.prototype.toString.call( )</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以判断具体的对象类型，包括正则等，但是无法判断自定义对象类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;a:&quot;</span>+<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(a)); <span class="comment">// [object Null]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;b:&quot;</span>+<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(b)); <span class="comment">// [object Object]</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr:&quot;</span>+<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr)); <span class="comment">// [object Array]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;arr1:&quot;</span>+<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr1)); <span class="comment">// [object Array]</span></span><br><span class="line"><span class="comment">// 对于自定义的对象类型，无法判断</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(x)); <span class="comment">// [object Object]</span></span><br></pre></td></tr></table></figure><h3 id="3-instanceof">3. instanceof</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量 instanceof对象，返回值为boolean,用来判断一个变量是否为某个对象的实例</span></span><br><span class="line"><span class="comment">// 仅能判断对象的具体类型，但可以拥有判断自定义对象类型</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a <span class="keyword">instanceof</span> <span class="title class_">Number</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="keyword">if</span>(x <span class="keyword">instanceof</span> A)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x is A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x is A</span></span><br></pre></td></tr></table></figure><h3 id="4-constructor">4. constructor</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查看对象对应的构造函数</span></span><br><span class="line"><span class="comment">// object的每个实例都具有属性constructor，保存着用于创建当前对象的函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">a</span> = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">constructor</span>); <span class="comment">// f A()&#123;this.a = 1&#125;</span></span><br><span class="line"><span class="keyword">if</span>(x.<span class="property">constructor</span> === A)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;x is A&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x is A</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是， undefined和Null类型不能判断</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串（String）的常用方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组Array的常用方法</title>
      <link href="/posts/311.html"/>
      <url>/posts/311.html</url>
      
        <content type="html"><![CDATA[<h1>数组Array的常用方法（22种）</h1><h2 id="关于数组的判断（1）isArray">关于数组的判断（1）isArray</h2><p><strong>Array.isArray()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用于判断一个对象是否为数组</span></span><br><span class="line"><span class="keyword">var</span> f = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(f)); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="关于这个方法的实现">关于这个方法的实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property">myIsArray</span> = <span class="keyword">function</span>(<span class="params">o</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="title class_">Object</span>(o) === <span class="string">&#x27;[Object Array]&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="关于类数组对象转成数组（1）from">关于类数组对象转成数组（1）from</h2><p><strong>Array.from()</strong> 用于通过拥有length属性的对象或可迭代的对象来返回一个数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回新的数组实例，对于原始解构不影响</span></span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [&quot;f&quot;,&quot;o&quot;,&quot;o&quot;];</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 该方法有三个参数：</span></span><br><span class="line"><span class="comment">// 1. 接受一个类数组或可迭代对象</span></span><br><span class="line"><span class="comment">// 2. 新数组中每个元素都会执行的回调函数</span></span><br><span class="line"><span class="comment">// 3. 指定第二个参数的this对象</span></span><br><span class="line"><span class="keyword">var</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],<span class="function"><span class="params">x</span>=&gt;</span>x*<span class="number">10</span>);</span><br><span class="line"><span class="comment">// arr[0] = 10;</span></span><br><span class="line"><span class="comment">// arr[1] = 20;</span></span><br><span class="line"><span class="comment">// arr[2] = 30;</span></span><br></pre></td></tr></table></figure><h2 id="关于多个数组的连接-数组转换成字符串（2）concat-join">关于多个数组的连接 &amp; 数组转换成字符串（2）concat/join</h2><p><strong>Array.prototype.concat()</strong>  用于连接两个或多个数组，且不会改变现有数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;橘子&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">&quot;梨&quot;</span>,<span class="string">&quot;西瓜&quot;</span>,<span class="string">&quot;火龙果&quot;</span>]；</span><br><span class="line"><span class="keyword">var</span> arr = arr1.<span class="title function_">concat</span>(arr2)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&quot;苹果&quot;,&quot;香蕉&quot;,&quot;橘子&quot;,&quot;梨&quot;,&quot;西瓜&quot;,&quot;火龙果&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>Array.prototype.join()</strong> 把数组的所有元素转换成一个字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;西瓜&quot;</span>,<span class="string">&quot;哈密瓜&quot;</span>,<span class="string">&quot;榴莲&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">join</span>()); <span class="comment">// 西瓜,哈密瓜,榴莲</span></span><br></pre></td></tr></table></figure><h2 id="关于查找符合条件的数组（5）every-some-filter-find-includes">关于查找符合条件的数组（5）every/some/filter/find/includes</h2><p><strong>Array.prototype.every()</strong> 用于检测数值元素的每个元素是否都符合条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果数组中检测到一个元素不满足条件，则整个返回false，剩余元素就不会再进行检测</span></span><br><span class="line"><span class="comment">// 不会对空数组进行检测，也不会改变原始数组</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">33</span>,<span class="number">20</span>,<span class="number">16</span>,<span class="number">50</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">ages.<span class="title function_">every</span>(checkAdult); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p><strong>Array.prototype.some()</strong> 检测数组元素中是否有元素符合指定条件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不会对空数组进行检测，也不会改变原始数组</span></span><br><span class="line"><span class="comment">// 如果有一个元素满足条件，就返回true，剩余的元素不会再进行检测</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">33</span>,<span class="number">20</span>,<span class="number">16</span>,<span class="number">50</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">ages.<span class="title function_">some</span>(checkAdult); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>Array.prototype.filter()</strong> 用于检测数值元素，并返回符合条件的所有元素的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不会对空数组进行检测，也不会改变原始数组</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">33</span>,<span class="number">20</span>,<span class="number">16</span>,<span class="number">50</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">ages.<span class="title function_">filter</span>(checkAdult); <span class="comment">// [33,20,50]</span></span><br></pre></td></tr></table></figure><p><strong>Array.prototype.find()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不会对空数组进行检测，也不会改变原始数组</span></span><br><span class="line"><span class="comment">// 返回符合传入测试（函数）条件的第一个元素的值，之后的值就不会再检测了</span></span><br><span class="line"><span class="comment">// 没有符合条件的值就返回undefined</span></span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">10</span>,<span class="number">15</span>,<span class="number">18</span>,<span class="number">50</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkAdult</span>(<span class="params">age</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line">ages.<span class="title function_">filter</span>(checkAdult); <span class="comment">// 18</span></span><br></pre></td></tr></table></figure><p><strong>Array.prototype.includes(searchElement,fromIndex)</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断一个数组是否包含一个指定的值,有就返回true，否则返回false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].<span class="title function_">includes</span>(<span class="number">2</span>,<span class="number">1</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="关于数组的遍历（1）forEach">关于数组的遍历（1）forEach</h2><p><strong>Array.prototype.forEach()</strong> 遍历方法，对数组中的每个元素都执行一次回调函数</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于空数组不会执行回调函数</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>];</span><br><span class="line">arr.forEach(<span class="keyword">function</span>(<span class="params">item,index</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.<span class="built_in">log</span>(item)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="关于数组index的查找（2）indexOf-lastIndexOf">关于数组index的查找（2）indexOf/lastIndexOf</h2><p><strong>Array.prototype.indexOf()</strong> 搜素数组中的元素，返回它所在的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从头开始检索，找到item第一次出现的位置，返回它的索引值</span></span><br><span class="line"><span class="comment">// 没有就返回-1</span></span><br><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;西瓜&quot;</span>,<span class="string">&quot;哈密瓜&quot;</span>,<span class="string">&quot;榴莲&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">indexOf</span>(<span class="string">&quot;哈密瓜&quot;</span>));<span class="comment">//1</span></span><br></pre></td></tr></table></figure><p><strong>Array.prototype.lastIndexOf()</strong> 返回指定内容最后出现的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 从后向前进行检索，找到item第一次出现的位置，返回它的索引值</span></span><br><span class="line"><span class="comment">// 没有就返回-1</span></span><br><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;西瓜&quot;</span>,<span class="string">&quot;哈密瓜&quot;</span>,<span class="string">&quot;榴莲&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(fruits.<span class="title function_">indexOf</span>(<span class="string">&quot;哈密瓜&quot;</span>)); <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h2 id="关于数组的增删改（7）pop-shift-push-unshift-reverse-slice-splice">关于数组的增删改（7）pop/shift/push/unshift/reverse/slice/splice</h2><p><strong>Array.prototype.pop()</strong> 删除数组的最后一个元素并返回删除的元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法会改变数组的长度</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [10,20,30]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// 40</span></span><br></pre></td></tr></table></figure><p><strong>Array.prototype.shift()</strong> 删除并返回数组的第一个元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法会改变数组的长度</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [20,30，40]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p><strong>Array.prototype.push()</strong> 向数组末尾添加一个或多个元素，并返回新的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法会改变数组的长度</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.<span class="title function_">push</span>(<span class="number">50</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [10,20,30，40,50]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p><strong>Array.prototype.unshift()</strong> 向数组开头添加一个或多个元素，并返回新的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法会改变数组的长度</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = arr1.<span class="title function_">unshift</span>(<span class="number">50</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1); <span class="comment">// [50,10,20,30，40]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p><strong>Array.prototype.reverse()</strong> 反转数组的元素顺序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;小明&quot;</span>,<span class="string">&quot;小红&quot;</span>,<span class="string">&quot;小黄&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">reverse</span>()); <span class="comment">// [&quot;小黄&quot;,&quot;小红&quot;,&quot;小明&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>Array.prototype.slice(start,end)</strong> 选取数组的一部分，并返回一个新数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不会改变原始数组</span></span><br><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Lemon&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> re = fruits.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re); <span class="comment">// [&quot;Orange&quot;,&quot;Lemon&quot;]</span></span><br></pre></td></tr></table></figure><p><strong>Array.prototype.splice(index，num)</strong> 从数组中添加或删除元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法会改变原始数组</span></span><br><span class="line"><span class="comment">// 删除元素时,参数为开始索引和要删除元素的长度</span></span><br><span class="line"><span class="keyword">var</span> sites = [<span class="string">&quot;Runoob&quot;</span>,<span class="string">&quot;Google&quot;</span>,<span class="string">&quot;Taobao&quot;</span>];</span><br><span class="line"><span class="comment">// 该方法返回的是被删除元素组成的数组</span></span><br><span class="line"><span class="keyword">var</span> re = sites.<span class="title function_">splice</span>(<span class="number">2</span>,<span class="number">1</span>,<span class="string">&quot;GGGGG&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(sites); <span class="comment">//[&quot;Runoob&quot;,&quot;Google&quot;,&quot;GGGGG&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(re); <span class="comment">// [&quot;Taobao&quot;]</span></span><br></pre></td></tr></table></figure><h2 id="关于数组的回调处理和排序（3）sort-reduce-map">关于数组的回调处理和排序（3）sort/reduce/map</h2><p><strong>Array.prototype.sort()</strong> 对数组的元素进行排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 该方法将改变原始数组</span></span><br><span class="line"><span class="keyword">var</span> points = [<span class="number">40</span>,<span class="number">100</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">25</span>,<span class="number">10</span>];</span><br><span class="line">points.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a-b;</span><br><span class="line">&#125;); <span class="comment">// 1，5，10，25，40，100 （升序排列）</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以给字母排序</span></span><br><span class="line"><span class="keyword">var</span> fruits = [<span class="string">&quot;Banana&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Mango&quot;</span>];</span><br><span class="line">fruits.<span class="title function_">sort</span>(); <span class="comment">// [&quot;Apple&quot;,&quot;Banana&quot;,&quot;Mango&quot;,&quot;Orange&quot;];</span></span><br></pre></td></tr></table></figure><p><strong>Array.prototype.reduce()</strong> 将数组元素计算为一个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于空数组不会执行回调函数的</span></span><br><span class="line"><span class="comment">// 接收一个函数作为累加器，对数组中的每个值进行累加计算</span></span><br><span class="line"><span class="keyword">var</span> num = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line"><span class="keyword">var</span> result = num.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">pre,cur</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> pre + cur;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 150</span></span><br></pre></td></tr></table></figure><h3 id="关于这个方法的实现-2">关于这个方法的实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myReduce</span> = <span class="keyword">function</span>(<span class="params">callback, initialValue</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> accumulator = initialValue ? initialValue : <span class="variable language_">this</span>[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = initialValue ? <span class="number">0</span> : <span class="number">1</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    accumulator = <span class="title function_">callback</span>(accumulator, <span class="variable language_">this</span>[i], i, _this);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> accumulator;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>Array.prototype.map(callback,[thisObject])</strong> 通过指定函数处理数组的每个元素，并返回处理后的数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个新数组，新数组中的元素都是原始数组处理后的值</span></span><br><span class="line"><span class="comment">// 不会对空数组进行检测，也不会改变原始数组</span></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>,<span class="number">25</span>,<span class="number">36</span>];</span><br><span class="line"><span class="keyword">var</span> newNum = numbers.<span class="title function_">map</span>(<span class="title class_">Math</span>.<span class="property">sqrt</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNum); <span class="comment">// [2,3,4,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">9</span>,<span class="number">16</span>];</span><br><span class="line"><span class="keyword">const</span> map1 = arr1.<span class="title function_">map</span>(<span class="function"><span class="params">x</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">// 只有当x=4时，才进行操作</span></span><br><span class="line"><span class="keyword">if</span>(x == <span class="number">4</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> x*<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他值时，就直接返回</span></span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map1); <span class="comment">// [1,8,9,16]</span></span><br></pre></td></tr></table></figure><h3 id="关于这个方法的实现-3">关于这个方法的实现</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myMap</span> = <span class="keyword">function</span>(<span class="params">callback, thisArg</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> arr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>(callback.<span class="title function_">call</span>(thisArg, <span class="variable language_">this</span>[i], i, <span class="variable language_">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组Array的常用方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack基础教程</title>
      <link href="/posts/308.html"/>
      <url>/posts/308.html</url>
      
        <content type="html"><![CDATA[<h1>webpack基础配置教程</h1><h3 id="1-初识Webpack">1. 初识Webpack</h3><ul><li>什么是webpack？<ul><li>Webpack是一个模块打包器。</li><li>在Webpack会将前端的所有资源文件（js/json/css/img/less/…）都作为模块处理。</li><li>它将根据模块的依赖关系进行分析，生成对应的资源</li></ul></li><li>五个核心概念：<ol><li>【入口(entry)】：指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。</li><li>【输出(output)】：在哪里输出文件，以及如何命名这些文件。</li><li>【Loader】：处理那些非 JavaScript 文件（webpack 自身只能解析 JavaScript和json）。</li><li>【插件(plugins)】执行范围更广的任务，从打包到优化都可以实现。</li><li>【模式(mode)】，有生产模式production和开发模式development</li></ol></li><li>对loader的理解<ul><li>webpack 本身只能处理JS、JSON模块，如果要加载其他类型的文件(模块)，就需要使用对应的loader 。</li><li>它本身是一个函数，接受源文件作为参数，返回转换的结果。</li><li>loader 一般以 xxx-loader 的方式命名，xxx 代表了这个 loader 要做的转换功能，比如 css-loader。</li></ul></li><li>对plugins的理解<ul><li>插件可以完成一些loader不能完成的功能。</li></ul></li><li>配置文件<ul><li>webpack.config.js : 用于存储webpack配置信息。</li></ul></li></ul><h3 id="2-开启项目">2. 开启项目</h3><ul><li>初始化项目：<ul><li>使用<code>npm init</code>或<code>yarn init</code>生成一个package.json文件  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack_test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure></li></ul></li><li>安装webpack<ul><li>npm install webpack@4 webpack-cli@3 -g  //全局安装,作为指令使用</li><li>npm install webpack@4 webpack-cli@3 -D //本地安装,作为本地依赖使用</li></ul></li></ul><h3 id="3-处理js和json文件">3. 处理js和json文件</h3><ul><li><p>创建js文件</p><ul><li>src/js/app.js</li><li>src/js/module1.js</li><li>src/js/module2.js</li></ul></li><li><p>创建json文件</p><ul><li>src/json/data.json</li></ul></li><li><p>创建主页面:</p><ul><li>src/index.html</li></ul></li><li><p>运行指令</p><ul><li><p>打包指令（开发）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack .<span class="regexp">/src/</span>js<span class="regexp">/app.js -o ./</span>build<span class="regexp">/js/</span>app.js --mode=development</span><br></pre></td></tr></table></figure><ul><li>功能: webpack能够打包js和json文件，并且能将es6的模块化语法转换成浏览器能识别的语法</li></ul></li><li><p>打包指令（生产）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack .<span class="regexp">/src/</span>js<span class="regexp">/app.js -o ./</span>build<span class="regexp">/js/</span>app.js --mode=production</span><br></pre></td></tr></table></figure><ul><li>功能: 在开发配置功能上加上一个压缩代码的功能</li></ul></li><li><p>index.html页面中引入：build/js/app.js</p></li></ul></li><li><p>结论：</p><ul><li>webpack能够编译打包js和json文件</li><li>能将es6的模块化语法转换成浏览器能识别的语法</li><li>能压缩代码</li></ul></li><li><p>缺点：</p><ul><li>不能编译打包css、img等文件</li><li>不能将js的es6基本语法转化为es5以下语法</li></ul></li><li><p>改善：使用webpack配置文件解决，自定义功能</p></li></ul><h3 id="4-webpack配置文件">4. webpack配置文件</h3><ul><li>目的：在项目根目录定义配置文件，通过自定义配置文件，还原以上功能</li><li>文件名称：webpack.config.js</li><li>文件内容：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>); <span class="comment">//node内置核心模块，用来设置路径。</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&#x27;./src/js/app.js&#x27;</span>, <span class="comment">// 入口文件配置（精简写法）</span></span><br><span class="line">    <span class="comment">/*完整写法：</span></span><br><span class="line"><span class="comment">entry:&#123;</span></span><br><span class="line"><span class="comment">main:&#x27;./src/js/app.js&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="attr">output</span>: &#123; <span class="comment">//输出配置</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;./js/app.js&#x27;</span>,<span class="comment">//输出文件名</span></span><br><span class="line">        <span class="attr">path</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>)<span class="comment">//输出文件路径(绝对路径)</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span>   <span class="comment">//开发环境(二选一)</span></span><br><span class="line">    <span class="comment">//mode: &#x27;production&#x27;   //生产环境(二选一)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>运行指令： webpack</li></ul><h3 id="5-打包less、css资源">5. 打包less、css资源</h3><ul><li><p>概述：less、css文件webpack不能解析，需要借助loader编译解析</p></li><li><p>创建less文件</p><ul><li>src/css/demo1.less</li><li>src/css/demo2.css</li></ul></li><li><p>入口app.js文件</p><ul><li>引入less、css资源</li></ul></li><li><p>安装loader</p><ul><li>npm install css-loader style-loader less-loader less -D</li></ul></li><li><p>配置loader</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 处理less资源</span></span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line"><span class="attr">use</span>: [</span><br><span class="line"><span class="string">&#x27;style-loader&#x27;</span>, <span class="comment">//创建style标签，将js中的样式资源插入进行，添加到head中生效</span></span><br><span class="line"><span class="string">&#x27;css-loader&#x27;</span>, <span class="comment">//将css文件变成commonjs模块加载js中，里面内容是样式字符串</span></span><br><span class="line"><span class="string">&#x27;less-loader&#x27;</span> <span class="comment">//将less文件编译成css文件</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 处理css资源</span></span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line"><span class="attr">use</span>: [ <span class="comment">// use数组中loader执行顺序：从右到左，从下到上 依次执行</span></span><br><span class="line"><span class="string">&#x27;style-loader&#x27;</span>,<span class="comment">// 创建style标签，将js中的样式资源插入进行，添加到head中生效</span></span><br><span class="line"><span class="string">&#x27;css-loader&#x27;</span><span class="comment">// 将css文件变成commonjs模块加载js中，里面内容是样式字符串</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>运行指令：webpack</p></li></ul><h3 id="6-打包html文件">6. 打包html文件</h3><ul><li><p>概述：借助html-webpack-plugin插件打包html资源</p></li><li><p>创建html文件</p><ul><li>src/index.html</li><li>注意：不要在该html中引入任何css和js文件</li></ul></li><li><p>安装插件：html-webpack-plugin</p><ul><li>npm install html-webpack-plugin -D</li></ul></li><li><p>在webpack.config.js中引入插件（插件都需要手动引入，而loader会自动加载）</p><ul><li>const HtmlWebpackPlugin = require(‘html-webpack-plugin’)</li></ul></li><li><p>配置插件Plugins</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line"><span class="comment">// 以当前文件为模板创建新的HtML(1. 结构和原来一样 2. 会自动引入打包的资源)</span></span><br><span class="line">      <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>, </span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure></li><li><p>运行指令：webpack</p></li></ul><h3 id="7-打包样式中的图片">7. 打包样式中的图片</h3><ul><li>概述：图片文件webpack不能解析，需要借助loader编译解析</li><li>添加2张图片:<ul><li>小图, 小于8kb: src/images/vue.png</li><li>大图, 大于8kb: src/images/react.jpg</li></ul></li><li>在less文件中通过背景图的方式引入两个图片</li><li>安装loader<ul><li>npm install file-loader url-loader file-loader -D</li><li>补充：url-loader是对象file-loader的上层封装，使用时需配合file-loader使用。</li></ul></li><li>配置loader  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 处理图片资源</span></span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line"><span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span>, <span class="comment">//url-loader是对file-loader的上层封装</span></span><br><span class="line"><span class="attr">options</span>: &#123;</span><br><span class="line"><span class="attr">limit</span>: <span class="number">8</span> * <span class="number">1024</span>, <span class="comment">//临界值为8KB，小于8KB的图片会被转为base64编码</span></span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;[hash:10].[ext]&#x27;</span>, <span class="comment">//加工后图片的名字</span></span><br><span class="line"><span class="attr">outputPath</span>: <span class="string">&#x27;imgs&#x27;</span> <span class="comment">//输出路径</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><h3 id="8-打包html中的图片">8. 打包html中的图片</h3><ul><li><p>概述：html中的<code>&lt;img&gt;</code>标签url-loader没法处理，需要引入其他loader处理。</p></li><li><p>添加图片</p><ul><li>在src/index.html添加一个img标签，src/images/angular.png</li></ul></li><li><p>安装loader</p><ul><li>npm install html-loader --save-dev</li></ul></li><li><p>配置loader</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   &#123;</span><br><span class="line"><span class="comment">// 处理html中&lt;img&gt;资源</span></span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.html$/</span>,</span><br><span class="line"><span class="attr">loader</span>: <span class="string">&#x27;html-loader&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>可能出现的坑：打包后html文件中的图片的src变成了：[object Module],</p></li><li><p>解决办法：url-loader中加入一个配置：esModule:false即可</p></li></ul><h3 id="9-打包其他资源">9. 打包其他资源</h3><ul><li>概述：其他资源（字体、音视频等）webpack不能解析，需要借助loader编译解析</li><li>以处理几个字体图标的字体为例，font下添加几个下载好的字体文件：<ul><li>src/font/iconfont.eot</li><li>src/font/iconfont.svg</li><li>src/font/iconfont.ttf</li><li>src/font/iconfont.woff</li><li>src/font/iconfont.woff2</li></ul></li><li>修改incofont.css中字体的url  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&#x27;iconfont&#x27;</span>;</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../media/iconfont.eot&#x27;</span>);</span><br><span class="line">  <span class="attribute">src</span>: <span class="built_in">url</span>(<span class="string">&#x27;../media/iconfont.eot?#iefix&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;embedded-opentype&#x27;</span>),</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;../media/iconfont.woff2&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff2&#x27;</span>),</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;../media/iconfont.woff&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;woff&#x27;</span>),</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;../media/iconfont.ttf&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;truetype&#x27;</span>),</span><br><span class="line">  <span class="built_in">url</span>(<span class="string">&#x27;../media/iconfont.svg#iconfont&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;svg&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.iconfont</span> &#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">&quot;iconfont&quot;</span> <span class="meta">!important</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-style</span>: normal;</span><br><span class="line">  -webkit-<span class="attribute">font-smoothing</span>: antialiased;</span><br><span class="line">  -moz-osx-<span class="attribute">font-smoothing</span>: grayscale;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>修改html，添加字体图标，例如：<code>&lt;span class=&quot;iconfont icon-icon-test&quot;&gt;&lt;/span&gt;</code></li><li>配置loader  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 处理其他资源(字体、音视频等等)</span></span><br><span class="line"><span class="attr">exclude</span>: <span class="regexp">/\.(html|js|css|less|jpg|png|gif)/</span>, <span class="comment">//排除的文件</span></span><br><span class="line"><span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line"><span class="attr">options</span>: &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;[hash:10].[ext]&#x27;</span>, <span class="comment">//命名</span></span><br><span class="line"><span class="attr">outputPath</span>: <span class="string">&#x27;media&#x27;</span> <span class="comment">//输出路径</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>运行指令：webpack</li></ul><h3 id="10-devServer">10. devServer</h3><ul><li><p>安装webpack-dev-server</p><ul><li>npm install webpack-dev-server --save-dev</li></ul></li><li><p>详细配置见官网：指南 -&gt; 开发环境 -&gt; 使用webpack-dev-server</p></li><li><p>修改webpack配置对象，追加devServer配置（注意不是loader中追加）</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//devServer配置(开发模式所特有的配置)</span></span><br><span class="line"><span class="attr">devServer</span>: &#123;</span><br><span class="line"><span class="attr">contentBase</span>: <span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;build&#x27;</span>),<span class="comment">//本地打包文件的位置</span></span><br><span class="line"><span class="attr">port</span>: <span class="number">3000</span>, <span class="comment">//端口号</span></span><br><span class="line"><span class="attr">open</span>: <span class="literal">true</span> <span class="comment">//自动打开浏览器</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改package.json中scripts指令</p><ul><li><code>&quot;dev&quot;: &quot;webpack-dev-server&quot;</code>,</li></ul></li><li><p>运行指令：npm run dev 或者 yarn dev</p></li></ul><hr/><blockquote><p>至此，你已经完成了用webpack搭建一个简单的开发环境，但这套配置只适用于开发过程中调试代码，项目上线并不能运用这套配置，因为你还有很多的问题没有处理，比如：css还不是单独的文件，css、js还有很多兼容性问题等等，接下来我们开始去搭建生产环境。</p></blockquote><h3 id="生产环境准备：">生产环境准备：</h3><p>1.新建config文件夹，重命名webpack.config.js为webpack.dev.js，放入config文件夹<br>2.复制webpack.dev.js，重命名为webpack.prod.js,删除其中的devServer配置，因为这是开发环境特有的，生产环境是不需要的<br>3.修改package.json中scripts指令：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack-dev-server --config ./config/webpack.dev.js&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack --config ./config/webpack.prod.js&quot;</span></span><br></pre></td></tr></table></figure><p>4.修改output中path为：<code>path: resolve(__dirname, '../build')</code></p><h3 id="1-提取css为单独文件">1. 提取css为单独文件</h3><ul><li><p>安装插件</p><ul><li>npm install mini-css-extract-plugin -D</li></ul></li><li><p>引入插件</p><ul><li>const MiniCssExtractPlugin = require(“mini-css-extract-plugin”);</li></ul></li><li><p>配置loader</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入mini-css-extract-plugin，用于提取css为单独文件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>);</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 处理less资源</span></span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line">    <span class="attr">use</span>: [</span><br><span class="line">      <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">      <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">      <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 处理css资源</span></span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line"><span class="attr">use</span>: [</span><br><span class="line">      <span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>,</span><br><span class="line">      <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">//提取css为单独文件</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line"><span class="comment">// 对输出的css文件进行重命名</span></span><br><span class="line"><span class="attr">filename</span>: <span class="string">&#x27;css/built.css&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>运行指令</p><ul><li>npm run build</li></ul></li><li><p>备注：由于在提取了独立的文件，要从外部引入，所以可能会有路径问题，解决方案是在output配置中，添加：<code>publicPath:'/'</code> publicPath根据实际情况自行调整,若上线运行值为：/imgs，若本地右键运行值为：/build/imgs</p></li></ul><h3 id="2-css兼容性处理">2. css兼容性处理</h3><ul><li>安装loader<ul><li>npm install postcss postcss-loader postcss-preset-env -D</li></ul></li><li>因为css和less样式文件都要进行兼容性处理，所以我们定义好一个通用的配置：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置一个commonCssLoader，处理less和css时都会使用</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line"><span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="comment">//提取css为单独的文件</span></span><br><span class="line"><span class="string">&#x27;css-loader&#x27;</span>, <span class="comment">//将css文件变成commonjs模块加载js中，里面内容是样式字符串</span></span><br><span class="line">&#123;</span><br><span class="line"> <span class="comment">//注意：想让postcss-loader工作，还需在package.json中定义browserslist配置兼容程度</span></span><br><span class="line"> <span class="attr">loader</span>: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">          <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">ident</span>: <span class="string">&#x27;postcss&#x27;</span>,</span><br><span class="line">          <span class="attr">plugins</span>: <span class="function">() =&gt;</span> [<span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>)()]</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>修改css-loader和less-loader配置</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="comment">// 处理css资源</span></span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line"><span class="attr">use</span>: [...commonCssLoader]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 处理less资源</span></span><br><span class="line"><span class="attr">test</span>: <span class="regexp">/\.less$/</span>,</span><br><span class="line"><span class="attr">use</span>: [...commonCssLoader, <span class="string">&#x27;less-loader&#x27;</span>]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><p>配置package.json，在其中追加browserslist配置，通过配置加载指定的css兼容性样式</p>  <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="comment">// 开发环境</span></span><br><span class="line"><span class="attr">&quot;development&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;last 1 chrome version&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;last 1 firefox version&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;last 1 safari version&quot;</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="comment">// 生产环境：默认是生产环境</span></span><br><span class="line"><span class="attr">&quot;production&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;&gt;0.2%&quot;</span><span class="punctuation">,</span> <span class="comment">//兼容市面上99.8%的浏览器</span></span><br><span class="line"><span class="string">&quot;not dead&quot;</span><span class="punctuation">,</span> <span class="comment">//&quot;死去&quot;的浏览器不做兼容，例如IE8</span></span><br><span class="line"><span class="string">&quot;not op_mini all&quot;</span><span class="punctuation">,</span><span class="comment">//不做opera浏览器mini版的兼容</span></span><br><span class="line"><span class="string">&quot;ie 10&quot;</span> <span class="comment">//兼容IE10</span></span><br><span class="line"><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>备注1: browserslist 是一套描述产品目标运行环境的工具，它被广泛用在各种涉及浏览器/移动端的兼容性支持工具中，详细配置规则参考：<a href="https://github.com/browserslist/browserslist">https://github.com/browserslist/browserslist</a></p></li><li><p>备注2：若出现版本不兼容，或配置不正确的错误，那么需更换依赖包版本：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i less-<span class="symbol">loader@</span><span class="number">5</span> postcss-<span class="symbol">loader@</span><span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p>运行指令：</p><ul><li>npm run build</li></ul></li></ul><h3 id="3-js语法检查">3. js语法检查</h3><ul><li><p>概述：对js基本语法错误/隐患，进行提前检查</p></li><li><p>安装loader</p><ul><li>npm install eslint-loader eslint</li></ul></li><li><p>安装检查规则库：</p><ul><li>npm install eslint-config-airbnb-base  eslint-plugin-import</li></ul></li><li><p>备注:eslint-config-airbnb-base定制了一套标准的、常用的js语法检查规则，推荐使用</p></li><li><p>配置loader</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">       <span class="comment">// 对js进行语法检查</span></span><br><span class="line">       <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">       <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">       <span class="comment">// 优先执行</span></span><br><span class="line">       <span class="attr">enforce</span>: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">       <span class="attr">loader</span>: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">       <span class="attr">options</span>: &#123;</span><br><span class="line">         <span class="attr">fix</span>: <span class="literal">true</span> <span class="comment">//若有问题自动修复，重要！！！！</span></span><br><span class="line">      &#125;</span><br><span class="line">&#125;      </span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>修改package.json</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;eslintConfig&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;airbnb-base&quot;</span>, <span class="comment">//直接使用airbnb-base提供的规则</span></span><br><span class="line">  <span class="string">&quot;env&quot;</span>: &#123;</span><br><span class="line">   <span class="string">&quot;browser&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行指令：webpack</p></li><li><p>备注：若出现：warning  Unexpected console statement  no-console警告，意思是不应该在项目中写console.log(),若想忽略，就在要忽略检查代码的上方输入一行注释：// eslint-disable-next-line即可。</p></li></ul><h3 id="4-js语法转换">4. js语法转换</h3><ul><li><p>概述：将浏览器不能识别的新语法转换成原来识别的旧语法，做浏览器兼容性处理</p></li><li><p>安装loader</p><ul><li>npm install babel-loader @babel/core @babel/preset-env --save-dev</li></ul></li><li><p>配置loader</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">  <span class="attr">rules</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="attr">use</span>: &#123;</span><br><span class="line">        <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">        <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="attr">presets</span>: [<span class="string">&#x27;@babel/preset-env&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行指令：webpack</p></li></ul><h3 id="5-js兼容性处理">5. js兼容性处理</h3><ul><li><p>安装包</p><ul><li>npm install @babel/polyfill</li></ul></li><li><p>使用</p>  <figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- app.js</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@babel/polyfill&#x27;</span>; <span class="comment">// 包含ES6的高级语法的转换</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="6-压缩html、压缩js">6. 压缩html、压缩js</h3><ul><li>直接修改webpack.prod.js中的model为production即可。</li><li>备注：若设置了模式为production，必须在new HtmlWebpackPlugin时添加配置minify: false：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">    <span class="comment">// 以当前文件为模板创建新的HtML(1. 结构和原来一样 2. 会自动引入打包的资源)</span></span><br><span class="line">    <span class="attr">template</span>: <span class="string">&#x27;./src/index.html&#x27;</span>, </span><br><span class="line">    <span class="attr">minify</span>: <span class="literal">false</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><h3 id="7-压缩css">7.压缩css</h3><ul><li><p>安装插件</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="built_in">optimize</span>-css-assets-webpack-plugin --<span class="built_in">save</span>-dev </span><br></pre></td></tr></table></figure></li><li><p>引入插件</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">const OptimizeCssAssetsPlugin</span> = require(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>配置插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">OptimizeCssAssetsPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">cssProcessorPluginOptions</span>: &#123;</span><br><span class="line">    <span class="attr">preset</span>: [<span class="string">&#x27;default&#x27;</span>, &#123; <span class="attr">discardComments</span>: &#123; <span class="attr">removeAll</span>: <span class="literal">true</span> &#125; &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>以上就是webpack生产环境的配置，可以生成打包后的文件。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git命令</title>
      <link href="/posts/501.html"/>
      <url>/posts/501.html</url>
      
        <content type="html"><![CDATA[<h2 id="git">git</h2><div class="note info no-icon flat"><p>Git是一个分布式的版本控制系统。<br>GitHub是一个基于Git做版本控制的代码托管平台。类似的还有Gitee, BitBucket等。</p></div><blockquote><p>在Windows上使用Git，需要下载 Git for windows 软件，在官网下载，速度比较慢，可以找相关资源网站去下载<br>MINGW32 / MINGW64<br>可以去下面的网站下载<br><a href="http://npm.taobao.org/mirrors/git-for-windows/">http://npm.taobao.org/mirrors/git-for-windows/</a></p></blockquote><h2 id="初次使用">初次使用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line"><span class="comment"># 初始化git仓库。先进入到要初始化的仓库的文件夹，再执行此命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#第一次使用时，需要配置 用户名和邮箱等：</span></span><br><span class="line">git config --global user.name <span class="string">&quot;填入自己的用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;填入自己的邮箱地址&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git reflog    用来记录你的每一次命令</span><br><span class="line">gitk [filename]查看特定文件的历史修改记录</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="1-git-config">1. git config</h2><blockquote><p>Git 一共有3个配置文件：</p><ul><li>仓库级的配置文件：在仓库的 <code>.git/.gitconfig</code>，该配置文件只对所在的仓库有效。</li><li>全局配置文件：Mac 系统在  <code>~/.gitconfig</code>，Windows 系统在 <code>C:\Users\&lt;用户名&gt;\.gitconfig</code>。</li><li>系统级的配置文件：在 Git的安装目录下（Mac 系统下安装目录在 <code>/usr/local/git</code>）的 etc 文件夹中的 <code>gitconfig</code>。</li></ul></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">git config</span><br><span class="line"><span class="comment"># 查看当前git仓库的配置信息</span></span><br><span class="line">git config --get remote.origin.url</span><br><span class="line"><span class="comment"># 查看远程仓库地址</span></span><br><span class="line">git config -l</span><br><span class="line"><span class="comment"># 查看当前git环境详细配置</span></span><br><span class="line">git config --list</span><br><span class="line"><span class="comment"># 和上面的是一样的效果。</span></span><br><span class="line">git config &lt;key&gt;</span><br><span class="line"><span class="comment"># 检查Git的某一项设置，使用上面查出来的key</span></span><br><span class="line">git config --system --list</span><br><span class="line"><span class="comment"># 查看系统配置</span></span><br><span class="line">git config --global --list</span><br><span class="line"><span class="comment"># 查看当前用户global配置</span></span><br><span class="line"></span><br><span class="line">第一次使用时，需要配置 用户名和邮箱等：</span><br><span class="line">git config --global user.name <span class="string">&quot;填入自己的用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;填入自己的邮箱地址&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="2-git-clone">2. git clone</h2><p>从远程仓库克隆一个版本库到本地。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 默认在当前目录下创建和版本库名相同的文件夹并下载版本到该文件夹下</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 指定本地仓库的目录</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt; &lt;本地目录&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># -b 指定要克隆的分支，默认是master分支</span></span><br><span class="line">$ git <span class="built_in">clone</span> &lt;远程仓库的网址&gt; -b &lt;分支名称&gt; &lt;本地目录&gt;</span><br></pre></td></tr></table></figure><h2 id="3-git-init">3. git init</h2><p>初始化项目所在目录，初始化后会在当前目录下出现一个名为 .git 的目录。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化本地仓库，在当前目录下生成 .git 文件夹</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-git-status">4. git status</h2><p>查看本地仓库的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看本地仓库的状态</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以简短模式查看本地仓库的状态</span></span><br><span class="line"><span class="comment"># 会显示两列，第一列是文件的状态，第二列是对应的文件</span></span><br><span class="line"><span class="comment"># 文件状态：A 新增，M 修改，D 删除，?? 未添加到Git中</span></span><br><span class="line">$ git status -s</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-git-add">5. git add</h2><p>把要提交的文件的信息添加到暂存区中。当使用 git commit 时，将依据暂存区中的内容来进行文件的提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把指定的文件添加到暂存区中</span></span><br><span class="line">$ git add &lt;文件路径&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有修改、已删除的文件到暂存区中</span></span><br><span class="line">$ git add -u [&lt;文件路径&gt;]</span><br><span class="line">$ git add --update [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有修改、已删除、新增的文件到暂存区中，省略 &lt;文件路径&gt; 即为当前目录</span></span><br><span class="line">$ git add -A [&lt;文件路径&gt;]</span><br><span class="line">$ git add --all [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有修改、已删除但没有提交的文件，进入一个子命令系统</span></span><br><span class="line">$ git add -i [&lt;文件路径&gt;]</span><br><span class="line">$ git add --interactive [&lt;文件路径&gt;]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="6-git-commit">6. git commit</h2><p>将暂存区中的文件提交到本地仓库中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把暂存区中的文件提交到本地仓库，调用文本编辑器输入该次提交的描述信息</span></span><br><span class="line">$ git commit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 把暂存区中的文件提交到本地仓库中并添加描述信息</span></span><br><span class="line">$ git commit -m <span class="string">&quot;&lt;提交的描述信息&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 把所有修改、已删除的文件提交到本地仓库中</span></span><br><span class="line"><span class="comment"># 不包括未被版本库跟踪的文件，等同于先调用了 &quot;git add -u&quot;</span></span><br><span class="line">$ git commit -a -m <span class="string">&quot;&lt;提交的描述信息&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改上次提交的描述信息</span></span><br><span class="line">$ git commit --amend</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="7-git-remote">7. git remote</h2><p>操作远程库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出已经存在的远程仓库</span></span><br><span class="line">$ git remote</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出远程仓库的详细信息，在别名后面列出URL地址</span></span><br><span class="line">$ git remote -v</span><br><span class="line">$ git remote --verbose</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加远程仓库</span></span><br><span class="line">$ git remote add origin  &lt;远程仓库的URL地址&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库的别名</span></span><br><span class="line">$ git remote rename &lt;原远程仓库的别名&gt; &lt;新的别名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定名称的远程仓库</span></span><br><span class="line">$ git remote remove &lt;远程仓库的别名&gt;</span><br><span class="line">$ git remote remove origin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改远程仓库的 URL 地址</span></span><br><span class="line">$ git remote set-url &lt;远程仓库的别名&gt; &lt;新的远程仓库URL地址&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="8-git-pull">8. git pull</h2><p>从远程仓库获取最新版本并合并到本地。<br>首先会执行 git fetch，然后执行 git merge，把获取的分支的 HEAD 合并到当前分支</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从远程仓库获取最新版本。</span></span><br><span class="line">$ git pull</span><br><span class="line"><span class="comment">#  用master举例</span></span><br><span class="line">$ git pull origin master</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9-git-push">9. git push</h2><p>把本地仓库的提交推送到远程仓库。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 把本地仓库的分支推送到远程仓库的指定分支</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line">$ git push origin master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的远程仓库的分支</span></span><br><span class="line">$ git push &lt;远程仓库的别名&gt; :&lt;远程分支名&gt;</span><br><span class="line">$ git push &lt;远程仓库的别名&gt; --delete &lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-git-branch">10. git branch</h2><p>操作 Git 的分支命令。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出本地的所有分支，当前所在分支以 &quot;*&quot; 标出</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出本地的所有分支并显示最后一次提交，当前所在分支以 &quot;*&quot; 标出</span></span><br><span class="line">$ git branch -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新分支，新的分支基于上一次提交建立</span></span><br><span class="line">$ git branch &lt;分支名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改分支名称</span></span><br><span class="line"><span class="comment"># 如果不指定原分支名称则为当前所在分支</span></span><br><span class="line">$ git branch -m [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="line"><span class="comment"># 强制修改分支名称</span></span><br><span class="line">$ git branch -M [&lt;原分支名称&gt;] &lt;新的分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除指定的本地分支</span></span><br><span class="line">$ git branch -d &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强制删除指定的本地分支</span></span><br><span class="line">$ git branch -D &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="11-git-checkout">11. git checkout</h2><p>检出命令，用于创建、切换分支等。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到已存在的指定分支</span></span><br><span class="line">$ git checkout &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换到指定的分支，保留所有的提交记录</span></span><br><span class="line"><span class="comment"># 等同于 &quot;git branch&quot; 和 &quot;git checkout&quot; 两个命令合并</span></span><br><span class="line">$ git checkout -b &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建并切换到指定的分支，删除所有的提交记录</span></span><br><span class="line">$ git checkout --orphan &lt;分支名称&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换掉本地的改动，新增的文件和已经添加到暂存区的内容不受影响</span></span><br><span class="line">$ git checkout &lt;文件路径&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023前端面试系列— HTML &amp;&amp; CSS篇</title>
      <link href="/posts/100.html"/>
      <url>/posts/100.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言">前言</h2><div class="note info no-icon flat"><p>本文是我的前端面试系列系列导航，其他章节内容可点击链接查看：</p><ol><li><a href="https://www.cameliia.top/posts/100.html">2023前端面试系列–HTML &amp; CSS 篇</a> ⇦当前位置🪂</li><li><a href="https://www.cameliia.top/posts/101.html">2023前端面试系列-- JS 篇</a></li><li><a href="https://www.cameliia.top/posts/102.html">2023前端面试系列–vue篇</a></li><li><a href="https://www.cameliia.top/posts/103.html">2023前端面试系列–TS篇</a></li><li><a href="https://www.cameliia.top/posts/104.html">2023前端面试系列–React篇</a></li><li><a href="https://www.cameliia.top/posts/105.html">2023前端面试系列–网络篇</a></li><li><a href="https://www.cameliia.top/posts/106.html">2023前端面试系列–浏览器篇</a></li></ol></div><h1>HTML</h1><h2 id="HTML5-新特性、语义化">HTML5 新特性、语义化</h2><ol><li><p><strong>概念</strong>：</p><p>HTML5的语义化指的是<code>合理正确的使用语义化的标签来创建页面结构</code>。【正确的标签做正确的事】</p></li><li><p><strong>语义化标签</strong>：</p><p>header nav main article section aside footer</p></li><li><p><strong>语义化的优点</strong>:</p><ul><li>在<code>没CSS样式的情况下，页面整体也会呈现很好的结构效果</code></li><li><code>代码结构清晰</code>，易于阅读，</li><li><code>利于开发和维护</code> 方便其他设备解析（如屏幕阅读器）根据语义渲染网页。</li><li><code>有利于搜索引擎优化（SEO）</code>，搜索引擎爬虫会根据不同的标签来赋予不同的权重</li></ul></li></ol><h2 id="HTML5新特性有哪些">HTML5新特性有哪些</h2><ul><li>语义化标签: header、footer、section、nav、aside、article</li><li>增强型表单：input 的多个 type</li><li>表单控件，calendar、date、time、email、url、search</li><li>新增表单元素：datalist、keygen、output</li><li>新增表单属性：placehoder、required、min 和 max</li><li>音视频处理API(audio,video)</li><li>canvas / webGL</li><li>拖拽释放(Drag and drop)</li><li>history API</li><li>requestAnimationFrame</li><li>地理位置(Geolocation)API</li><li>webSocket</li><li>web存储 localStorage、SessionStorage</li><li>新事件：onresize、ondrag、onscroll、onmousewheel、onerror、onplay、onpause</li></ul><h1>CSS3</h1><h2 id="CSS3新特性">CSS3新特性</h2><ul><li>圆角 （border-radius:8px）</li><li>新增各种CSS选择器、伪类 （经常用到 :nth-child）</li><li>阴影<br>文字阴影: text-shadow: 2px 2px 2px #000;(水平阴影，垂直阴影，模糊距离，阴影颜色) 盒子阴影: box-shadow: 10px 10px 5px #999</li><li>边框 border-image: url(border.png);</li><li>文字渲染 （Text-decoration）<br>转化为简写属性，可设置text-decoration-color, text-decoration-style,<br>text-decoration-line三个属性，默认值为currentcolor solid none。</li><li>透明色 &amp; 透明度（opacity）</li><li>旋转 （transform）</li><li>旋转 rotate，缩放 scale，倾斜 skew，平移 translate</li><li>动画(animation) &amp; 过渡效果(transition)</li><li>新的布局方式，<br>如 多列布局 multi-columns 、 弹性布局 flexible box 与 网格布局 grid layouts</li><li>线性渐变（gradient）</li><li>多背景（background-image可以设置多个url或linear-gradient）</li><li>媒体查询(@media MDN) (可以看看这个)</li><li>边框可以设置图片（border-image）</li><li>过渡</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*所有属性从原始值到制定值的一个过渡，运动曲线ease,运动时间0.5秒*/</span> </span><br><span class="line">transition：all,.5s</span><br></pre></td></tr></table></figure><ul><li>动画</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//animation：动画名称，一个周期花费时间，运动曲线（默认ease），动画延迟（默认0），播放次数（默认1），是否反向播放动画（默认normal），是否暂停动画（默认running）</span></span><br><span class="line"><span class="comment">/*执行一次logo2-line动画，运动时间2秒，运动曲线为 linear*/</span></span><br><span class="line"><span class="attr">animation</span>: logo2-line 2s linear;</span><br></pre></td></tr></table></figure><ul><li>形状转换</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//transform:适用于2D或3D转换的元素</span></span><br><span class="line"><span class="comment">//transform-origin：转换元素的位置（围绕那个点进行转换）。默认(x,y,z)：(50%,50%,0)</span></span><br><span class="line"><span class="attr">transform</span>:<span class="title function_">translate</span>(30px,30px);</span><br><span class="line"><span class="attr">transform</span>:<span class="title function_">rotate</span>(30deg);</span><br><span class="line"><span class="attr">transform</span>:<span class="title function_">scale</span>(<span class="number">.8</span>);</span><br></pre></td></tr></table></figure><ul><li>选择器:nth-of-type()</li></ul><h2 id="CSS-选择器及优先级">CSS 选择器及优先级</h2><p><strong>选择器</strong></p><ul><li>id选择器(#myid)</li><li>类选择器(.myclass)</li><li>属性选择器(a[rel=“external”])</li><li>伪类选择器(a:hover, li:nth-child)</li><li>标签选择器(div, h1,p)</li><li>相邻选择器（h1 + p）</li><li>子选择器(ul &gt; li)</li><li>后代选择器(li a)</li><li>通配符选择器(*)</li></ul><p><strong>优先级：</strong></p><ul><li><code>!important</code></li><li>内联样式（1000）</li><li>ID选择器（0100）</li><li>类选择器/属性选择器/伪类选择器（0010）</li><li>元素选择器/伪元素选择器（0001）</li><li>关系选择器/通配符选择器（0000）</li></ul><p>带!important 标记的样式属性优先级最高； 样式表的来源相同时：<br><code>!important &gt; 行内样式&gt;ID选择器 &gt; 类选择器 &gt; 标签 &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</code></p><h2 id="渐进增强与优雅降级的理解及区别">渐进增强与优雅降级的理解及区别</h2><p><strong>渐进增强（Progressive Enhancement）：</strong><br>一开始就针对低版本浏览器进行构建页面，完成基本的功能，然后再针对高级浏览器进行效果、交互、追加功能达到更好的体验。</p><p><strong>优雅降级（Graceful Degradation）：</strong><br>一开始就构建站点的完整功能，然后针对浏览器测试和修复。比如一开始使用 CSS3 的特性构建了一个应用，然后逐步针对各大浏览器进行 hack 使其可以在低版本浏览器上正常浏览。<br><strong>两者区别</strong><br>1、广义：<br>其实要定义一个基准线，在此之上的增强叫做渐进增强，在此之下的兼容叫优雅降级<br>2、狭义：<br>渐进增强一般说的是使用CSS3技术，在不影响老浏览器的正常显示与使用情形下来增强体验，而优雅降级则是体现html标签的语义，以便在js/css的加载失败/被禁用时，也不影响用户的相应功能。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 例子 */</span></span><br><span class="line"><span class="selector-class">.transition</span> &#123; <span class="comment">/*渐进增强写法*/</span></span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">     -moz-<span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">       -o-<span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">          <span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.transition</span> &#123; <span class="comment">/*优雅降级写法*/</span></span><br><span class="line">          <span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">       -o-<span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">     -moz-<span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">  -webkit-<span class="attribute">transition</span>: all .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="常见的兼容性问题">常见的兼容性问题</h2><ol><li><p>不同浏览器的标签默认的margin和padding不一样。*{margin:0;padding:0;}</p></li><li><p>IE6双边距bug：块属性标签float后，又有横行的margin情况下，在IE6显示margin比设置的大。hack：display:inline;将其转化为行内属性。</p></li><li><p>设置较小高度标签（一般小于10px），在IE6，IE7中高度超出自己设置高度。hack：给超出高度的标签设置overflow:hidden;或者设置行高line-height 小于你设置的高度。</p></li><li><p>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示,可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决。</p></li><li><p>超链接访问过后hover样式就不出现了，被点击访问过的超链接样式不再具有hover和active了。解决方法是改变CSS属性的排列顺序:L-V-H-A ( love hate ): a:link {} a:visited {} a:hover {} a:active {}</p></li></ol><h2 id="position-属性的值有哪些及其区别">position 属性的值有哪些及其区别</h2><p><strong>固定定位 <code>fixed</code></strong>： 元素的位置相对于浏览器窗口是固定位置，即使窗口是滚动的它也不会移动。Fixed 定 位使元素的位置与文档流无关，因此不占据空间。 Fixed 定位的元素和其他元素重叠。</p><p><strong>相对定位 <code>relative</code></strong>： 如果对一个元素进行相对定位，它将出现在它所在的位置上。然后，可以通过设置垂直 或水平位置，让这个元素“相对于”它的起点进行移动。 在使用相对定位时，无论是 否进行移动，元素仍然占据原来的空间。因此，移动元素会导致它覆盖其它框。</p><p><strong>绝对定位 <code>absolute</code></strong>： 绝对定位的元素的位置相对于最近的已定位父元素，如果元素没有已定位的父元素，那 么它的位置相对于。absolute 定位使元素的位置与文档流无关，因此不占据空间。 absolute 定位的元素和其他元素重叠。</p><p><strong>粘性定位 <code>sticky</code></strong>： 元素先按照普通文档流定位，然后相对于该元素在流中的 flow root（BFC）和 containing block（最近的块级祖先元素）定位。而后，元素定位表现为在跨越特定阈值前为相对定 位，之后为固定定位。</p><p><strong>默认定位 <code>Static</code></strong>： 默认值。没有定位，元素出现在正常的流中（忽略 top, bottom, left, right 或者 z-index 声 明）。 inherit: 规定应该从父元素继承 position 属性的值。</p><h2 id="box-sizing属性">box-sizing属性</h2><p><strong><code>box-sizing</code></strong> 规定两个并排的带边框的框，语法为 box-sizing：content-box/border-box/inherit</p><p><strong><code>content-box</code></strong>：宽度和高度分别应用到元素的内容框，在宽度和高度之外绘制元素的内边距和边框。【标准盒子模型】</p><p><strong><code>border-box</code></strong>：为元素设定的宽度和高度决定了元素的边框盒。【IE 盒子模型】</p><p><strong><code>inherit</code></strong>：继承父元素的 box-sizing 值。</p><h2 id="CSS-盒子模型">CSS 盒子模型</h2><p>CSS 盒模型本质上是一个盒子，它包括：边距，边框，填充和实际内容。CSS 中的盒子模型包括 IE 盒子模型和标准的 W3C 盒子模型。<br>在标准的盒子模型中，<code>width 指 content 部分的宽度</code>。<br>在 IE 盒子模型中，<code>width 表示 content+padding+border 这三个部分的宽度</code>。</p><p>故在计算盒子的宽度时存在差异：</p><p><strong>标准盒模型：</strong> 一个块的总宽度 = width+margin(左右)+padding(左右)+border(左右)</p><p><strong>怪异盒模型：</strong> 一个块的总宽度 = width+margin（左右）（既 width 已经包含了 padding 和 border 值）</p><h2 id="BFC（块级格式上下文）">BFC（块级格式上下文）</h2><p><strong>BFC的概念</strong></p><p><strong><code>BFC</code></strong> 是 <code>Block Formatting Context </code>的缩写，即块级格式化上下文。<code>BFC</code>是CSS布局的一个概念，是一个独立的渲染区域，规定了内部box如何布局， 并且这个区域的子元素不会影响到外面的元素，其中比较重要的布局规则有内部 box 垂直放置，计算 BFC 的高度的时候，浮动元素也参与计算。</p><p><strong>BFC的原理布局规则</strong></p><ul><li>内部的Box会在<code>垂直方向</code>，一个接一个地放置</li><li>Box<code>垂直方向的距离由margin决定</code>。属于同一个BFC的两个相邻Box的margin会发生重叠</li><li>每个元素的margin box的左边， 与包含块border box的左边相接触(对于从左往右的格式化，否则相反</li><li>BFC的区域<code>不会与float box重叠</code></li><li>BFC是一个独立容器，容器里面的<code>子元素不会影响到外面的元素</code></li><li>计算BFC的高度时，<code>浮动元素也参与计算高度</code></li><li>元素的类型和<code>display属性，决定了这个Box的类型</code>。不同类型的Box会参与不同的<code>Formatting Context</code>。</li></ul><p><strong>如何创建BFC？</strong></p><ul><li>根元素，即HTML元素</li><li>float的值不为none</li><li>position为absolute或fixed</li><li>display的值为inline-block、table-cell、table-caption</li><li>overflow的值不为visible</li></ul><p><strong>BFC的使用场景</strong></p><ul><li>去除边距重叠现象</li><li>清除浮动（让父元素的高度包含子浮动元素）</li><li>避免某元素被浮动元素覆盖</li><li>避免多列布局由于宽度计算四舍五入而自动换行</li></ul><h2 id="让一个元素水平垂直居中">让一个元素水平垂直居中</h2><ul><li><p><strong>水平居中</strong></p><ul><li><p>对于 行内元素 : <code>text-align: center</code>;</p></li><li><p>对于确定宽度的块级元素：</p><p>（1）width和margin实现。<code>margin: 0 auto</code>;</p><p>（2）绝对定位和margin-left: margin-left: (父width - 子width）/2, 前提是父元素position: relative</p></li><li><p>对于宽度未知的块级元素</p><p>（1）<code>table标签配合margin左右auto实现水平居中</code>。使用table标签（或直接将块级元素设值为 display:table），再通过给该标签添加左右margin为auto。</p><p>（2）inline-block实现水平居中方法。display：inline-block和text-align:center实现水平居中。</p><p>（3）<code>绝对定位+transform</code>，translateX可以移动本身元素的50%。</p><p>（4）flex布局使用<code>justify-content:center</code></p></li></ul></li><li><p><strong>垂直居中</strong></p><ol><li>利用 <code>line-height</code> 实现居中，这种方法适合纯文字类</li><li>通过设置父容器 相对定位 ，子级设置 <code>绝对定位</code>，标签通过margin实现自适应居中</li><li>弹性布局 flex :父级设置display: flex; 子级设置margin为auto实现自适应居中</li><li>父级设置相对定位，子级设置绝对定位，并且通过位移 transform 实现</li><li><code>table 布局</code>，父级通过转换成表格形式，<code>然后子级设置 vertical-align 实现</code>。（需要注意的是：vertical-align: middle使用的前提条件是内联元素以及display值为table-cell的元素）。</li></ol></li></ul><h2 id="隐藏页面中某个元素的方法">隐藏页面中某个元素的方法</h2><p>1.<code>opacity：0</code>，该元素隐藏起来了，但不会改变页面布局，并且，如果该元素已经绑定 一些事件，如click 事件，那么点击该区域，也能触发点击事件的</p><p>2.<code>visibility：hidden</code>，该元素隐藏起来了，但不会改变页面布局，但是不会触发该元素已 经绑定的事件 ，隐藏对应元素，在文档布局中仍保留原来的空间（重绘）</p><p>3.<code>display：none</code>，把元素隐藏起来，并且会改变页面布局，可以理解成在页面中把该元素。 不显示对应的元素，在文档布局中不再分配空间（回流+重绘）</p><blockquote><p>该问题会引出 回流和重绘</p></blockquote><h2 id="用CSS实现三角符号">用CSS实现三角符号</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*记忆口诀：盒子宽高均为零，三面边框皆透明。 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot; &quot;</span>;</span><br><span class="line">    <span class="attribute">border-right</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-top</span>: <span class="number">100px</span> solid <span class="number">#ff0</span>;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">100px</span> solid transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="页面布局">页面布局</h2><h3 id="1-Flex-布局">1.Flex 布局</h3><p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。</p><p>Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;,用来为盒状模型提供最大的灵活性。指定容器 display: flex 即可。 简单的分为容器属性和元素属性。</p><p>容器的属性：</p><ul><li>flex-direction：决定主轴的方向（即子 item 的排列方法）flex-direction: row | row-reverse | column | column-reverse;</li><li>flex-wrap：决定换行规则 flex-wrap: nowrap | wrap | wrap-reverse;</li><li>flex-flow： .box { flex-flow: || ; }</li><li>justify-content：对其方式，水平主轴对齐方式</li><li>align-items：对齐方式，竖直轴线方向</li><li>align-content</li></ul><p>项目的属性（元素的属性）：</p><ul><li>order 属性：定义项目的排列顺序，顺序越小，排列越靠前，默认为 0</li><li>flex-grow 属性：定义项目的放大比例，即使存在空间，也不会放大</li><li>flex-shrink 属性：定义了项目的缩小比例，当空间不足的情况下会等比例的缩小，如果 定义个 item 的 flow-shrink 为 0，则为不缩小</li><li>flex-basis 属性：定义了在分配多余的空间，项目占据的空间。</li><li>flex：是 flex-grow 和 flex-shrink、flex-basis 的简写，默认值为 0 1 auto。</li><li>align-self：允许单个项目与其他项目不一样的对齐方式，可以覆盖</li><li>align-items，默认属 性为 auto，表示继承父元素的 align-items 比如说，用 flex 实现圣杯布局</li></ul><h3 id="2-Rem-布局">2.Rem 布局</h3><p>首先 Rem 相对于根(html)的 font-size 大小来计算。简单的说它就是一个相对单例 如:font-size:10px;,那么（1rem = 10px）了解计算原理后首先解决怎么在不同设备上设置 html 的 font-size 大小。其实 rem 布局的本质是等比缩放，一般是基于宽度。</p><p><strong>优点</strong>：可以快速适用移动端布局，字体，图片高度<br><strong>缺点</strong>：</p><ul><li>目前 ie 不支持，对 pc 页面来讲使用次数不多；\</li><li>数据量大：所有的图片，盒子都需要我们去给一个准确的值；才能保证不同机型的适配；\</li><li>在响应式布局中，必须通过 js 来动态控制根元素 font-size 的大小。也就是说 css 样式和 js 代码有一定的耦合性。且必须将改变 font-size 的代码放在 css 样式之前。</li></ul><h3 id="3-百分比布局">3.百分比布局</h3><p>通过百分比单位 &quot; % &quot; 来实现响应式的效果。通过百分比单位可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果。 直观的理解，我们可能会认为子元素的百分比完全相对于直接父元素，height 百分比相 对于 height，width 百分比相对于 width。 padding、border、margin 等等不论是垂直方向还是水平方向，都相对于直接父元素的 width。 除了 border-radius 外，还有比如 translate、background-size 等都是相对于自身的。</p><p><strong>缺点</strong>：</p><ul><li>计算困难</li><li>各个属性中如果使用百分比，相对父元素的属性并不是唯一的。造成我们使用百分比单位容易使布局问题变得复杂。</li></ul><h3 id="4-浮动布局">4.浮动布局</h3><p>浮动布局:当元素浮动以后可以向左或向右移动，直到它的外边缘碰到包含它的框或者另外一个浮动元素的边框为止。元素浮动以后会脱离正常的文档流，所以文档的普通流中的框就变的好像浮动元素不存在一样。</p><p><strong>优点</strong></p><p>这样做的优点就是在图文混排的时候可以很好的使文字环绕在图片周围。另外当元素浮动了起来之后，它有着块级元素的一些性质例如可以设置宽高等，但它与inline-block还是有一些区别的，第一个就是关于横向排序的时候，float可以设置方向而inline-block方向是固定的；还有一个就是inline-block在使用时有时会有空白间隙的问题</p><p><strong>缺点</strong></p><p>最明显的缺点就是浮动元素一旦脱离了文档流，就无法撑起父元素，<code>会造成父级元素高度塌陷</code>。</p><h2 id="如何使用rem或viewport进行移动端适配">如何使用rem或viewport进行移动端适配</h2><p><strong>rem适配原理：</strong></p><p>改变了一个元素在不同设备上占据的css像素的个数</p><p>rem适配的优缺点</p><ul><li>优点：没有破坏完美视口</li><li>缺点：px值转换rem太过于复杂(下面我们使用less来解决这个问题)</li></ul><p><strong>viewport适配的原理</strong></p><p>viewport适配方案中，每一个元素在不同设备上占据的css像素的个数是一样的。但是css像素和物理像素的比例是不一样的，等比的</p><p>viewport适配的优缺点</p><ul><li>在我们设计图上所量取的大小即为我们可以设置的像素大小，即所量即所设</li><li>缺点破坏完美视口</li></ul><h2 id="清除浮动的方式">清除浮动的方式</h2><ul><li>添加额外标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;parent&quot;</span>&gt;</span></span><br><span class="line">    //添加额外标签并且添加clear属性</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;clear:both&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    //也可以加一个br标签</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>父级添加overflow属性，或者设置高度</li><li>建立伪类选择器清除浮动</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在css中添加:after伪元素</span></span><br><span class="line">.<span class="property">parent</span>:after&#123;</span><br><span class="line">    <span class="comment">/* 设置添加子元素的内容是空 */</span></span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="comment">/* 设置添加子元素为块级元素 */</span></span><br><span class="line">    <span class="attr">display</span>: block;</span><br><span class="line">    <span class="comment">/* 设置添加的子元素的高度0 */</span></span><br><span class="line">    <span class="attr">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="comment">/* 设置添加子元素看不见 */</span></span><br><span class="line">    <span class="attr">visibility</span>: hidden;</span><br><span class="line">    <span class="comment">/* 设置clear：both */</span></span><br><span class="line">    <span class="attr">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CSS预处理器Sass、Less、Stylus的区别">CSS预处理器Sass、Less、Stylus的区别</h2><p>什么事CSS预处理器?</p><p>CSS预处理器是一种语言用来为CSS增加一些变成的特性，无需考虑浏览器兼容问题，例如你可以在CSS中使用变量，简单的程序逻辑、函数等在编程语言中的一些基本技巧，可以让CSS更加简洁，适应性更强，代码更直观等诸多好处<br>基本语法区别</p><p>**<code>Sass</code>**是以.sass为扩展名，<code>Less</code>是以.less为扩展名，<code>Stylus</code>是以.styl为扩展名<br>变量的区别</p><p><code>Sass</code> 变量必须是以<code>$</code>开头的，然后变量和值之间使用冒号（：）隔开，和css属性是一样的。<br><code>Less</code> 变量是以<code>@</code>开头的，其余sass都是一样的。<br><code>Stylus</code> 对变量是没有任何设定的，可以是以$开头或者任意字符，而且变量之间可以冒号，空格隔开，但是在stylus中不能用@开头<br>三种预处理器都有：嵌套、运算符、颜色函数、导入、继承、混入。Stylus还有一些高级特性。例如循环、判断等</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023前端面试系列— Vue篇</title>
      <link href="/posts/102.html"/>
      <url>/posts/102.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p>本文是我的前端面试系列系列导航，其他章节内容可点击链接查看：</p><ol><li><a href="https://www.cameliia.top/posts/100.html">2023前端面试系列–HTML &amp; CSS 篇</a> ⇦当前位置🪂</li><li><a href="https://www.cameliia.top/posts/101.html">2023前端面试系列-- JS 篇</a></li><li><a href="https://www.cameliia.top/posts/102.html">2023前端面试系列–vue篇</a></li><li><a href="https://www.cameliia.top/posts/103.html">2023前端面试系列–TS篇</a></li><li><a href="https://www.cameliia.top/posts/104.html">2023前端面试系列–React篇</a></li><li><a href="https://www.cameliia.top/posts/105.html">2023前端面试系列–网络篇</a></li><li><a href="https://www.cameliia.top/posts/106.html">2023前端面试系列–浏览器篇</a></li></ol></div><h1>Vue 面试专题</h1><h2 id="简述MVVM">简述MVVM</h2><p><strong>什么是MVVM？</strong></p><p><code>视图模型双向绑定</code>，是<code>Model-View-ViewModel</code>的缩写，也就是把<code>MVC</code>中的<code>Controller</code>演变成<code>ViewModel。Model</code>层代表数据模型，<code>View</code>代表UI组件，<code>ViewModel</code>是<code>View</code>和<code>Model</code>层的桥梁，数据会绑定到<code>viewModel</code>层并自动将数据渲染到页面中，视图变化的时候会通知<code>viewModel</code>层更新数据。以前是操作DOM结构更新视图，现在是<code>数据驱动视图</code>。</p><p><strong>MVVM的优点：</strong></p><p>1.<code>低耦合</code>。视图（View）可以独立于Model变化和修改，一个Model可以绑定到不同的View上，当View变化的时候Model可以不变化，当Model变化的时候View也可以不变；<br>2.<code>可重用性</code>。你可以把一些视图逻辑放在一个Model里面，让很多View重用这段视图逻辑。<br>3.<code>独立开发</code>。开发人员可以专注于业务逻辑和数据的开发(ViewModel)，设计人员可以专注于页面设计。<br>4.<code>可测试</code>。</p><h2 id="Vue底层实现原理">Vue底层实现原理</h2><p>vue.js是采用数据劫持结合发布者-订阅者模式的方式，通过Object.defineProperty()来劫持各个属性的setter和getter，在数据变动时发布消息给订阅者，触发相应的监听回调<br>Vue是一个典型的MVVM框架，模型（Model）只是普通的javascript对象，修改它则试图（View）会自动更新。这种设计让状态管理变得非常简单而直观</p><p><strong>Observer（数据监听器）</strong> : Observer的核心是通过Object.defineProprtty()来监听数据的变动，这个函数内部可以定义setter和getter，每当数据发生变化，就会触发setter。这时候Observer就要通知订阅者，订阅者就是Watcher</p><p><strong>Watcher（订阅者）</strong> : Watcher订阅者作为Observer和Compile之间通信的桥梁，主要做的事情是：</p><ol><li>在自身实例化时往属性订阅器(dep)里面添加自己</li><li>自身必须有一个update()方法</li><li>待属性变动dep.notice()通知时，能调用自身的update()方法，并触发Compile中绑定的回调</li></ol><p><strong>Compile（指令解析器）</strong> : Compile主要做的事情是解析模板指令，将模板中变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加鉴定数据的订阅者，一旦数据有变动，收到通知，更新试图</p><h2 id="谈谈对vue生命周期的理解？">谈谈对vue生命周期的理解？</h2><p>每个<code>Vue</code>实例在创建时都会经过一系列的初始化过程，<code>vue</code>的生命周期钩子，就是说在达到某一阶段或条件时去触发的函数，目的就是为了完成一些动作或者事件</p><ul><li><code>create阶段</code>：vue实例被创建<br><code>beforeCreate</code>: 最初调用触发，创建前，此时data和methods中的数据都还没有初始化，data和events都不能用<br><code>created</code>： 创建完毕，data中有值，未挂载，data和events已经初始化好，data已经具有响应式；在这里可以发送请求</li><li><code>mount阶段</code>： vue实例被挂载到真实DOM节点<br><code>beforeMount</code>：在模版编译之后，渲染之前触发，可以发起服务端请求，去数据，ssr中不可用，基本用不上这个hook<br><code>mounted</code>: 在渲染之后触发，此时可以操作DOM，并能访问组件中的DOM以及$ref,SSR中不可用</li><li><code>update阶段</code>：当vue实例里面的data数据变化时，触发组件的重新渲染<br><code>beforeUpdate</code> :更新前，在数据变化后，模版改变前触发，切勿使用它监听数据变化<br><code>updated</code>：更新后，在数据改变后，模版改变后触发，常用于重渲染案后的打点，性能检测或触发vue组件中非vue组件的更新</li><li><code>destroy阶段</code>：vue实例被销毁<br><code>beforeDestroy</code>：实例被销毁前，组件卸载前触发，此时可以手动销毁一些方法，可以在此时清理事件、计时器或者取消订阅操作<br><code>destroyed</code>:卸载完毕后触发，销毁后，可以做最后的打点或事件触发操作</li></ul><h3 id="组件生命周期">组件生命周期</h3><p>生命周期（父子组件） 父组件beforeCreate --&gt; 父组件created --&gt; 父组件beforeMount --&gt; 子组件beforeCreate --&gt; 子组件created --&gt; 子组件beforeMount --&gt; 子组件 mounted --&gt; 父组件mounted --&gt;父组件beforeUpdate --&gt;子组件beforeDestroy–&gt; 子组件destroyed --&gt; 父组件updated</p><p><strong>加载渲染过程</strong> 父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted</p><p><strong>挂载阶段</strong> 父created-&gt;子created-&gt;子mounted-&gt;父mounted</p><p><strong>父组件更新阶段</strong> 父beforeUpdate-&gt;父updated</p><p><strong>子组件更新阶段</strong> 父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</p><p><strong>销毁阶段</strong> 父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</p><h2 id="computed与watch"><code>computed与watch</code></h2><p><code>computed</code>计算属性，依赖其它属性计算值，内部任一依赖项的变化都会重新执行该函数，计算属性有缓存，多次重复使用计算属性时会从缓存中获取返回值，计算属性必须要有<code>return</code>关键词。<br><code>watch</code>侦听到某一数据的变化从而触发函数。当数据为对象类型时，对象中的属性值变化时需要使用深度侦听<code>deep</code>属性，也可在页面第一次加载时使用立即侦听<code>immdiate</code>属性。</p><p><strong>使用场景</strong> <code>computed</code>：当一个属性受多个属性影响的时候使用，例：购物车商品结算功能 <code>watch</code>：当一条数据影响多条数据的时候使用，例：搜索数据</p><h2 id="Vue-的响应式原理">Vue 的响应式原理</h2><p>Vue 2 中的数据响应式会根据数据类型做不同的处理。如果是对象，则通过<code>Object.defineProperty(obj,key,descriptor)</code>拦截对象属性访问，当数据被访问或改变时，感知并作出反应；如果是数组，则通过覆盖数组原型的方法，扩展它的7个变更方法（push、pop、shift、unshift、splice、sort、reverse），使这些方法可以额外的做更新通知，从而做出响应。</p><p>缺点：</p><ul><li>初始化时的递归遍历会造成性能损失；</li><li>通知更新过程需要维护大量 <code>dep</code> 实例和 <code>watcher</code> 实例，额外占用内存较多；</li><li>新增或删除对象属性无法拦截，需要通过 <code>Vue.set</code> 及 <code>delete </code>这样的 API 才能生效；</li><li>对于ES6中新产生的Map、Set这些数据结构不支持。</li></ul><p>Vue 3 中利用ES6的<code>Proxy</code>机制代理需要响应化的数据。可以同时支持对象和数组，动态属性增、删都可以拦截，新增数据结构均支持，对象嵌套属性运行时递归，用到时才代理，也不需要维护特别多的依赖关系，性能取得很大进步。</p><h2 id="Vue中key的作用？">Vue中key的作用？</h2><p><code>key</code>的作用主要是<code>为了更加高效的更新虚拟 DOM</code>。<br>Vue 判断两个节点是否相同时，主要是判断两者的<code>key</code>和元素类型<code>tag</code>。因此，如果不设置key<br>，它的值就是<code>undefined</code>，则可能永远认为这是两个相同的节点，只能去做更新操作，将造成大量的 DOM 更新操作。</p><h2 id="组件中的data为什么是一个函数？">组件中的data为什么是一个函数？</h2><p>1.一个组件被复用多次的话，也就会创建多个实例。本质上，这些实例用的都是同一个构造函数。<br>2.如果data是对象的话，对象属于引用类型，会影响到所有的实例。所以为了保证组件不同的实例之间data不冲突，data必须是一个函数。</p><h2 id="为什么v-for和v-if不建议用在一起">为什么v-for和v-if不建议用在一起</h2><p>1.当 v-for 和 v-if 处于同一个节点时，v-for 的优先级比 v-if 更高，这意味着 v-if 将分别重复运行于每个 v-for 循环中。如果要遍历的数组很大，而真正要展示的数据很少时，这将造成很大的性能浪费<br>2.这种场景建议使用 computed，先对数据进行过滤</p><p>注意：3.x 版本中 <code>v-if</code> 总是优先于 <code>v-for</code> 生效。由于语法上存在歧义，建议避免在同一元素上同时使用两者。比起在模板层面管理相关逻辑，更好的办法是通过创建计算属性筛选出列表，并以此创建可见元素。</p><h2 id="React-Vue-项目中-key-的作用">React/Vue 项目中 key 的作用</h2><ol><li><p>key的作用是为了在diff算法执行时更快的找到对应的节点，<code>提高diff速度，更高效的更新虚拟DOM</code>;</p><p>vue和react都是采用diff算法来对比新旧虚拟节点，从而更新节点。在vue的diff函数中，会根据新节点的key去对比旧节点数组中的key，从而找到相应旧节点。如果没找到就认为是一个新增节点。而如果没有key，那么就会采用遍历查找的方式去找到对应的旧节点。一种一个map映射，另一种是遍历查找。相比而言。map映射的速度更快。</p></li><li><p>为了在数据变化时强制更新组件，以避免<code>“就地复用”</code>带来的副作用。</p><p>当 Vue.js 用 <code>v-for</code> 更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序，而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。重复的key会造成渲染错误。</p></li></ol><h3 id="数组扁平化转换">数组扁平化转换</h3><p>在说到模版编译的时候，有可能会提到数组的转换，一般就用递归处理<br>将 [1,2,3,[4,5]] 转换成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    children:[</span><br><span class="line">        &#123;</span><br><span class="line">            value:<span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            value:<span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            value:<span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            children:[</span><br><span class="line">                &#123;</span><br><span class="line">                    value:<span class="number">4</span></span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    value:<span class="number">5</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 测试数组</span></span><br><span class="line"><span class="keyword">var</span> arr =[<span class="number">1</span>,<span class="number">2</span>，<span class="number">3</span>，[<span class="number">4</span>,<span class="number">5</span>]];</span><br><span class="line"><span class="comment">// 转换函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">convert</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="comment">//准备一个接收结果数组</span></span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="comment">// 遍历传入的 arr 的每一项</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="comment">//如果遍历到的数字是number，直接放进入</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> arr[i] == <span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">            result.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">value</span>:arr[i]</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr[i]))&#123;</span><br><span class="line">            <span class="comment">//如果遍历到这个项目是数组，那么就递归</span></span><br><span class="line">            result.<span class="title function_">push</span>(&#123;</span><br><span class="line">                <span class="attr">children</span>: <span class="title function_">convert</span>(arr[i])</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> o = <span class="title function_">convert</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br></pre></td></tr></table></figure><h2 id="说说你对-SPA-单页面的理解，它的优缺点分别是什么？">说说你对 SPA 单页面的理解，它的优缺点分别是什么？</h2><p>SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 <code>HTML</code>、<code>JavaScript</code> 和 <code>CSS</code>。一旦页面加载完成，<code>SPA</code> 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。</p><ol><li>优点：</li></ol><ul><li>用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；</li><li>基于上面一点，SPA 相对对服务器压力小；</li><li>前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理；</li></ul><ol start="2"><li>缺点：</li></ol><ul><li>初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 <code>JavaScript</code>、<code>CSS</code> 统一加载，部分页面按需加载；</li><li>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</li><li>SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 <code>SEO</code> 上其有着天然的弱势。</li></ul><h2 id="vue组件的通信方式">vue组件的通信方式</h2><ol><li><p>父子组件通信：<br>父向子传递数据是通过<code>props</code>，子向父是通过<code>$emit</code>触发事件；通过父链/子链也可以通信（<code>$parent/$children</code>）；<br><code>ref</code>也可以访问组件实例；<code>provide/inject</code>；<code>$attrs/$listeners</code>。</p></li><li><p>兄弟组件通信：<br>全局事件总线<code>EventBus</code>、<code>Vuex</code>。<br><code>$emit</code>/<code>$on</code> 自定义事件 兄弟组件通信<br><code>Event Bus</code> 实现跨组件通信 <code>Vue.prototype.$bus = new Vue()</code> 自定义事件</p></li><li><p>跨层级组件通信：<br>全局事件总线<code>EventBus</code>、<code>Vuex</code>、<code>provide/inject。</code></p></li></ol><h2 id="emit-后面的两个参数是什么">$emit 后面的两个参数是什么</h2><p>1、父组件可以使用 props 把数据传给子组件。<br>2、子组件可以使用 $emit,让父组件监听到自定义事件 。</p><p><code>vm.$emit( event, arg );</code>//触发当前实例上的事件，要传递的参数<br><code>vm.$on( event, fn );</code>//监听event事件后运行 fn；</p><p>子组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;train-city&quot;&gt;</span><br><span class="line">    &lt;h3&gt;父组件传给子组件的toCity:&#123;&#123;sendData&#125;&#125;&lt;/h3&gt; </span><br><span class="line">    &lt;br/&gt;&lt;button @click=&#x27;select(`大连`)&#x27;&gt;点击此处将‘大连’发射给父组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;trainCity&#x27;,</span><br><span class="line">    props:[&#x27;sendData&#x27;], // 用来接收父组件传给子组件的数据</span><br><span class="line">    methods:&#123;</span><br><span class="line">      select(val) &#123;</span><br><span class="line">        let data = &#123;</span><br><span class="line">          cityName: val</span><br><span class="line">        &#125;;</span><br><span class="line">        this.$emit(&#x27;showCityName&#x27;,data);//select事件触发后，自动触发showCityName事件</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;div&gt;父组件的toCity&#123;&#123;toCity&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;train-city @showCityName=&quot;updateCity&quot; :sendData=&quot;toCity&quot;&gt;&lt;/train-city&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name:&#x27;index&#x27;,</span><br><span class="line">    components: &#123;&#125;,</span><br><span class="line">    data () &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        toCity:&quot;北京&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      updateCity(data)&#123;//触发子组件城市选择-选择城市的事件</span><br><span class="line">        this.toCity = data.cityName;//改变了父组件的值</span><br><span class="line">        console.log(&#x27;toCity:&#x27;+this.toCity)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="nextTick的实现">nextTick的实现</h2><p><strong>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</strong>。<br><code>nextTick</code>是 Vue 提供的一个全局 API，由于 Vue 的异步更新策略，导致我们对数据修改后不会直接体现在 DOM 上，此时如果想要立即获取更新后的 DOM 状态，就需要借助该方法。<br>Vue 在更新<code>DOM</code>时是异步执行的。当数据发生变化，Vue 将开启一个异步更新队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 <code>watcher</code> 被多次触发，只会被推入队列一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。<code>nextTick</code>方法会在队列中加入一个回调函数，确保该函数在前面的 DOM 操作完成后才调用。</p><h3 id="使用场景：">使用场景：</h3><ul><li>如果想要在修改数据后立刻得到更新后的DOM结构，可以使用<code>Vue.nextTick()</code></li><li>在<code>created</code>生命周期中进行<code>DOM</code>操作</li></ul><h2 id="使用过插槽么？用的是具名插槽还是匿名插槽或作用域插槽">使用过插槽么？用的是具名插槽还是匿名插槽或作用域插槽</h2><p>vue中的插槽是一个非常好用的东西slot说白了就是一个占位的 在vue当中插槽包含三种一种是默认插槽（匿名）一种是具名插槽还有一种就是作用域插槽 匿名插槽就是没有名字的只要默认的都填到这里具名插槽指的是具有名字的</p><h2 id="keep-alive的实现">keep-alive的实现</h2><p>keep-alive是Vue.js的一个内置组件。它能够不活动的组件实例保存在内存中，而不是直接将其销毁，它是一个抽象组件，不会被渲染到真实DOM中，也不会出现在父组件链中。</p><p>作用：实现组件缓存，保持这些组件的状态，以避免反复渲染导致的性能问题。 需要缓存组件 频繁切换，不需要重复渲染</p><p>场景：tabs标签页 后台导航，vue性能优化</p><p>原理：<code>Vue.js</code>内部将<code>DOM</code>节点抽象成了一个个的<code>VNode</code>节点，<code>keep-alive</code>组件的缓存也是基于<code>VNode</code>节点的而不是直接存储<code>DOM</code>结构。它将满足条件<code>（pruneCache与pruneCache）</code>的组件在<code>cache</code>对象中缓存起来，在需要重新渲染的时候再将<code>vnode</code>节点从<code>cache</code>对象中取出并渲染。</p><h2 id="keep-alive-的属性">keep-alive 的属性</h2><p>它提供了include与exclude两个属性，允许组件有条件地进行缓存。</p><p>include定义缓存白名单，keep-alive会缓存命中的组件；exclude定义缓存黑名单，被命中的组件将不会被缓存；max定义缓存组件上限，超出上限使用LRU的策略置换缓存数据。</p><p>在动态组件中的应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive :include=<span class="string">&quot;whiteList&quot;</span> :exclude=<span class="string">&quot;blackList&quot;</span> :max=<span class="string">&quot;amount&quot;</span>&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;currentComponent&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p>在vue-router中的应用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive :include=<span class="string">&quot;whiteList&quot;</span> :exclude=<span class="string">&quot;blackList&quot;</span> :max=<span class="string">&quot;amount&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p>vue 中完整示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">coma</span> <span class="attr">v-if</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">coma</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">comb</span> <span class="attr">v-else</span>=<span class="string">&quot;test&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">comb</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;test=handleClick&quot;</span>&gt;</span>请点击<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        handleClick () &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">test</span> = !<span class="variable language_">this</span>.<span class="property">test</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参考:<br><a href="https://cn.vuejs.org/v2/api/#keep-alive">keep-alive 官网</a></p><p><a href="https://www.jianshu.com/p/9523bb439950">keep-alive实现原理</a></p><p><a href="https://blog.csdn.net/weixin_38189842/article/details/103999989">Vue keep-alive的实现原理</a></p><h2 id="mixin">mixin</h2><p><code>mixin</code>（混入）， 它提供了一种非常灵活的方式，来分发 Vue 组件中的可复用功能。<br>使用场景： 不同组件中经常会用到一些相同或相似的代码，这些代码的功能相对独立。可以通过mixin 将相同或相似的代码提出来。<br>缺点：<br>变量来源不明确<br>多 mixin 可能会造成命名冲突（解决方式：Vue 3的组合API）<br>mixin 和组件出现多对多的关系，使项目复杂度变高。<br>在Vue 中，修饰符处理了许多 DOM 事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理。Vue中修饰符分为以下几种：</p><h2 id="Vue-中的修饰符有哪些">Vue 中的修饰符有哪些</h2><p>在Vue 中，修饰符处理了许多 DOM 事件的细节，让我们不再需要花大量的时间去处理这些烦恼的事情，而能有更多的精力专注于程序的逻辑处理。Vue中修饰符分为以下几种：</p><ol><li>表单修饰符<br><code>lazy</code> 填完信息，光标离开标签的时候，才会将值赋予给value，也就是在<code>change</code>事件之后再进行信息同步。<br><code>number</code> 自动将用户输入值转化为数值类型，但如果这个值无法被<code>parseFloat</code>解析，则会返回原来的值。<br><code>trim</code>自动过滤用户输入的首尾空格，而中间的空格不会被过滤。</li><li>事件修饰符<br><code>stop</code> 阻止了事件冒泡，相当于调用了<code>event.stopPropagation</code>方法。<br><code>prevent</code> 阻止了事件的默认行为，相当于调用了<code>event.preventDefault</code>方法。<br><code>self</code> 只当在 <code>event.target</code> 是当前元素自身时触发处理函数。<br><code>once</code> 绑定了事件以后只能触发一次，第二次就不会触发。<br><code>capture</code>使用事件捕获模式，即元素自身触发的事件先在此处处理，然后才交由内部元素进行处理。<br><code>passive</code> 告诉浏览器你不想阻止事件的默认行为。<br><code>native</code> 让组件变成像html内置标签那样监听根元素的原生事件，否则组件上使用 <code>v-on</code> 只会监听自定义事件。</li><li>鼠标按键修饰符<br><code>left</code> 左键点击。<br><code>right</code> 右键点击。<br><code>middle</code> 中键点击。</li><li>键值修饰符<br>键盘修饰符是用来修饰键盘事件（<code>onkeyup</code>，<code>onkeydown</code>）的，有如下：<br><code>keyCode</code>存在很多，但vue为我们提供了别名，分为以下两种：</li></ol><p>普通键（enter、tab、delete、space、esc、up…）<br>系统修饰键（ctrl、alt、meta、shift…）</p><h2 id="如何实现-v-model-双向绑定">如何实现 v-model,双向绑定</h2><ol><li>概念：<br>Vue 中双向绑定是一个指令<code>v-model</code>，可以绑定一个响应式数据到视图，同时视图的变化能改变该值。<code>v-model</code>是语法糖，默认情况下相当于:<code>value</code>和<code>@input</code>，使用<code>v-model</code>可以减少大量繁琐的事件处理代码，提高开发效率。</li><li>使用：<br>通常在表单项上使用<code>v-model</code>，还可以在自定义组件上使用，表示某个值的输入和输出控制。</li><li>原理：<br><code>v-model</code>是一个指令，双向绑定实际上是Vue 的编译器完成的，通过输出包含<code>v-model</code>模版的组件渲染函数，实际上还是<code>value</code>属性的绑定及<code>input</code>事件监听，事件回调函数中会做相应变量的更新操作。</li></ol><h2 id="Vue-Router中的常用路由模式和原理？">Vue Router中的常用路由模式和原理？</h2><ol><li>hash 模式：<br><code>location.hash</code>的值就是url中 # 后面的东西。它的特点在于：hash虽然出现url中，但不会被包含在HTTP请求中，对后端完全没有影响，因此改变hash不会重新加载页面。<br>可以为hash的改变添加监听事件<code>window.addEventListener(&quot;hashchange&quot;, funcRef, false)</code>，每一次改变<code>hash (window.location.hash)</code>，都会在浏览器的访问历史中增加一个记录，利用hash的以上特点，就可以实现前端路由更新视图但不重新请求页面的功能了。<br>特点：兼容性好但是不美观</li><li>history 模式：<br>利用 HTML5 History Interface 中新增的<code>pushState()</code>和<code>replaceState()</code>方法。<br>这两个方法应用于浏览器的历史记录栈，在当前已有的<code>back</code>、<code>forward</code>、<code>go</code> 的基础上，他们提供了对历史记录进行修改的功能。<br>这两个方法有个共同点：当调用他们修改浏览器历史记录栈后，虽然当前url改变了，但浏览器不会刷新页面，这就为单页面应用前端路由“更新视图但不重新请求页面”提供了基础<br>特点：虽然美观，但是刷新会出现 404 需要后端进行配置。</li></ol><h3 id="动态路由？">动态路由？</h3><p>很多时候，我们需要将给定匹配模式的路由映射到同一个组件，这种情况就需要定义动态路由。例如，我们有一个 User组件，对于所有 ID 各不相同的用户，都要使用这个组件来渲染。那么，我们可以在 vue-router 的路由路径中使用动态路径参数（dynamic segment）来达到这个效果：<code>&#123;path: '/user/:id', compenent: User&#125;</code>，其中:id就是动态路径参数。</p><h2 id="Vuex的理解及使用场景">Vuex的理解及使用场景</h2><p>Vuex 是一个专为 Vue 应用程序开发的状态管理模式。每一个 Vuex 应用的核心就是 store（仓库）。</p><ol><li>Vuex 的状态存储是响应式的；当 Vue 组件从 store 中读取状态的时候，</li></ol><p>若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新 2. 改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation， 这样使得我们可以方便地跟踪每一个状态的变化 Vuex主要包括以下几个核心模块：</p><ol><li><code>State</code>：定义了应用的状态数据</li><li><code>Getter</code>：在 store 中定义“getter”（可以认为是 store 的计算属性）， getter 的返回值会根据它的依赖被缓存起来， 且只有当它的依赖值发生了改变才会被重新计算</li><li><code>Mutation</code>：是唯一更改 store 中状态的方法，且必须是同步函数</li><li><code>Action</code>：用于提交 mutation，而不是直接变更状态，可以包含任意异步操作</li><li><code>Module</code>：允许将单一的 Store 拆分为多个 store 且同时保存在单一的状态树中</li></ol><h2 id="页面刷新后Vuex-状态丢失怎么解决？">页面刷新后Vuex 状态丢失怎么解决？</h2><p>Vuex 只是在内存中保存状态，刷新后就会丢失，如果要持久化就需要保存起来。</p><ol><li><code>localStorage</code>就很合适，提交<code>mutation</code>的时候同时存入<code>localStorage</code>，在<code>store</code>中把值取出来作为<code>state</code>的初始值即可。</li><li>也可以使用第三方插件，推荐使用<code>vuex-persist</code>插件，它是为 <code>Vuex</code> 持久化储存而生的一个插件，不需要你手动存取<code>storage</code>，而是直接将状态保存至 <code>cookie</code> 或者 <code>localStorage</code>中。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7249773a1634f779c48f3f0ffabf968~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><h2 id="了解哪些-Vue-的性能优化方法？">了解哪些 Vue 的性能优化方法？</h2><ol><li>路由懒加载。有效拆分应用大小，访问时才异步加载。</li><li>keep-alive缓存页面。避免重复创建组件实例，且能保留缓存组件状态。</li><li>v-for遍历避免同时使用v-if。实际上在 Vue 3 中已经是一个错误用法了。</li><li>长列表性能优化，可采用虚拟列表。</li><li>v-once。不再变化的数据使用v-once。</li><li>事件销毁。组件销毁后把全局变量和定时器销毁。</li><li>图片懒加载。</li><li>第三方插件按需引入。</li><li>子组件分割。较重的状态组件适合拆分。</li><li>服务端渲染。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023前端面试系列— JavaScript篇</title>
      <link href="/posts/101.html"/>
      <url>/posts/101.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p>本文是我的前端面试系列系列导航，其他章节内容可点击链接查看：</p><ol><li><a href="https://www.cameliia.top/posts/100.html">2023前端面试系列–HTML &amp; CSS 篇</a> ⇦当前位置🪂</li><li><a href="https://www.cameliia.top/posts/101.html">2023前端面试系列-- JS 篇</a></li><li><a href="https://www.cameliia.top/posts/102.html">2023前端面试系列–vue篇</a></li><li><a href="https://www.cameliia.top/posts/103.html">2023前端面试系列–TS篇</a></li><li><a href="https://www.cameliia.top/posts/104.html">2023前端面试系列–React篇</a></li><li><a href="https://www.cameliia.top/posts/105.html">2023前端面试系列–网络篇</a></li><li><a href="https://www.cameliia.top/posts/106.html">2023前端面试系列–浏览器篇</a></li></ol></div><h1>JavaScript</h1><h2 id="JS中的8种数据类型及区别">JS中的8种数据类型及区别</h2><p>包括值类型(基本对象类型)和引用类型(复杂对象类型)</p><p><strong>基本类型(值类型)：</strong> <code>Number</code>(数字),<code>String</code>(字符串),<code>Boolean</code>(布尔),<code>Symbol</code>(符号),<code>null</code>(空),<code>undefined</code>(未定义)在内存中占据固定大小，保存在栈内存中</p><p><strong>引用类型(复杂数据类型)：</strong> <code>Object</code>(对象)、<code>Function</code>(函数)。其他还有<code>Array</code>(数组)、<code>Date</code>(日期)、<code>RegExp</code>(正则表达式)、特殊的基本包装类型(String、Number、Boolean) 以及单体内置对象(Global、Math)等 引用类型的值是对象 保存在堆内存中，栈内存存储的是对象的变量标识符以及对象在堆内存中的存储地址。</p><p><strong>使用场景：</strong></p><p><code>Symbol</code>：使用Symbol来作为对象属性名(key)  利用该特性，把一些不需要对外操作和访问的属性使用Symbol来定义</p><p><code>BigInt</code>：由于在 Number 与 BigInt 之间进行转换会损失精度，因而建议仅在值可能大于253 时使用 BigInt 类型，并且不在两种类型之间进行相互转换。</p><h2 id="JS中的数据类型检测方案">JS中的数据类型检测方案</h2><h3 id="1-typeof">1.typeof</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="number">1</span>);               <span class="comment">// number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">true</span>);            <span class="comment">// boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="string">&#x27;mc&#x27;</span>);            <span class="comment">// string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>)           <span class="comment">// function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;);    <span class="comment">// function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="variable language_">console</span>.<span class="title function_">log</span>());   <span class="comment">// function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> []);              <span class="comment">// object </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> &#123;&#125;);              <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">null</span>);            <span class="comment">// object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>);       <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>优点：能够快速区分基本数据类型</p><p>缺点：不能将Object、Array和Null区分，都返回object</p><h3 id="2-instanceof">2.instanceof</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>);                    <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="literal">true</span> <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>);                <span class="comment">// false </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;str&#x27;</span> <span class="keyword">instanceof</span> <span class="title class_">String</span>);                <span class="comment">// false  </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([] <span class="keyword">instanceof</span> <span class="title class_">Array</span>);                    <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Function</span>);       <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(&#123;&#125; <span class="keyword">instanceof</span> <span class="title class_">Object</span>);                   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>优点：能够区分Array、Object和Function，适合用于判断自定义的类实例对象</p><p>缺点：Number，Boolean，String基本数据类型不能判断</p><h3 id="3-Object-prototype-toString-call">3.Object.prototype.toString.call()</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> toString = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toString.<span class="title function_">call</span>(<span class="number">1</span>));      <span class="comment">//[object Number]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toString.<span class="title function_">call</span>(<span class="literal">true</span>));   <span class="comment">//[object Boolean]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toString.<span class="title function_">call</span>(<span class="string">&#x27;mc&#x27;</span>));   <span class="comment">//[object String]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toString.<span class="title function_">call</span>([]));     <span class="comment">//[object Array]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toString.<span class="title function_">call</span>(&#123;&#125;));     <span class="comment">//[object Object]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toString.<span class="title function_">call</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;)); <span class="comment">//[object Function]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toString.<span class="title function_">call</span>(<span class="literal">undefined</span>));  <span class="comment">//[object Undefined]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(toString.<span class="title function_">call</span>(<span class="literal">null</span>)); <span class="comment">//[object Null]</span></span><br></pre></td></tr></table></figure><p>优点：精准判断数据类型</p><p>缺点：写法繁琐不容易记，推荐进行封装后使用</p><h3 id="instanceof-的作用">instanceof 的作用</h3><p>用于判断一个引用类型是否属于某构造函数；</p><p>还可以在继承关系中用来判断一个实例是否属于它的父类型。</p><h3 id="instanceof-和-typeof-的区别：">instanceof 和 typeof 的区别：</h3><p>typeof在对值类型number、string、boolean 、null 、 undefined、 以及引用类型的function的反应是精准的；但是，对于对象{ } 、数组[ ] 、null 都会返回object</p><p>为了弥补这一点，instanceof 从原型的角度，来判断某引用属于哪个构造函数，从而判定它的数据类型。</p><h2 id="ES6新增特性">ES6新增特性:</h2><ol><li>const let</li><li>箭头函数(没有this指向,会从作用域上一级继承this)</li><li>解构赋值</li><li>形参默认值</li><li>类 class(Es5之前用proptype代替class)</li><li>扩展运算符</li><li>模板字符串</li><li>promise(重点)</li></ol><h2 id="var-let-const">var &amp;&amp; let &amp;&amp; const</h2><p>ES6之前创建变量用的是var,之后创建变量用的是let/const</p><p><strong>三者区别</strong>：</p><ol><li>var定义的变量，<code>没有块的概念，可以跨块访问</code>, 不能跨函数访问。<br>let定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问。<br>const用来定义常量，使用时必须初始化(即必须赋值)，只能在块作用域里访问，且不能修改。</li><li>var可以<code>先使用，后声明</code>，因为存在变量提升；let必须先声明后使用。</li><li>var是允许在相同作用域内<code>重复声明同一个变量</code>的，而let与const不允许这一现象。</li><li>在全局上下文中，基于let声明的全局变量和全局对象GO（window）没有任何关系 ;<br>var声明的变量会和GO有映射关系；</li><li><code>会产生暂时性死区</code>：</li></ol><blockquote><p>暂时性死区是浏览器的bug：检测一个未被声明的变量类型时，不会报错，会返回undefined<br>如：console.log(typeof a) //undefined<br>而：console.log(typeof a)//未声明之前不能使用<br>let a</p></blockquote><ol start="6"><li>let /const/function会把当前所在的大括号(除函数之外)作为一个全新的块级上下文，应用这个机制，在开发项目的时候，遇到循环事件绑定等类似的需求，无需再自己构建闭包来存储，只要基于let的块作用特征即可解决</li></ol><h2 id="作用域和作用域链">作用域和作用域链</h2><p>创建函数的时候，已经声明了当前函数的作用域==&gt;<code>当前创建函数所处的上下文</code>。如果是在全局下创建的函数就是<code>[[scope]]:EC(G)</code>，函数执行的时候，形成一个全新的私有上下文<code>EC(FN)</code>，供字符串代码执行(进栈执行)</p><p>定义：简单来说作用域就是变量与函数的可访问范围，<code>由当前环境与上层环境的一系列变量对象组成</code><br>1.全局作用域：代码在程序的任何地方都能被访问，window 对象的内置属性都拥有全局作用域。<br>2.函数作用域：在固定的代码片段才能被访问</p><p>作用：作用域最大的用处就是<code>隔离变量</code>，不同作用域下同名变量不会有冲突。</p><p><strong>作用域链参考链接</strong>一般情况下，变量到 创建该变量 的函数的作用域中取值。但是如果在当前作用域中没有查到，就会向上级作用域去查，直到查到全局作用域，这么一个查找过程形成的链条就叫做作用域链。</p><h2 id="闭包的两大作用：保存-保护">闭包的两大作用：保存/保护</h2><ul><li><p><strong>闭包的概念</strong></p><p>函数执行时形成的私有上下文EC(FN)，正常情况下，代码执行完会出栈后释放;但是特殊情况下，如果当前私有上下文中的某个东西被上下文以外的事物占用了，则上下文不会出栈释放，从而形成不销毁的上下文。 函数执行函数执行过程中，会形成一个全新的私有上下文，可能会被释放，可能不会被释放，不论释放与否，他的作用是：</p></li></ul><p>（1）保护：划分一个独立的代码执行区域，在这个区域中有自己私有变量存储的空间，保护自己的私有变量不受外界干扰（操作自己的私有变量和外界没有关系）；</p><p>（2）保存：如果当前上下文不被释放【只要上下文中的某个东西被外部占用即可】，则存储的这些私有变量也不会被释放，可以供其下级上下文中调取使用，相当于把一些值保存起来了；</p><p>我们把函数执行形成私有上下文，来保护和保存私有变量机制称为<code>闭包</code>。</p><blockquote><p>闭包是指有权访问另一个函数作用域中的变量的函数–《JavaScript高级程序设计》</p></blockquote><p><strong>稍全面的回答</strong>： 在js中变量的作用域属于函数作用域, 在函数执行完后,作用域就会被清理,内存也会随之被回收,但是由于闭包函数是建立在函数内部的子函数, 由于其可访问上级作用域,即使上级函数执行完, 作用域也不会随之销毁, 这时的子函数(也就是闭包),便拥有了访问上级作用域中变量的权限,即使上级函数执行完后作用域内的值也不会被销毁。</p><ul><li><p><strong>闭包的特性</strong>：</p><ul><li><p>1、内部函数可以访问定义他们外部函数的参数和变量。(作用域链的向上查找，把外围的作用域中的变量值存储在内存中而不是在函数调用完毕后销毁)设计私有的方法和变量，避免全局变量的污染。</p><p>1.1.闭包是密闭的容器，，类似于set、map容器，存储数据的</p><p>1.2.闭包是一个对象，存放数据的格式为 key-value 形式</p></li><li><p>2、函数嵌套函数</p></li><li><p>3、本质是将函数内部和外部连接起来。优点是可以读取函数内部的变量，让这些变量的值始终保存在内存中，不会在函数被调用之后自动清除</p></li></ul></li><li><p><strong>闭包形成的条件</strong>：</p><ol><li>函数的嵌套</li><li>内部函数引用外部函数的局部变量，延长外部函数的变量生命周期</li></ol></li><li><p><strong>闭包的用途</strong>：</p><ol><li>模仿块级作用域</li><li>保护外部函数的变量 能够访问函数定义时所在的词法作用域(阻止其被回收)</li><li>封装私有化变量</li><li>创建模块</li></ol></li><li><p><strong>闭包应用场景</strong></p></li></ul><blockquote><p>闭包的两个场景，闭包的两大作用：<code>保存/保护</code>。 在开发中, 其实我们随处可见闭包的身影, 即一个事件绑定的回调方法; 发送ajax请求成功|失败的回调;setTimeout的延时回调;或者一个函数内部返回另一个匿名函数,这些都是闭包的应用。</p></blockquote><ul><li><strong>闭包的优点</strong>：延长局部变量的生命周期</li><li><strong>闭包缺点</strong>：会导致函数的变量一直保存在内存中，过多的闭包可能会导致内存泄漏</li></ul><h2 id="JS-中-this-的情况">JS 中 this 的情况</h2><ol><li>普通函数调用：通过函数名()直接调用：<code>this</code>指向<code>全局对象window</code>（注意let定义的变量不是window属性，只有window.xxx定义的才是。即let a =’aaa’; this.a是undefined）</li><li>构造函数调用：函数作为构造函数，用new关键字调用时：<code>this</code>指向<code>新new出的对象</code></li><li>对象函数调用：通过对象.函数名()调用的：<code>this</code>指向<code>这个对象</code></li><li>箭头函数调用：箭头函数里面没有 this ，所以<code>永远是上层作用域this</code>（上下文）</li><li>apply和call调用：函数体内 this 的指向的是 call/apply 方法<code>第一个参数</code>，若为空默认是指向全局对象window。</li><li>函数作为数组的一个元素，通过数组下标调用的：this指向这个数组</li><li>函数作为window内置函数的回调函数调用：this指向window（如setInterval setTimeout 等）</li></ol><h2 id="call-apply-bind-的区别">call/apply/bind 的区别</h2><p>相同：</p><p>1、都是用来改变函数的this对象的指向的。<br>2、第一个参数都是this要指向的对象。<br>3、都可以利用后续参数传参。</p><p>不同：</p><p>apply和call传入的参数列表形式不同。apply 接收 arguments，call接收一串参数列表</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fn</span>.call(obj, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="attribute">fn</span>.apply(obj,<span class="meta"> [1, 2]);</span></span><br></pre></td></tr></table></figure><p>bind：语法和call一模一样，区别在于立即执行还是等待执行，bind不兼容IE6~8<br>bind 主要就是将函数绑定到某个对象，bind()会创建一个函数，返回对应函数便于稍后调用；而apply、call则是立即调用。</p><p>总结：基于Function.prototype上的 <code>apply 、 call 和 bind </code>调用模式，这三个方法都可以显示的指定调用函数的 this 指向。<code>apply</code>接收参数的是数组，<code>call</code>接受参数列表，`` bind<code>方法通过传入一个对象，返回一个</code> this <code>绑定了传入对象的新函数。这个函数的 </code>this<code>指向除了使用</code>new `时会被改变，其他情况下都不会改变。若为空默认是指向全局对象window。</p><h2 id="箭头函数的特性">箭头函数的特性</h2><ol><li><code>箭头函数没有自己的this</code>，会捕获其所在的上下文的this值，作为自己的this值</li><li><code>箭头函数没有constructor</code>，是匿名函数，不能作为构造函数，不能通过new 调用；</li><li><code>没有new.target 属性</code>。在通过new运算符被初始化的函数或构造方法中，new.target返回一个指向构造方法或函数的引用。在普通的函数调用中，new.target 的值是undefined</li><li><code>箭头函数不绑定Arguments 对象</code>。取而代之用rest参数…解决。由于 箭头函数没有自己的this指针，通过 call() 或 apply() 方法调用一个函数时，只能传递参数（不能绑定this），他们的第一个参数会被忽略。（这种现象对于bind方法同样成立）</li><li>箭头函数通过 call()  或   apply() 方法调用一个函数时，只传入了一个参数，对 this 并没有影响。</li><li>箭头函数没有原型属性 Fn.prototype 值为 undefined</li><li>箭头函数不能当做Generator函数,不能使用yield关键字</li></ol><h2 id="原型-原型链">原型 &amp;&amp; 原型链</h2><p><strong>原型关系：</strong></p><ul><li>每个 class都有显示原型 prototype</li><li>每个实例都有隐式原型 <code>__proto__</code></li><li>实例的 <code>__proto__</code> 指向对应 class 的 prototype</li></ul><p>‌ <strong>原型:</strong>  在 JS 中，每当定义一个对象（函数也是对象）时，对象中都会包含一些预定义的属性。其中每个<code>函数对象</code>都有一个<code>prototype</code> 属性，这个属性指向函数的<code>原型对象</code>。</p><blockquote><p>原型链：每一个函数都有proptype属性,内部必有_proto_,当实例化对象访问一个属性的时候,首先会在 自身查找,如找不到,则会向_proto_指向的原型查找,如仍找不到,则会原型中的_proto_指向 上级的原型中查找,直到找到object.proptype._proto_为止(值为null),这种链状称为原型链</p></blockquote><p><strong>特点:</strong>  <code>JavaScript</code>对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</p><h2 id="new运算符的实现机制">new运算符的实现机制</h2><ol><li>首先创建了一个新的<code>空对象</code></li><li><code>设置原型</code>，将对象的原型设置为函数的<code>prototype</code>对象。</li><li>让函数的<code>this</code>指向这个对象，执行构造函数的代码（为这个新对象添加属性）</li><li>判断函数的返回值类型，如果是值类型，返回创建的对象。如果是引用类型，就返回这个引用类型的对象。</li></ol><h2 id="介绍节流防抖原理、区别以及应用">介绍节流防抖原理、区别以及应用</h2><p><code>节流</code>：事件触发后，规定时间内，事件处理函数不能再次被调用。也就是说在规定的时间内，函数只能被调用一次，且是最先被触发调用的那次。</p><p><code>防抖</code>：多次触发事件，事件处理函数只能执行一次，并且是在触发操作结束时执行。也就是说，当一个事件被触发准备执行事件函数前，会等待一定的时间（这时间是码农自己去定义的，比如 1 秒），如果没有再次被触发，那么就执行，如果被触发了，那就本次作废，重新从新触发的时间开始计算，并再次等待 1 秒，直到能最终执行！</p><p><code>使用场景</code>：<br>节流：滚动加载更多、搜索框搜的索联想功能、高频点击、表单重复提交……<br>防抖：搜索框搜索输入，并在输入完以后自动搜索、手机号，邮箱验证输入检测、窗口大小 resize 变化后，再重新渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流函数 一个函数执行一次后，只有大于设定的执行周期才会执行第二次。有个需要频繁触发的函数，出于优化性能的角度，在规定时间内，只让函数触发的第一次生效，后面的不生效。</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn要被节流的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delay规定的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">    <span class="comment">//记录上一次函数触发的时间</span></span><br><span class="line">    <span class="keyword">var</span> lastTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//记录当前函数触发的时间</span></span><br><span class="line">        <span class="keyword">var</span> nowTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="keyword">if</span>(nowTime - lastTime &gt; delay)&#123;</span><br><span class="line">            <span class="comment">//修正this指向问题</span></span><br><span class="line">            fn.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">            <span class="comment">//同步执行结束时间</span></span><br><span class="line">            lastTime = nowTime;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">onscroll</span> = <span class="title function_">throttle</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;scllor事件被触发了&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">&#125;, <span class="number">200</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数  一个需要频繁触发的函数，在规定时间内，只让最后一次生效，前面的不生效</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn要被节流的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delay规定的时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">    <span class="comment">//记录上一次的延时器</span></span><br><span class="line">    <span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="comment">//清除上一次的演示器</span></span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">        <span class="comment">//重新设置新的延时器</span></span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="comment">//修正this指向问题</span></span><br><span class="line">            fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>);</span><br><span class="line">        &#125;, delay); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>).<span class="property">onclick</span> = <span class="title function_">debounce</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按钮被点击了&#x27;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>());</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="setTimeout、Promise、Async-Await-的区别">setTimeout、Promise、Async/Await 的区别</h2><ol><li><p>setTimeout</p><p>settimeout的回调函数放到宏任务队列里，等到执行栈清空以后执行。</p></li><li><p>Promise</p><p>Promise本身是<strong>同步的立即执行函数</strong>， 当在executor中执行resolve或者reject的时候, 此时是异步操作， 会先执行then/catch等，当主栈完成后，才会去调用resolve/reject中存放的方法执行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> promise1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1 end&#x27;</span>)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;settimeout&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br><span class="line"><span class="comment">// 输出顺序: script start-&gt;promise1-&gt;promise1 end-&gt;script end-&gt;promise2-&gt;settimeout</span></span><br></pre></td></tr></table></figure></li><li><p>async/await</p><p>async 函数返回一个 Promise 对象，当函数执行的时候，一旦遇到 await 就会先返回，等到触发的异步操作完成，再执行函数体内后面的语句。可以理解为，是让出了线程，跳出了 async 函数体。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出顺序：script start-&gt;async1 start-&gt;async2-&gt;script end-&gt;async1 end</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Async-Await-如何通过同步的方式实现异步">Async/Await 如何通过同步的方式实现异步</h2><p>Async/Await就是一个<strong>自执行</strong>的generate函数。利用generate函数的特性把异步的代码写成“同步”的形式,第一个请求的返回值作为后面一个请求的参数,其中每一个参数都是一个promise对象.</p><h2 id="EventLoop-事件循环">EventLoop 事件循环</h2><p><code>JS</code>是单线程的，为了防止一个函数执行时间过长阻塞后面的代码，所以会先将同步代码压入执行栈中，依次执行，将异步代码推入异步队列，异步队列又分为宏任务队列和微任务队列，因为宏任务队列的执行时间较长，所以微任务队列要优先于宏任务队列。微任务队列的代表就是，<code>Promise.then</code>，<code>MutationObserver</code>，宏任务的话就是<code>setImmediate setTimeout setInterval</code></p><p>JS运行的环境。一般为浏览器或者Node。 在浏览器环境中，有JS 引擎线程和渲染线程，且两个线程互斥。 Node环境中，只有JS 线程。 不同环境执行机制有差异，不同任务进入不同Event Queue队列。 当主程结束，先执行准备好微任务，然后再执行准备好的宏任务，一个轮询结束。</p><h3 id="浏览器中的事件环（Event-Loop"><strong>浏览器中的事件环（Event Loop)</strong></h3><p>事件环的运行机制是，先会执行栈中的内容，栈中的内容执行后执行微任务，微任务清空后再执行宏任务，先取出一个宏任务，再去执行微任务，然后在取宏任务清微任务这样不停的循环。</p><ul><li><p>eventLoop 是由JS的宿主环境（浏览器）来实现的；</p></li><li><p>事件循环可以简单的描述为以下四个步骤:</p><ol><li>函数入栈，当Stack中执行到异步任务的时候，就将他丢给WebAPIs,接着执行同步任务,直到Stack为空；</li><li>此期间WebAPIs完成这个事件，把回调函数放入队列中等待执行（微任务放到微任务队列，宏任务放到宏任务队列）</li><li>执行栈为空时，Event Loop把微任务队列执行清空；</li><li>微任务队列清空后，进入宏任务队列，取队列的第一项任务放入Stack(栈）中执行，执行完成后，查看微任务队列是否有任务，有的话，清空微任务队列。重复4，继续从宏任务中取任务执行，执行完成之后，继续清空微任务，如此反复循环，直至清空所有的任务。</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/342e581223d2471d9484fc48beb9f8e1~tplv-k3u1fbpfcp-zoom-1.image" alt="事件循环流程"></p></li><li><p>浏览器中的任务源(task):</p><ul><li><code>宏任务(macrotask)</code>：<br>宿主环境提供的，比如浏览器<br>ajax、setTimeout、setInterval、setTmmediate(只兼容ie)、script、requestAnimationFrame、messageChannel、UI渲染、一些浏览器api</li><li><code>微任务(microtask)</code>：<br>语言本身提供的，比如promise.then<br>then、queueMicrotask(基于then)、mutationObserver(浏览器提供)、messageChannel 、mutationObersve</li></ul></li></ul><h3 id="Node-环境中的事件环（Event-Loop"><strong>Node 环境中的事件环（Event Loop)</strong></h3><p><code>Node</code>是基于V8引擎的运行在服务端的<code>JavaScript</code>运行环境，在处理高并发、I/O密集(文件操作、网络操作、数据库操作等)场景有明显的优势。虽然用到也是V8引擎，但由于服务目的和环境不同，导致了它的API与原生JS有些区别，其Event Loop还要处理一些I/O，比如新的网络连接等，所以Node的Event Loop(事件环机制)与浏览器的是不太一样。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e362c1770f62428fbf3faabd99d2a64c~tplv-k3u1fbpfcp-zoom-1.image" alt="2020120317343116.png"> 执行顺序如下：</p><ul><li><code>timers</code>: 计时器，执行setTimeout和setInterval的回调</li><li><code>pending callbacks</code>: 执行延迟到下一个循环迭代的 I/O 回调</li><li><code>idle, prepare</code>: 队列的移动，仅系统内部使用</li><li><code>poll轮询</code>: 检索新的 I/O 事件;执行与 I/O 相关的回调。事实上除了其他几个阶段处理的事情，其他几乎所有的异步都在这个阶段处理。</li><li><code>check</code>: 执行<code>setImmediate</code>回调，setImmediate在这里执行</li><li><code>close callbacks</code>: 执行<code>close</code>事件的<code>callback</code>，一些关闭的回调函数，如：socket.on(‘close’, …)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023前端面试系列— TypeScript篇</title>
      <link href="/posts/103.html"/>
      <url>/posts/103.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p>本文是我的前端面试系列系列导航，其他章节内容可点击链接查看：</p><ol><li><a href="https://www.cameliia.top/posts/100.html">2023前端面试系列–HTML &amp; CSS 篇</a> ⇦当前位置🪂</li><li><a href="https://www.cameliia.top/posts/101.html">2023前端面试系列-- JS 篇</a></li><li><a href="https://www.cameliia.top/posts/102.html">2023前端面试系列–vue篇</a></li><li><a href="https://www.cameliia.top/posts/103.html">2023前端面试系列–TS篇</a></li><li><a href="https://www.cameliia.top/posts/104.html">2023前端面试系列–React篇</a></li><li><a href="https://www.cameliia.top/posts/105.html">2023前端面试系列–网络篇</a></li><li><a href="https://www.cameliia.top/posts/106.html">2023前端面试系列–浏览器篇</a></li></ol></div><h2 id="1、什么是TypeScript？">1、什么是TypeScript？</h2><p>TypeScript是JavaScript的加强版，它给JavaScript添加了可选的静态类型和基于类的面向对象编程，它拓展了JavaScript的语法。</p><p>而且TypeScript不存在跟浏览器不兼容的问题，因为在编译时，它产生的都是JavaScript代码。</p><h3 id="2、TypeScript-和-JavaScript-的区别是什么？">2、TypeScript 和 JavaScript 的区别是什么？</h3><p>Typescript 是 JavaScript 的超集，可以被编译成 JavaScript 代码。 用 JavaScript 编写的合法代码，在 TypeScript 中依然有效。Typescript 是纯面向对象的编程语言，包含类和接口的概念。 程序员可以用它来编写面向对象的服务端或客户端程序，并将它们编译成 JavaScript 代码。</p><p>TypeScript和 JavaScript的关系<br>TypeScript 引入了很多面向对象程序设计的特征，包括：</p><p>interfaces  接口<br>classes  类<br>enumerated types 枚举类型<br>generics 泛型<br>modules 模块<br>主要不同点如下：<br>TS 是一种面向对象编程语言，而 JS 是一种脚本语言（尽管 JS 是基于对象的）。<br>TS 支持可选参数， JS 则不支持该特性。<br>TS 支持静态类型，JS 不支持。<br>TS 支持接口，JS 不支持接口。</p><h3 id="3为什么要用-TypeScript-？">3为什么要用 TypeScript ？</h3><p>TS 在开发时就能给出编译错误， 而 JS 错误则需要在运行时才能暴露。<br>作为强类型语言，你可以明确知道数据的类型。代码可读性极强，几乎每个人都能理解。<br>TS 非常流行，被很多业界大佬使用。像 Asana、Circle CI 和 Slack 这些公司都在用 TS。</p><h3 id="4、TypeScript-和-JavaScript-哪个更好？">4、TypeScript 和 JavaScript 哪个更好？</h3><p>由于 TS 的先天优势，TS 越来越受欢迎。但是TS 最终不可能取代 JS，因为 JS 是 TS 的核心。</p><p>选择 TypeScript 还是 JavaScript 要由开发者自己去做决定。如果你喜欢类型安全的语言，那么推荐你选择 TS。 如果你已经用 JS 好久了，你可以选择走出舒适区学习 TS，也可以选择坚持自己的强项，继续使用 JS。</p><h3 id="5、什么是泛型？">5、什么是泛型？</h3><p>泛型是指在定义函数、接口或类的时候，不预先指定具体的类型，使用时再去指定类型的一种特性。<br>可以把泛型理解为代表类型的参数<br>// 我们希望传入的值是什么类型，返回的值就是什么类型<br>// 传入的值可以是任意的类型，这时候就可以用到 泛型</p><p>// 如果使用 any 的话，就失去了类型检查的意义</p><p>function createArray1(length: any, value: any): Array<any> {<br>let result: any = [];<br>for (let i = 0; i &lt; length; i++) {<br>result[i] = value;<br>}<br>return result;<br>}</p><p>let result = createArray1(3, ‘x’);<br>console.log(result);</p><p>// 最傻的写法：每种类型都得定义一种函数<br>function createArray2(length: number, value: string): Array<string> {<br>let result: Array<string> = [];<br>for (let i = 0; i &lt; length; i++) {<br>result[i] = value;<br>}<br>return result;<br>}</p><p>function createArray3(length: number, value: number): Array<number> {<br>let result: Array<number> = [];<br>for (let i = 0; i &lt; length; i++) {<br>result[i] = value;<br>}<br>return result;<br>}<br>// 或者使用函数重载，写法有点麻烦<br>function createArray4(length: number, value: number): Array<number><br>function createArray4(length: number, value: string): Array<string><br>function createArray4(length: number, value: any): Array<any> {<br>let result: Array<number> = [];<br>for (let i = 0; i &lt; length; i++) {<br>result[i] = value;<br>}<br>return result;<br>}<br>createArray4(6, ‘666’);<br>//使用泛型<br>// 有关联的地方都改成 <T><br>function createArray<T>(length: number, value: T): Array<T> {<br>let result: T[] = [];<br>for (let i = 0; i &lt; length; i++) {<br>result[i] = value;<br>}<br>return result;<br>}<br>// 使用的时候再指定类型<br>let result = createArray<string>(3, ‘x’);<br>// 也可以不指定类型，TS 会自动类型推导<br>let result2 = createArray(3, ‘x’);<br>console.log(result);</p><h3 id="6、TS中的类">6、TS中的类</h3><p>TypeScript 是面向对象的 JavaScript。而其中的类描述了所创建的对象共同的属性和方法。</p><p>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但这对于熟悉使用面向对象方式的程序员来说有些棘手，因为他们用的是基于类的继承并且对象是从类构建出来的。</p><p>从ECMAScript 2015，也就是ECMAScript 6，JavaScript程序将可以使用这种基于类的面向对象方法。在TypeScript里允许开发者现在就使用这些特性，并且编译后的JavaScript可以在所有主流浏览器和平台上运行，</p><h3 id="7、什么是构造函数，构造函数作用是什么？">7、什么是构造函数，构造函数作用是什么？</h3><p>构造函数 ，是一种特殊的方法。主要用来在创建对象时初始化对象， 即为对象成员变量赋初始值，总与new运算符一起使用在创建对象的语句中。而TypeScript的构造函数用关键字constructor来实现。可以通过this（和java/C#一样代表对象实例的成员访问）关键字来访问当前类体中的属性和方法。</p><h3 id="8、实例化是什么？">8、实例化是什么？</h3><p>一般情况下，创建一个类后并不能直接的对属性和方法进行引用，必须对类进行实例化，即创建一个对象。TypeScript中用new 关键字创建对象。实例化后通过“.”来访问属性和方法</p><h3 id="9、方法重写是什么？">9、方法重写是什么？</h3><p>子类可继承父类中的方法，而不需要重新编写相同的方法。但有时子类并不想原封不动地继承父类的方法，而是想作一定的修改，这就需要采用方法的重写</p><p>重写的作用在于子类可以根据需要，定义特定于自己的行为。也就是说子类能够根据需要实现父类的方法。</p><h3 id="10、什么是可索引类型接口？">10、什么是可索引类型接口？</h3><p>一般用来约束数组和对象</p><p>/ 数字索引——约束数组<br>// index 是随便取的名字，可以任意取名<br>// 只要 index 的类型是 number，那么值的类型必须是 string<br>interface StringArray {<br>// key 的类型为 number ，一般都代表是数组<br>// 限制 value 的类型为 string<br>[index:number]:string<br>}<br>let arr:StringArray = [‘aaa’,‘bbb’];<br>console.log(arr);</p><p>// 字符串索引——约束对象<br>// 只要 index 的类型是 string，那么值的类型必须是 string<br>interface StringObject {<br>// key 的类型为 string ，一般都代表是对象<br>// 限制 value 的类型为 string<br>[index:string]:string<br>}<br>let obj:StringObject = {name:‘ccc’};</p><h3 id="11、什么是函数类型接口？">11、什么是函数类型接口？</h3><p>对方法传入的参数和返回值进行约束<br>// 注意区别</p><p>// 普通的接口<br>interface discount1{<br>getNum : (price:number) =&gt; number<br>}</p><p>// 函数类型接口<br>interface discount2{<br>// 注意:<br>// “:” 前面的是函数的签名，用来约束函数的参数<br>// “:” 后面的用来约束函数的返回值<br>(price:number):number<br>}<br>let cost:discount2 = function(price:number):number{<br>return price * .8;<br>}</p><p>// 也可以使用类型别名<br>type Add = (x: number, y: number) =&gt; number<br>let add: Add = (a: number, b: number) =&gt; a + b</p><h3 id="12、什么是类类型接口？">12、什么是类类型接口？</h3><p>如果接口用于一个类的话，那么接口会表示“行为的抽象”<br>对类的约束，让类去实现接口，类可以实现多个接口<br>接口只能约束类的公有成员（实例属性/方法），无法约束私有成员、构造函数、静态属性/方法</p><p>// 接口可以在面向对象编程中表示为行为的抽象<br>interface Speakable {<br>name: string;</p><pre><code> // &quot;:&quot; 前面的是函数签名，用来约束函数的参数// &quot;:&quot; 后面的用来约束函数的返回值speak(words: string): void</code></pre><p>}</p><p>interface Speakable2 {<br>age: number;<br>}</p><p>class Dog implements Speakable, Speakable2 {<br>name!: string;<br>age = 18;</p><pre><code>speak(words: string) &#123;    console.log(words);&#125;</code></pre><p>}</p><p>let dog = new Dog();<br>dog.speak(‘汪汪汪’);</p><h3 id="13、什么是混合类型接口？">13、什么是混合类型接口？</h3><p>一个对象可以同时做为函数和对象使用</p><p>interface FnType {<br>(getName:string):string;<br>}</p><p>interface MixedType extends FnType{<br>name:string;<br>age:number;<br>}<br>interface Counter {<br>(start: number): string;<br>interval: number;<br>reset(): void;<br>}</p><p>function getCounter(): Counter {<br>let counter = <Counter>function (start: number) { };<br>counter.interval = 123;<br>counter.reset = function () { };<br>return counter;<br>}</p><p>let c = getCounter();<br>c(10);<br>c.reset();<br>c.interval = 5.0;</p><h3 id="14、never-和-void-的区别？">14、never 和 void 的区别？</h3><p>void 表示没有任何类型（可以被赋值为 null 和 undefined）。<br>never 表示一个不包含值的类型，即表示永远不存在的值。<br>拥有 void 返回值类型的函数能正常运行。拥有 never 返回值类型的函数无法正常返回，无法终止，或会抛出异常。</p><h3 id="15、TS的学前基础？">15、TS的学前基础？</h3><p>因为 TypeScript 是对 JavaScript 的扩展，更准确的说是 ECMAScript。所以，我们学习我们这套 TypeScript 的课程，需要具备 ECMAScript 语言的基础：</p><p>熟悉语法基础（变量、语句、函数等基础概念）<br>掌握内置对象（Array、Date 等）的使用<br>面向对象基本概念（构造函数、原型、继承）</p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023前端面试系列— React篇</title>
      <link href="/posts/104.html"/>
      <url>/posts/104.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p>本文是我的前端面试系列系列导航，其他章节内容可点击链接查看：</p><ol><li><a href="https://www.cameliia.top/posts/100.html">2023前端面试系列–HTML &amp; CSS 篇</a> ⇦当前位置🪂</li><li><a href="https://www.cameliia.top/posts/101.html">2023前端面试系列-- JS 篇</a></li><li><a href="https://www.cameliia.top/posts/102.html">2023前端面试系列–vue篇</a></li><li><a href="https://www.cameliia.top/posts/103.html">2023前端面试系列–TS篇</a></li><li><a href="https://www.cameliia.top/posts/104.html">2023前端面试系列–React篇</a></li><li><a href="https://www.cameliia.top/posts/105.html">2023前端面试系列–网络篇</a></li><li><a href="https://www.cameliia.top/posts/106.html">2023前端面试系列–浏览器篇</a></li></ol></div><h2 id="React-面试专题">React 面试专题</h2><h3 id="React-js是-MVVM-框架吗">React.js是 MVVM 框架吗?</h3><p>React就是Facebook的一个开源JS框架，专注的层面为View层，不包括数据访问层或者那种Hash路由（不过React 有插件支持），与Angularjs，Emberjs等大而全的框架不同，React专注的中心是Component，即组件。React认为一切页面元 素都可以抽象成组件，比如一个表单，或者表单中的某一项。</p><p>React可以作为MVVM中第二个V，也就是View，但是并不是MVVM框架。MVVM一个最显著的特征：双向绑定。React没有这个，它是单向数据绑定的。React是一个单向数据流的库，状态驱动视图。react整体是函数式的思想，把组件设计成纯组件，状态和逻辑通过参数传入，所以在react中，是单向数据流，推崇结合immutable来实现数据不可变。</p><h3 id="hooks用过吗？聊聊react中class组件和函数组件的区别">hooks用过吗？聊聊react中class组件和函数组件的区别</h3><p>类组件是使用ES6 的 class 来定义的组件。 函数组件是接收一个单一的 <code>props</code> 对象并返回一个React元素。</p><p>关于React的两套API（类（class）API 和基于函数的钩子（hooks） API）。官方推荐使用钩子（函数），而不是类。因为钩子更简洁，代码量少，用起来比较&quot;轻&quot;，而类比较&quot;重&quot;。而且，钩子是函数，更符合 React 函数式的本质。</p><p>函数一般来说，只应该做一件事，就是返回一个值。 如果你有多个操作，每个操作应该写成一个单独的函数。而且，数据的状态应该与操作方法分离。根据函数这种理念，React 的函数组件只应该做一件事情：返回组件的 HTML 代码，而没有其他的功能。函数的返回结果只依赖于它的参数。不改变函数体外部数据、函数执行过程里面没有副作用。</p><p>类（class）是数据和逻辑的封装。 也就是说，组件的状态和操作方法是封装在一起的。如果选择了类的写法，就应该把相关的数据和操作，都写在同一个 class 里面。</p><p><strong>类组件的缺点</strong> :</p><p>大型组件很难拆分和重构，也很难测试。<br>业务逻辑分散在组件的各个方法之中，导致重复逻辑或关联逻辑。<br>组件类引入了复杂的编程模式，比如 render props 和高阶组件。<br>难以理解的 class，理解 JavaScript 中 <code>this</code> 的工作方式。</p><p><strong>区别</strong>：</p><p>函数组件的性能比类组件的性能要高，因为类组件使用的时候要实例化，而函数组件直接执行函数取返回结果即可。</p><p>1.状态的有无<br>hooks出现之前，函数组件<code>没有实例</code>，<code>没有生命周期</code>，<code>没有state</code>，<code>没有this</code>，所以我们称函数组件为无状态组件。 hooks出现之前，react中的函数组件通常只考虑负责UI的渲染，没有自身的状态没有业务逻辑代码，是一个纯函数。它的输出只由参数props决定，不受其他任何因素影响。</p><p>2.调用方式的不同<br>函数组件重新渲染，将重新调用组件方法返回新的react元素。类组件重新渲染将new一个新的组件实例，然后调用render类方法返回react元素，这也说明为什么类组件中this是可变的。</p><p>3.因为调用方式不同，在函数组件使用中会出现问题<br>在操作中改变状态值，类组件可以获取最新的状态值，而函数组件则会按照顺序返回状态值</p><p><strong>React Hooks（钩子的作用）</strong></p><p><em>Hook</em> 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性。</p><p>React Hooks的几个常用钩子:</p><ol><li><code>useState()</code> //状态钩子</li><li><code>useContext()</code> //共享状态钩子</li><li><code>useReducer()</code> //action 钩子</li><li><code>useEffect()</code> //副作用钩子</li></ol><p>还有几个不常见的大概的说下，后续会专门写篇文章描述下</p><ul><li><p>1.useCallback 记忆函数 一般把<strong>函数式组件理解为class组件render函数的语法糖</strong>，所以每次重新渲染的时候，函数式组件内部所有的代码都会重新执行一遍。而有了 useCallback 就不一样了，你可以通过 useCallback 获得一个记忆后的函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">App</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> memoizedHandleClick = <span class="title function_">useCallback</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Click happened&#x27;</span>)</span><br><span class="line">  &#125;, []); <span class="comment">// 空数组代表无论什么情况下该函数都不会发生改变</span></span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">SomeComponent</span> <span class="attr">onClick</span>=<span class="string">&#123;memoizedHandleClick&#125;</span>&gt;</span>Click Me<span class="tag">&lt;/<span class="name">SomeComponent</span>&gt;</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二个参数传入一个数组，数组中的每一项一旦值或者引用发生改变，useCallback 就会重新返回一个新的记忆函数提供给后面进行渲染。</p></li><li><p>2.useMemo 记忆组件 useCallback 的功能完全可以由 useMemo 所取代，如果你想通过使用 useMemo 返回一个记忆函数也是完全可以的。 唯一的区别是：<strong>useCallback 不会执行第一个参数函数，而是将它返回给你，而 useMemo 会执行第一个函数并且将函数执行结果返回给你</strong>。<br>所以 useCallback 常用记忆事件函数，生成记忆后的事件函数并传递给子组件使用。而 useMemo 更适合经过函数计算得到一个确定的值，比如记忆组件。</p></li><li><p>3.useRef 保存引用值</p><p>useRef 跟 createRef 类似，都可以用来生成对 DOM 对象的引用。useRef 返回的值传递给组件或者 DOM 的 ref 属性，就可以通过 ref.current 值<strong>访问组件或真实的 DOM 节点，重点是组件也是可以访问到的</strong>，从而可以对 DOM 进行一些操作，比如监听事件等等。</p></li><li><p>4.useImperativeHandle 穿透 Ref</p><p>通过 useImperativeHandle 用于让父组件获取子组件内的索引</p></li><li><p>5.useLayoutEffect 同步执行副作用</p><p>大部分情况下，使用 useEffect 就可以帮我们处理组件的副作用，但是如果想要同步调用一些副作用，比如对 DOM 的操作，就需要使用 useLayoutEffect，useLayoutEffect 中的副作用会在 DOM 更新之后同步执行。</p><p><strong>useEffect和useLayoutEffect有什么区别</strong>：简单来说就是调用时机不同，useLayoutEffect和原来componentDidMount&amp;componentDidUpdate一致，在react完成DOM更新后马上同步调用的代码，会阻塞页面渲染。而useEffect是会在整个页面渲染完才会调用的代码。<code>官方建议优先使用useEffect</code></p></li></ul><h3 id="React-组件通信方式">React 组件通信方式</h3><p>react组件间通信常见的几种情况:</p><ul><li><ol><li>父组件向子组件通信</li></ol></li><li><ol start="2"><li>子组件向父组件通信</li></ol></li><li><ol start="3"><li>跨级组件通信</li></ol></li><li><ol start="4"><li>非嵌套关系的组件通信</li></ol></li></ul><h4 id="1）父组件向子组件通信">1）父组件向子组件通信</h4><p>父组件通过 props 向子组件传递需要的信息。父传子是在父组件中直接绑定一个正常的属性，这个属性就是指具体的值，在子组件中，用props就可以获取到这个值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件: Child</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Child</span> = props =&gt;&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;props.name&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件 Parent</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Parent</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">name</span>=<span class="string">&quot;京程一灯&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2）子组件向父组件通信">2）子组件向父组件通信</h4><p>props+回调的方式，使用公共组件进行状态提升。子传父是先在父组件上绑定属性设置为一个函数，当子组件需要给父组件传值的时候，则通过props调用该函数将参数传入到该函数当中，此时就可以在父组件中的函数中接收到该参数了，这个参数则为子组件传过来的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 子组件: Child</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Child</span> = props =&gt;&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">cb</span> = msg =&gt;&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">()=&gt;</span>&#123;</span><br><span class="line">          props.<span class="title function_">callback</span>(msg)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;cb(</span>&quot;<span class="attr">京程一灯欢迎你</span>!&quot;)&#125;&gt;</span>京程一灯欢迎你<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件 Parent</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">callback</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">callback</span>=<span class="string">&#123;this.callback.bind(this)&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span>    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3）跨级组件通信">3）跨级组件通信</h4><p>即父组件向子组件的子组件通信，向更深层子组件通信。</p><ul><li>使用props，利用中间组件层层传递,但是如果父组件结构较深，那么中间每一层组件都要去传递props，增加了复杂度，并且这些props并不是中间组件自己需要的。</li><li>使用context，context相当于一个大容器，我们可以把要通信的内容放在这个容器中，这样不管嵌套多深，都可以随意取用，对于跨越多层的全局数据可以使用context实现。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// context方式实现跨级组件通信 </span></span><br><span class="line"><span class="comment">// Context 设计目的是为了共享那些对于一个组件树而言是“全局”的数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">BatteryContext</span> = <span class="title function_">createContext</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//  子组件的子组件 </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GrandChild</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;<span class="name">BatteryContext.Consumer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;</span></span><br><span class="line"><span class="language-xml">                    color =&gt; <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span>&quot;<span class="attr">color</span>&quot;<span class="attr">:color</span>&#125;&#125;&gt;</span>我是红色的:&#123;color&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#125;</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">BatteryContext.Consumer</span>&gt;</span></span></span><br><span class="line">        ) </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  子组件</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Child</span> = (<span class="params"></span>) =&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">GrandChild</span>/&gt;</span></span></span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">      state = &#123;</span><br><span class="line">          <span class="attr">color</span>:<span class="string">&quot;red&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="keyword">const</span> &#123;color&#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">          <span class="keyword">return</span> (</span><br><span class="line">          <span class="language-xml"><span class="tag">&lt;<span class="name">BatteryContext.Provider</span> <span class="attr">value</span>=<span class="string">&#123;color&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">Child</span>&gt;</span><span class="tag">&lt;/<span class="name">Child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">BatteryContext.Provider</span>&gt;</span></span> </span><br><span class="line">          )</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4）非嵌套关系的组件通信">4）非嵌套关系的组件通信</h4><p>即没有任何包含关系的组件，包括兄弟组件以及不在同一个父级中的非兄弟组件。</p><ul><li><ol><li>可以使用自定义事件通信（发布订阅模式），使用pubsub-js</li></ol></li><li><ol start="2"><li>可以通过redux等进行全局状态管理</li></ol></li><li><ol start="3"><li>如果是兄弟组件通信，可以找到这两个兄弟节点共同的父节点, 结合父子间通信方式进行通信。</li></ol></li><li><ol start="4"><li>也可以new一个 Vue 的 EventBus,进行事件监听，一边执行监听，一边执行新增 VUE的eventBus 就是发布订阅模式，是可以在React中使用的;</li></ol></li></ul><h3 id="setState-既存在异步情况也存在同步情况">setState 既存在异步情况也存在同步情况</h3><p>1.异步情况 在<code>React事件当中是异步操作</code></p><p>2.同步情况 如果是在<code>setTimeout事件或者自定义的dom事件</code>中，都是同步的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//setTimeout事件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>count:&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.btnAction&#125;</span>&gt;</span>增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    btnAction = <span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//不能直接修改state，需要通过setState进行修改</span></span><br><span class="line">        <span class="comment">//同步</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Count</span>;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义dom事件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>,&#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&quot;react&quot;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Count</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">state</span> = &#123;</span><br><span class="line">            <span class="attr">count</span>:<span class="number">0</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            <span class="language-xml"><span class="tag">&lt;&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>count:&#123;this.state.count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>绑定点击事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/&gt;</span></span></span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">componentDidMount</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="comment">//自定义dom事件，也是同步修改</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                <span class="attr">count</span>: <span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span> + <span class="number">1</span></span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">state</span>.<span class="property">count</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title class_">Count</span>;</span><br></pre></td></tr></table></figure><h3 id="生命周期">生命周期</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8bae01e6eb804d849e5bb889f787707d~tplv-k3u1fbpfcp-zoom-1.image" alt="image.png"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">安装</span><br><span class="line">当组件的实例被创建并插入到 <span class="variable constant_">DOM</span> 中时，这些方法按以下顺序调用：</span><br><span class="line"></span><br><span class="line"><span class="title function_">constructor</span>(<span class="params"></span>)</span><br><span class="line"><span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>()</span><br><span class="line"><span class="title function_">render</span>()</span><br><span class="line"><span class="title function_">componentDidMount</span>()</span><br><span class="line"></span><br><span class="line">更新中</span><br><span class="line">更新可能由道具或状态的更改引起。当重新渲染组件时，这些方法按以下顺序调用：</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="title function_">getDerivedStateFromProps</span>()</span><br><span class="line"><span class="title function_">shouldComponentUpdate</span>()</span><br><span class="line"><span class="title function_">render</span>()</span><br><span class="line"><span class="title function_">getSnapshotBeforeUpdate</span>()</span><br><span class="line"><span class="title function_">componentDidUpdate</span>()</span><br><span class="line"></span><br><span class="line">卸载</span><br><span class="line">当组件从 <span class="variable constant_">DOM</span> 中移除时调用此方法：</span><br><span class="line"></span><br><span class="line"><span class="title function_">componentWillUnmount</span>()</span><br></pre></td></tr></table></figure><h3 id="说一下-react-fiber">说一下 react-fiber</h3><h4 id="1）背景">1）背景</h4><p>react-fiber 产生的根本原因，是<code>大量的同步计算任务阻塞了浏览器的 UI 渲染</code>。默认情况下，JS 运算、页面布局和页面绘制都是运行在浏览器的主线程当中，他们之间是互斥的关系。如果 JS 运算持续占用主线程，页面就没法得到及时的更新。当我们调用<code>setState</code>更新页面的时候，React 会遍历应用的所有节点，计算出差异，然后再更新 UI。如果页面元素很多，整个过程占用的时机就可能超过 16 毫秒，就容易出现掉帧的现象。</p><h4 id="2）实现原理">2）实现原理</h4><ul><li><p>react内部运转分三层：</p><ul><li>Virtual DOM 层，描述页面长什么样。</li><li>Reconciler 层，负责调用组件生命周期方法，进行 Diff 运算等。</li><li>Renderer 层，根据不同的平台，渲染出相应的页面，比较常见的是 ReactDOM 和 ReactNative。</li></ul></li></ul><p><code>Fiber 其实指的是一种数据结构，它可以用一个纯 JS 对象来表示</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fiber = &#123;</span><br><span class="line">    stateNode,    <span class="comment">// 节点实例</span></span><br><span class="line">    child,        <span class="comment">// 子节点</span></span><br><span class="line">    sibling,      <span class="comment">// 兄弟节点</span></span><br><span class="line">    <span class="keyword">return</span>,       <span class="comment">// 父节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>为了实现不卡顿，就需要有一个调度器 (Scheduler) 来进行任务分配。优先级高的任务（如键盘输入）可以打断优先级低的任务（如Diff）的执行，从而更快的生效。任务的优先级有六种：</p><ul><li>synchronous，与之前的Stack Reconciler操作一样，同步执行</li><li>task，在next tick之前执行</li><li>animation，下一帧之前执行</li><li>high，在不久的将来立即执行</li><li>low，稍微延迟执行也没关系</li><li>offscreen，下一次render时或scroll时才执行</li></ul></li><li><p>Fiber Reconciler（react ）执行过程分为2个阶段：</p><ul><li>阶段一，生成 Fiber 树，得出需要更新的节点信息。这一步是一个渐进的过程，可以被打断。阶段一可被打断的特性，让优先级更高的任务先执行，从框架层面大大降低了页面掉帧的概率。</li><li>阶段二，将需要更新的节点一次过批量更新，这个过程不能被打断。</li></ul></li><li><p>Fiber树：React 在 render 第一次渲染时，会通过 React.createElement 创建一颗 Element 树，可以称之为 Virtual DOM Tree，由于要记录上下文信息，加入了 Fiber，每一个 Element 会对应一个 Fiber Node，将 Fiber Node 链接起来的结构成为 Fiber Tree。Fiber Tree 一个重要的特点是链表结构，将递归遍历编程循环遍历，然后配合 requestIdleCallback API, 实现任务拆分、中断与恢复。</p></li></ul><p>从Stack Reconciler到Fiber Reconciler，源码层面其实就是干了一件递归改循环的事情</p><p>传送门 ☞<a href="https://juejin.cn/post/7002250258826657799"># 深入了解 Fiber</a></p><h3 id="Portals">Portals</h3><p>Portals 提供了一种一流的方式来将子组件渲染到存在于父组件的 DOM 层次结构之外的 DOM 节点中。结构不受外界的控制的情况下就可以使用portals进行创建</p><h3 id="何时要使用异步组件？如和使用异步组件">何时要使用异步组件？如和使用异步组件</h3><ul><li>加载大组件的时候</li><li>路由异步加载的时候</li></ul><p>react 中要配合 Suspense 使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步懒加载</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Box</span> = <span class="title function_">lazy</span>(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Box&#x27;</span>));</span><br><span class="line"><span class="comment">// 使用组件的时候要用suspense进行包裹</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">    &#123;show &amp;&amp; <span class="tag">&lt;<span class="name">Box</span>/&gt;</span>&#125;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="React-事件绑定原理">React 事件绑定原理</h3><p>React并不是将click事件绑在该div的真实DOM上，而是<code>在document处监听所有支持的事件</code>，当事件发生并冒泡至document处时，React将事件内容封装并交由真正的处理函数运行。这样的方式不仅减少了内存消耗，还能在组件挂载销毁时统一订阅和移除事件。<br>另外冒泡到 document 上的事件也不是原生浏览器事件，而是 React 自己实现的合成事件（SyntheticEvent）。因此我们如果不想要事件冒泡的话，调用 event.stopPropagation 是无效的，而应该调用 <code>event.preventDefault</code>。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2089718f74b342869de15f01588f033f~tplv-k3u1fbpfcp-zoom-1.image" alt="react事件绑定原理"></p><h3 id="React-lazy-实现的原理">React.lazy() 实现的原理</h3><p>React的懒加载示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Suspense</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">OtherComponent</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./OtherComponent&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">MyComponent</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;</span>&lt;<span class="attr">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span>&#125;&gt;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">OtherComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">Suspense</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>React.lazy 原理</strong></p><p>以下 React 源码基于 16.8.0 版本</p><p>React.lazy 的源码实现如下：</p><p>export function lazy&lt;T, R&gt;(ctor: () =&gt; Thenable&lt;T, R&gt;): LazyComponent<T> {<br>let lazyType = {<br>$$typeof: REACT_LAZY_TYPE,<br>_ctor: ctor,<br>// React uses these fields to store the result.<br>_status: -1,<br>_result: null,<br>};</p><p>return lazyType;<br>}<br>可以看到其返回了一个 LazyComponent 对象。</p><p>而对于 LazyComponent 对象的解析：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> <span class="title class_">LazyComponent</span>: &#123;</span><br><span class="line">  <span class="keyword">const</span> elementType = workInProgress.<span class="property">elementType</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">mountLazyComponent</span>(</span><br><span class="line">    current,</span><br><span class="line">    workInProgress,</span><br><span class="line">    elementType,</span><br><span class="line">    updateExpirationTime,</span><br><span class="line">    renderExpirationTime,</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">mountLazyComponent</span>(<span class="params"></span></span><br><span class="line"><span class="params">  _current,</span></span><br><span class="line"><span class="params">  workInProgress,</span></span><br><span class="line"><span class="params">  elementType,</span></span><br><span class="line"><span class="params">  updateExpirationTime,</span></span><br><span class="line"><span class="params">  renderExpirationTime,</span></span><br><span class="line"><span class="params"></span>) &#123; </span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">let</span> <span class="title class_">Component</span> = <span class="title function_">readLazyComponentType</span>(elementType);</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Pending = 0, Resolved = 1, Rejected = 2</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> readLazyComponentType&lt;T&gt;(<span class="attr">lazyComponent</span>: <span class="title class_">LazyComponent</span>&lt;T&gt;): T &#123;</span><br><span class="line">  <span class="keyword">const</span> status = lazyComponent.<span class="property">_status</span>;</span><br><span class="line">  <span class="keyword">const</span> result = lazyComponent.<span class="property">_result</span>;</span><br><span class="line">  <span class="keyword">switch</span> (status) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">Resolved</span>: &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="title class_">Component</span>: T = result;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Component</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">Rejected</span>: &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">error</span>: mixed = result;</span><br><span class="line">      <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> <span class="title class_">Pending</span>: &#123;</span><br><span class="line">      <span class="keyword">const</span> <span class="attr">thenable</span>: <span class="title class_">Thenable</span>&lt;T, mixed&gt; = result;</span><br><span class="line">      <span class="keyword">throw</span> thenable;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">default</span>: &#123; <span class="comment">// lazyComponent 首次被渲染</span></span><br><span class="line">      lazyComponent.<span class="property">_status</span> = <span class="title class_">Pending</span>;</span><br><span class="line">      <span class="keyword">const</span> ctor = lazyComponent.<span class="property">_ctor</span>;</span><br><span class="line">      <span class="keyword">const</span> thenable = <span class="title function_">ctor</span>();</span><br><span class="line">      thenable.<span class="title function_">then</span>(</span><br><span class="line">        <span class="function"><span class="params">moduleObject</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (lazyComponent.<span class="property">_status</span> === <span class="title class_">Pending</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> defaultExport = moduleObject.<span class="property">default</span>;</span><br><span class="line">            lazyComponent.<span class="property">_status</span> = <span class="title class_">Resolved</span>;</span><br><span class="line">            lazyComponent.<span class="property">_result</span> = defaultExport;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (lazyComponent.<span class="property">_status</span> === <span class="title class_">Pending</span>) &#123;</span><br><span class="line">            lazyComponent.<span class="property">_status</span> = <span class="title class_">Rejected</span>;</span><br><span class="line">            lazyComponent.<span class="property">_result</span> = error;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">      );</span><br><span class="line">      <span class="comment">// Handle synchronous thenables.</span></span><br><span class="line">      <span class="keyword">switch</span> (lazyComponent.<span class="property">_status</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">Resolved</span>:</span><br><span class="line">          <span class="keyword">return</span> lazyComponent.<span class="property">_result</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="title class_">Rejected</span>:</span><br><span class="line">          <span class="keyword">throw</span> lazyComponent.<span class="property">_result</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      lazyComponent.<span class="property">_result</span> = thenable;</span><br><span class="line">      <span class="keyword">throw</span> thenable;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：如果 readLazyComponentType 函数多次处理同一个 lazyComponent，则可能进入Pending、Rejected等 case 中。</p><p>从上述代码中可以看出，对于最初 React.lazy() 所返回的 LazyComponent 对象，其 _status 默认是 -1，所以首次渲染时，会进入 readLazyComponentType 函数中的 default 的逻辑，这里才会真正异步执行 import(url)操作，由于并未等待，随后会检查模块是否 Resolved，如果已经Resolved了（已经加载完毕）则直接返回moduleObject.default（动态加载的模块的默认导出），否则将通过 throw 将 thenable 抛出到上层。</p><p>为什么要 throw 它？这就要涉及到 Suspense 的工作原理，我们接着往下分析。</p><p><strong>Suspense 原理</strong></p><p>由于 React 捕获异常并处理的代码逻辑比较多，这里就不贴源码，感兴趣可以去看 throwException 中的逻辑，其中就包含了如何处理捕获的异常。简单描述一下处理过程，React 捕获到异常之后，会判断异常是不是一个 thenable，如果是则会找到 SuspenseComponent ，如果 thenable 处于 pending 状态，则会将其 children 都渲染成 fallback 的值，一旦 thenable 被 resolve 则 SuspenseComponent 的子组件会重新渲染一次。</p><p>为了便于理解，我们也可以用 componentDidCatch 实现一个自己的 Suspense 组件，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Suspense</span> <span class="keyword">extends</span> <span class="title class_ inherited__">React.Component</span> &#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    <span class="attr">promise</span>: <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">componentDidCatch</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断 err 是否是 thenable</span></span><br><span class="line">    <span class="keyword">if</span> (err !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> err === <span class="string">&#x27;object&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> err.<span class="property">then</span> === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123; <span class="attr">promise</span>: err &#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        err.<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">setState</span>(&#123;</span><br><span class="line">            <span class="attr">promise</span>: <span class="literal">null</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; fallback, children &#125; = <span class="variable language_">this</span>.<span class="property">props</span></span><br><span class="line">    <span class="keyword">const</span> &#123; promise &#125; = <span class="variable language_">this</span>.<span class="property">state</span></span><br><span class="line">    <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;&gt;</span>&#123; promise ? fallback : children &#125;<span class="tag">&lt;/&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，我们分析完了 React 的懒加载原理。简单来说，React利用 React.lazy与import()实现了渲染时的动态加载 ，并利用Suspense来处理异步加载资源时页面应该如何显示的问题。</p><p>参考传送门☞ <a href="https://thoamsy.github.io/blogs/react-lazy/">React Lazy 的实现原理</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023前端面试系列— 浏览器篇</title>
      <link href="/posts/106.html"/>
      <url>/posts/106.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p>本文是我的前端面试系列系列导航，其他章节内容可点击链接查看：</p><ol><li><a href="https://www.cameliia.top/posts/100.html">2023前端面试系列–HTML &amp; CSS 篇</a> ⇦当前位置🪂</li><li><a href="https://www.cameliia.top/posts/101.html">2023前端面试系列-- JS 篇</a></li><li><a href="https://www.cameliia.top/posts/102.html">2023前端面试系列–vue篇</a></li><li><a href="https://www.cameliia.top/posts/103.html">2023前端面试系列–TS篇</a></li><li><a href="https://www.cameliia.top/posts/104.html">2023前端面试系列–React篇</a></li><li><a href="https://www.cameliia.top/posts/105.html">2023前端面试系列–网络篇</a></li><li><a href="https://www.cameliia.top/posts/106.html">2023前端面试系列–浏览器篇</a></li></ol></div><h1>浏览器</h1><h3 id="从输入URL到页面加载的全过程">从输入URL到页面加载的全过程</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e44aa8a92602405db3c12161b71e2094~tplv-k3u1fbpfcp-zoom-1.image" alt="从输入URL到页面加载的主干流程"></p><ol><li><p>首先在浏览器中输入URL</p></li><li><p>查找缓存：浏览器先查看浏览器缓存-系统缓存-路由缓存中是否有该地址页面，如果有则显示页面内容。如果没有则进行下一步。</p><ul><li>浏览器缓存：浏览器会记录DNS一段时间，因此，只是第一个地方解析DNS请求；</li><li>操作系统缓存:如果在浏览器缓存中不包含这个记录，则会使系统调用操作系统， 获取操作系统的记录(保存最近的DNS查询缓存)；</li><li>路由器缓存：如果上述两个步骤均不能成功获取DNS记录，继续搜索路由器缓存；</li><li>ISP缓存：若上述均失败，继续向ISP搜索。</li></ul></li><li><p>DNS域名解析：浏览器向DNS服务器发起请求，解析该URL中的域名对应的IP地址。<code>DNS服务器是基于UDP的，因此会用到UDP协议</code>。</p></li><li><p>建立TCP连接：解析出IP地址后，根据IP地址和默认80端口，和服务器建立TCP连接</p></li><li><p>发起HTTP请求：浏览器发起读取文件的HTTP请求，，该请求报文作为TCP三次握手的第三次数据发送给服务器</p></li><li><p>服务器响应请求并返回结果：服务器对浏览器请求做出响应，并把对应的html文件发送给浏览器</p></li><li><p>关闭TCP连接：通过四次挥手释放TCP连接</p></li><li><p>浏览器渲染：客户端（浏览器）解析HTML内容并渲染出来，浏览器接收到数据包后的解析流程为：</p><ul><li>构建DOM树：词法分析然后解析成DOM树（dom tree），是由dom元素及属性节点组成，树的根是document对象</li><li>构建CSS规则树：生成CSS规则树（CSS Rule Tree）</li><li>构建render树：Web浏览器将DOM和CSSOM结合，并构建出渲染树（render tree）</li><li>布局（Layout）：计算出每个节点在屏幕中的位置</li><li>绘制（Painting）：即遍历render树，并使用UI后端层绘制每个节点。</li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a90660027f0d4c559732519bad4c6323~tplv-k3u1fbpfcp-zoom-1.image" alt="浏览器渲染流程图"></p></li><li><p>JS引擎解析过程：调用JS引擎执行JS代码（JS的解释阶段，预处理阶段，执行阶段生成执行上下文，VO，作用域链、回收机制等等）</p><ul><li>创建window对象：window对象也叫全局执行环境，当页面产生时就被创建，所有的全局变量和函数都属于window的属性和方法，而DOM Tree也会映射在window的doucment对象上。当关闭网页或者关闭浏览器时，全局执行环境会被销毁。</li><li>加载文件：完成js引擎分析它的语法与词法是否合法，如果合法进入预编译</li><li>预编译：在预编译的过程中，浏览器会寻找全局变量声明，把它作为window的属性加入到window对象中，并给变量赋值为’undefined’；寻找全局函数声明，把它作为window的方法加入到window对象中，并将函数体赋值给他（匿名函数是不参与预编译的，因为它是变量）。而变量提升作为不合理的地方在ES6中已经解决了，函数提升还存在。</li><li>解释执行：执行到变量就赋值，如果变量没有被定义，也就没有被预编译直接赋值，在ES5非严格模式下这个变量会成为window的一个属性，也就是成为全局变量。string、int这样的值就是直接把值放在变量的存储空间里，object对象就是把指针指向变量的存储空间。函数执行，就将函数的环境推入一个环境的栈中，执行完成后再弹出，控制权交还给之前的环境。JS作用域其实就是这样的执行流机制实现的。</li></ul></li></ol><p>传送门 ☞ <a href="https://juejin.cn/post/7005468491067162655"># DNS域名解析过程</a> ☞<a href="https://juejin.cn/post/6992597760935460901"># 浏览器的工作原理</a></p><h3 id="在浏览器中输入URL到显示页面经历哪些过程，涉及到哪些协议？">在浏览器中输入URL到显示页面经历哪些过程，涉及到哪些协议？</h3><p>浏览器要将URL解析为IP地址，解析域名就要用到DNS协议，首先主机会查询DNS的缓存，如果没有就给本地DNS发送查询请求。DNS查询分为两种方式，一种是递归查询，一种是迭代查询。如果是迭代查询，本地的DNS服务器，向根域名服务器发送查询请求，根域名服务器告知该域名的一级域名服务器，然后本地服务器给该一级域名服务器发送查询请求，然后依次类推直到查询到该域名的IP地址。<code>DNS服务器是基于UDP的，因此会用到UDP协议。</code></p><p>得到IP地址后，浏览器就要与服务器建立一个http连接。因此要用到http协议。http生成一个get请求报文，将该报文传给TCP层处理，所以还会用到TCP协议。如果采用https还会使用https协议先对http数据进行加密。TCP层如果有需要先将HTTP数据包分片，分片依据路径MTU和MSS。TCP的数据包然后会发送给IP层，用到IP协议。IP层通过路由选路，一跳一跳发送到目的地址。当然在一个网段内的寻址是通过以太网协议实现(也可以是其他物理层协议，比如PPP，SLIP)，以太网协议需要直到目的IP地址的物理地址，有需要ARP协议。</p><p>其中：</p><p>1、<code>DNS协议，http协议，https协议属于应用层</code></p><p>应用层是体系结构中的最高层。应用层确定进程之间通信的性质以满足用户的需要。这里的进程就是指正在运行的程序。应用层不仅要提供应用进程所需要的信息交换和远地操作，而且还要作为互相作用的应用进程的用户代理，来完成一些为进行语义上有意义的信息交换所必须的功能。应用层直接为用户的应用进程提供服务。</p><p>2、<code>TCP/UDP属于传输层</code></p><p>传输层的任务就是负责主机中两个进程之间的通信。因特网的传输层可使用两种不同协议：即面向连接的传输控制协议TCP，和无连接的用户数据报协议UDP。面向连接的服务能够提供可靠的交付，但无连接服务则不保证提供可靠的交付，它只是“尽最大努力交付”。这两种服务方式都很有用，备有其优缺点。在分组交换网内的各个交换结点机都没有传输层。</p><p>3、<code>IP协议，ARP协议属于网络层</code></p><p>网络层负责为分组交换网上的不同主机提供通信。在发送数据时，网络层将运输层产生的报文段或用户数据报封装成分组或包进行传送。在TCP/IP体系中，分组也叫作IP数据报，或简称为数据报。网络层的另一个任务就是要选择合适的路由，使源主机运输层所传下来的分组能够交付到目的主机。</p><p>4、数据链路层</p><p>当发送数据时，数据链路层的任务是将在网络层交下来的IP数据报组装成帧，在两个相邻结点间的链路上传送以帧为单位的数据。每一帧包括数据和必要的控制信息（如同步信息、地址信息、差错控制、以及流量控制信息等）。控制信息使接收端能够知道—个帧从哪个比特开始和到哪个比特结束。控制信息还使接收端能够检测到所收到的帧中有无差错。</p><p>5、物理层</p><p>物理层的任务就是透明地传送比特流。在物理层上所传数据的单位是比特。传递信息所利用的一些物理媒体，如双绞线、同轴电缆、光缆等，并不在物理层之内而是在物理层的下面。因此也有人把物理媒体当做第0层。</p><h3 id="浏览器的主要功能">浏览器的主要功能</h3><p>浏览器的主要功能就是向服务器发出请求，在浏览器窗口中展示您选择的网络资源。这里所说的资源一般是指 HTML 文档，也可以是 PDF、图片或其他的类型。资源的位置由用户使用 URI（统一资源标示符）指定。</p><h3 id="浏览器的工作原理">浏览器的工作原理</h3><p>渲染引擎一开始会从网络层获取请求文档的内容，内容的大小一般限制在 8000 个块以内。</p><p>然后进行如下所示的基本流程：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ef6cb226b374e89914a2315e4ca9ba9~tplv-k3u1fbpfcp-zoom-1.image" alt=""></p><p>图：渲染引擎的基本流程。</p><p>渲染引擎将开始<code>解析 HTML 文档</code>，并将各标记逐个转化成“内容树”上的 <a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.html5rocks.com%2Fzh%2Ftutorials%2Finternals%2Fhowbrowserswork%2F%23DOM" title="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#DOM">DOM</a> 节点。同时也会<code>解析外部 CSS 文件以及样式元素中的样式数据</code>。HTML 中这些带有视觉指令的样式信息将用于创建另一个树结构：<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.html5rocks.com%2Fzh%2Ftutorials%2Finternals%2Fhowbrowserswork%2F%23Render_tree_construction" title="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Render_tree_construction"><code>渲染树</code></a>。</p><p>渲染树包含多个带有视觉属性（如颜色和尺寸）的矩形。这些矩形的排列顺序就是它们将在屏幕上显示的顺序。</p><p>渲染树构建完毕之后，进入“<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.html5rocks.com%2Fzh%2Ftutorials%2Finternals%2Fhowbrowserswork%2F%23layout" title="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#layout">布局</a>”处理阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标。下一个阶段是<a href="https://link.juejin.cn?target=https%3A%2F%2Fwww.html5rocks.com%2Fzh%2Ftutorials%2Finternals%2Fhowbrowserswork%2F%23Painting" title="https://www.html5rocks.com/zh/tutorials/internals/howbrowserswork/#Painting">绘制</a> - 渲染引擎会遍历渲染树，由用户界面后端层将每个节点绘制出来。</p><p>需要着重指出的是，这是一个渐进的过程。为达到更好的用户体验，渲染引擎会力求尽快将内容显示在屏幕上。它不必等到整个 HTML 文档解析完毕之后，就会开始构建呈现树和设置布局。在不断接收和处理来自网络的其余内容的同时，渲染引擎会将部分内容解析并显示出来。</p><h3 id="浏览器的主要组成部分是什么？">浏览器的主要组成部分是什么？</h3><ol><li><strong>用户界面</strong> - 包括地址栏、前进/后退按钮、书签菜单等。除了浏览器主窗口显示的您请求的页面外，其他显示的各个部分都属于用户界面。</li><li><strong>浏览器引擎</strong> - 在用户界面和呈现引擎之间传送指令。</li><li><strong>呈现引擎</strong> - 负责显示请求的内容。如果请求的内容是 HTML，它就负责解析 HTML 和 CSS 内容，并将解析后的内容显示在屏幕上。</li><li><strong>网络</strong> - 用于网络调用，比如 HTTP 请求。其接口与平台无关，并为所有平台提供底层实现。</li><li><strong>用户界面后端</strong> - 用于绘制基本的窗口小部件，比如组合框和窗口。其公开了与平台无关的通用接口，而在底层使用操作系统的用户界面方法。</li><li><strong>JavaScript 解释器</strong>。用于解析和执行 JavaScript 代码。</li><li><strong>数据存储</strong>。这是持久层。浏览器需要在硬盘上保存各种数据，例如 Cookie。新的 HTML 规范 (HTML5) 定义了“网络数据库”，这是一个完整（但是轻便）的浏览器内数据库。<br><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f83cb61cb9de4a65abeb95e50608af48~tplv-k3u1fbpfcp-watermark.awebp" alt=""></li></ol><p>图：浏览器的主要组件。</p><p>值得注意的是，和大多数浏览器不同，Chrome 浏览器的每个标签页都分别对应一个呈现引擎实例。每个标签页都是一个独立的进程。</p><h3 id="浏览器是如何渲染UI的？">浏览器是如何渲染UI的？</h3><ol><li>浏览器获取HTML文件，然后对文件进行解析，形成DOM Tree</li><li>与此同时，进行CSS解析，生成Style Rules</li><li>接着将DOM Tree与Style Rules合成为 Render Tree</li><li>接着进入布局（Layout）阶段，也就是为每个节点分配一个应出现在屏幕上的确切坐标</li><li>随后调用GPU进行绘制（Paint），遍历Render Tree的节点，并将元素呈现出来</li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/67b1336692f540c9a81756f93e82c2f5~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="DOM-Tree是如何构建的？">DOM Tree是如何构建的？</h3><ol><li>转码: 浏览器将接收到的二进制数据按照指定编码格式转化为HTML字符串</li><li>生成Tokens: 之后开始parser，浏览器会将HTML字符串解析成Tokens</li><li>构建Nodes: 对Node添加特定的属性，通过指针确定 Node 的父、子、兄弟关系和所属 treeScope</li><li>生成DOM Tree: 通过node包含的指针确定的关系构建出DOM<br>Tree</li></ol><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1dc0f577836c4705bb582b2ac15bc5d1~tplv-k3u1fbpfcp-zoom-1.image" alt="2019-06-22-11-48-00"></p><h3 id="浏览器重绘与重排的区别？">浏览器重绘与重排的区别？</h3><ul><li><code>重排/回流（Reflow）</code>：当<code>DOM</code>的变化影响了元素的几何信息，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。表现为重新生成布局，重新排列元素。</li><li><code>重绘(Repaint)</code>: 当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。表现为某些元素的外观被改变</li></ul><p>单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，将会重新绘制受到此次重排影响的部分</p><p>重排和重绘代价是高昂的，它们会破坏用户体验，并且让UI展示非常迟缓，而相比之下重排的性能影响更大，在两者无法避免的情况下，一般我们宁可选择代价更小的重绘。</p><p>『重绘』不一定会出现『重排』，『重排』必然会出现『重绘』。</p><h3 id="如何触发重排和重绘？">如何触发重排和重绘？</h3><p>任何改变用来构建渲染树的信息都会导致一次重排或重绘：</p><ul><li>添加、删除、更新DOM节点</li><li>通过display: none隐藏一个DOM节点-触发重排和重绘</li><li>通过visibility: hidden隐藏一个DOM节点-只触发重绘，因为没有几何变化</li><li>移动或者给页面中的DOM节点添加动画</li><li>添加一个样式表，调整样式属性</li><li>用户行为，例如调整窗口大小，改变字号，或者滚动。</li></ul><h3 id="如何避免重绘或者重排？">如何避免重绘或者重排？</h3><ol><li><p><code>集中改变样式</code>，不要一条一条地修改 DOM 的样式。</p></li><li><p>不要把 DOM 结点的属性值放在循环里当成循环里的变量。</p></li><li><p>为动画的 HTML 元件使用 <code>fixed</code> 或 <code>absoult</code> 的 <code>position</code>，那么修改他们的 CSS 是不会 reflow 的。</p></li><li><p>不使用 table 布局。因为可能很小的一个小改动会造成整个 table 的重新布局。</p></li><li><p>尽量只修改<code>position：absolute</code>或<code>fixed</code>元素，对其他元素影响不大</p></li><li><p>动画开始<code>GPU</code>加速，<code>translate</code>使用<code>3D</code>变化</p></li><li><p>提升为合成层</p><p>将元素提升为合成层有以下优点：</p><ul><li>合成层的位图，会交由 GPU 合成，比 CPU 处理要快</li><li>当需要 repaint 时，只需要 repaint 本身，不会影响到其他的层</li><li>对于 transform 和 opacity 效果，不会触发 layout 和 paint</li></ul><p>提升合成层的最好方式是使用 CSS 的 will-change 属性：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#target</span> &#123;</span><br><span class="line">  <span class="attribute">will-change</span>: transform;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>关于合成层的详解请移步<a href="https://link.juejin.cn?target=http%3A%2F%2Ftaobaofed.org%2Fblog%2F2016%2F04%2F25%2Fperformance-composite%2F" title="http://taobaofed.org/blog/2016/04/25/performance-composite/">无线性能优化：Composite</a></p></blockquote></li></ol><h3 id="介绍下304过程">介绍下304过程</h3><ul><li>a. 浏览器请求资源时首先命中资源的Expires 和 Cache-Control，Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效，可以通过Cache-control: max-age指定最大生命周期，状态仍然返回200，但不会请求数据，在浏览器中能明显看到from cache字样。</li><li>b. 强缓存失效，进入协商缓存阶段，首先验证ETagETag可以保证每一个资源是唯一的，资源变化都会导致ETag变化。服务器根据客户端上送的If-None-Match值来判断是否命中缓存。</li><li>c. 协商缓存Last-Modify/If-Modify-Since阶段，客户端第一次请求资源时，服务服返回的header中会加上Last-Modify，Last-modify是一个时间标识该资源的最后修改时间。再次请求该资源时，request的请求头中会包含If-Modify-Since，该值为缓存之前返回的Last-Modify。服务器收到If-Modify-Since后，根据资源的最后修改时间判断是否命中缓存。</li></ul><h3 id="浏览器的缓存机制-强制缓存-协商缓存">浏览器的缓存机制 强制缓存 &amp;&amp; 协商缓存</h3><p>浏览器与服务器通信的方式为应答模式，即是：浏览器发起HTTP请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/487144abaada4b9a8b34bc9375191ec7~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>由上图我们可以知道：</p><ul><li>浏览器每次发起请求，都会<code>先在浏览器缓存中查找该请求的结果以及缓存标识</code></li><li>浏览器每次拿到返回的请求结果都会<code>将该结果和缓存标识存入浏览器缓存中</code></li></ul><p>以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分，分别是<code>强制缓存</code>和<code>协商缓存</code>。</p><ul><li><p><strong>强制缓存</strong></p><p><code>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。</code>当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是 <code>Expires</code> 和 <code>Cache-Control</code>，其中Cache-Control优先级比Expires高。</p><p>强制缓存的情况主要有三种(暂不分析协商缓存过程)，如下：</p><ol><li>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。</li><li>存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。</li><li>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果</li></ol></li><li><p><strong>协商缓存</strong></p><p><code>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</code>，同样，协商缓存的标识也是在响应报文的HTTP头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：<code>Last-Modified / If-Modified-Since</code> 和 <code>Etag / If-None-Match</code>，其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。协商缓存主要有以下两种情况：</p><ol><li>协商缓存生效，返回304</li><li>协商缓存失效，返回200和请求结果结果</li></ol></li></ul><p>传送门 ☞ <a href="https://juejin.cn/post/6992843117963509791"># 彻底理解浏览器的缓存机制</a></p><h3 id="Cookie、sessionStorage、localStorage-的区别">Cookie、sessionStorage、localStorage 的区别</h3><p><strong>相同点</strong>：</p><ul><li>存储在客户端</li></ul><p><strong>不同点</strong>：</p><ul><li>cookie数据大小不能超过4k；sessionStorage和localStorage的存储比cookie大得多，可以达到5M+</li><li>cookie设置的过期时间之前一直有效；localStorage永久存储，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage数据在当前浏览器窗口关闭后自动删除</li><li>cookie的数据会自动的传递到服务器；sessionStorage和localStorage数据保存在本地</li></ul><h3 id="说下进程、线程和协程">说下进程、线程和协程</h3><p><strong>进程</strong>是一个具有一定独立功能的程序在一个数据集上的一次动态执行的过程，<code>是操作系统进行资源分配和调度的一个独立单位</code>，是应用程序运行的载体。进程是一种抽象的概念，从来没有统一的标准定义。</p><p><strong>线程</strong>是程序执行中一个单一的顺序控制流程，是<code>程序执行流的最小单元</code>，是处理器调度和分派的基本单位。一个进程可以有一个或多个线程，各个线程之间共享程序的内存空间(也就是所在进程的内存空间)。一个标准的线程由线程ID、当前指令指针(PC)、寄存器和堆栈组成。而进程由内存空间(代码、数据、进程空间、打开的文件)和一个或多个线程组成。</p><p><strong>协程</strong>，英文Coroutines，是一种<code>基于线程之上，但又比线程更加轻量级的存在</code>，这种由程序员自己写程序来管理的轻量级线程叫做『用户空间线程』，具有对内核来说不可见的特性。</p><p><strong>进程和线程的区别与联系</strong></p><p>【区别】：</p><p>调度：线程作为调度和分配的基本单位，进程作为拥有资源的基本单位；</p><p>并发性：不仅进程之间可以并发执行，同一个进程的多个线程之间也可并发执行；</p><p>拥有资源：进程是拥有资源的一个独立单位，线程不拥有系统资源，但可以访问隶属于进程的资源。</p><p>系统开销：在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时的开销。但是进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径。线程有自己的堆栈和局部变量，但线程之间没有单独的地址空间，一个进程死掉就等于所有的线程死掉，所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。</p><p>【联系】：</p><p>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程；</p><p>资源分配给进程，同一进程的所有线程共享该进程的所有资源；</p><p>处理机分给线程，即真正在处理机上运行的是线程；</p><p>线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。</p><p>传送门 ☞ <a href="https://juejin.cn/post/7005465381791875109"># 一文搞懂进程、线程、协程及JS协程的发展</a><br><a href="http://www.360doc.com/content/20/0417/14/32196507_906628857.shtml">☞了解更多</a></p><p>关于浏览器传送门 ☞<a href="https://juejin.cn/post/6993095345576083486"># 深入了解现代 Web 浏览器</a></p><h3 id="进程间的通信方式">进程间的通信方式</h3><p><code>进程通信</code>：<br>每个进程各自有不同的用户地址空间,任何一个进程的全局变量在另一个进程中都看不到，所以进程之间要交换数据必须通过内核,在内核中开辟一块缓冲区,进程A把数据从用户空间拷到内核缓冲区,进程B再从内核缓冲区把数据读走,内核提供的这种机制称为进程间通信。</p><p>进程间的通信方式：管道、有名管道、信号、消息队列、共享内存、信号量、socket</p><p><code>匿名管道( pipe )</code>： 管道是一种半双工的通信方式，数据只能<strong>单向流动</strong>，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指<strong>父子进程关系</strong>。</p><p><code>高级管道(popen)</code>：将另一个程序当做一个新的进程在当前程序进程中启动，则它算是当前程序的子进程，这种方式我们成为高级管道方式。</p><p><code>有名管道 (named pipe) </code>： 有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间的通信。</p><p><code>消息队列( message queue )</code> ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p><p><code>信号量( semophore )</code> ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p><p><code>信号 ( sinal )</code> ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p><p><code>共享内存( shared memory )</code> ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</p><p><code>套接字( socket ) 通信</code>： 套接口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同机器间的进程通信</p><h3 id="浏览器样式兼容">浏览器样式兼容</h3><h4 id="一、CSS初始化">一、CSS初始化</h4><p>每个浏览器的css默认样式不尽相同，所以最简单有效的方式就是对其进行初始化（覆盖默认样式）</p><blockquote><p>常见 :  *{ margin: 0; padding: 0;}</p><p>库：normalize.css</p></blockquote><h4 id="二、浏览器私有属性">二、<strong>浏览器私有属性</strong></h4><blockquote><p>常用的前缀有：</p><p>firefox浏览器 ：-moz-</p><p>chrome、safari ：-webkit-</p><p>opera ：-o- / -xv-</p><p>IE浏览器 ：-ms-（目前只有 IE 8+支持）</p></blockquote><h4 id="三、CSS-hack（条件hack、属性级hack、选择符级hack）"><strong>三、CSS hack（条件hack、属性级hack、选择符级hack）</strong></h4><h3 id="JS垃圾回收机制">JS垃圾回收机制</h3><ol><li><p>项目中，如果存在大量不被释放的内存（堆/栈/上下文），页面性能会变得很慢。当某些代码操作不能被合理释放，就会造成内存泄漏。我们尽可能减少使用闭包，因为它会消耗内存。</p></li><li><p>浏览器垃圾回收机制/内存回收机制:</p><blockquote><p>浏览器的<code>Javascript</code>具有自动垃圾回收机制(<code>GC:Garbage Collecation</code>)，垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存。</p></blockquote><p><strong>标记清除</strong>:在<code>js</code>中，最常用的垃圾回收机制是标记清除：当变量进入执行环境时，被标记为“进入环境”，当变量离开执行环境时，会被标记为“离开环境”。垃圾回收器会销毁那些带标记的值并回收它们所占用的内存空间。<br><strong>谷歌浏览器</strong>：“查找引用”，浏览器不定时去查找当前内存的引用，如果没有被占用了，浏览器会回收它；如果被占用，就不能回收。<br><strong>IE浏览器</strong>：“引用计数法”，当前内存被占用一次，计数累加1次，移除占用就减1，减到0时，浏览器就回收它。</p></li><li><p>优化手段：内存优化 ; 手动释放：取消内存的占用即可。</p><p>（1）堆内存：fn = null 【null：空指针对象】</p><p>（2）栈内存：把上下文中，被外部占用的堆的占用取消即可。</p></li><li><p>内存泄漏</p><p>在 JS 中，常见的内存泄露主要有 4 种,全局变量、闭包、DOM 元素的引用、定时器</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023前端面试系列—面试汇总篇</title>
      <link href="/posts/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB.html"/>
      <url>/posts/%E9%9D%A2%E8%AF%95%E6%B1%87%E6%80%BB.html</url>
      
        <content type="html"><![CDATA[<h1>HTML</h1><h2 id="1-HTML5-新特性">1. HTML5 新特性</h2><ol><li>新的语义化元素：main、footer、header、nav、section</li><li>新的表单控件：date、time、email、url、search</li><li>新的 API：</li></ol><ul><li>音视频：audio 和 video 元素</li><li>绘图图形：canvas 元素</li><li>本地存储：localStorage，sessionStorage</li><li>多线程操作：Web Worker</li></ul><p>引申的内容：</p><ol><li>语义化：是什么？有什么用？</li></ol><ul><li>有利于 SEO，代码更加规范和可读</li><li>SEO 是搜索引擎优化：提升网站在搜索引擎排名<ul><li>可以通过 meta 标签设置 description / keyword 等值，一般值由产品需求提供</li><li>可以通过服务端渲染技术 SSR （react - next / vue - nuxt）</li></ul></li></ul><ol start="2"><li>canvas</li></ol><ul><li>概念：画布，用来绘制图形图表</li><li>项目中主要用来完成数据可视化功能：比如数据大屏展示/适配/实时更新等</li></ul><ol start="3"><li>localStorage / sessionStorage</li></ol><ul><li>区别<ul><li>localStorage 永久存储，通常用来存储用户的登录唯一标识 token</li><li>sessionStorage 临时会话存储（关闭浏览器会自动清空内容）</li></ul></li><li>扩展其他存储方案<ul><li>cookie<ul><li>储存体积小（4KB）</li><li>发送请求，cookie 会自动携带</li></ul></li><li>webStorage<ul><li>储存体积更大（2mb）</li><li>必须手动携带（封装 axios 中请求拦截器在请求头中携带 token 参数）</li></ul></li></ul></li></ul><ol start="4"><li>WebWorker</li></ol><ul><li>多线程操作，可以用于项目性能优化：比如将计算量大的任务交给 web worker 处理(大文件上传)</li></ul><h2 id="2-常见的行内元素和块级元素有哪些？它们的区别？">2. 常见的行内元素和块级元素有哪些？它们的区别？</h2><ol><li>行内元素 span i a</li><li>块级元素 div p ul/li header/footer form</li><li>行内块元素 img input</li></ol><p>区别：</p><ol><li>行内和行内块元素一行多个，块级元素独占一行</li><li>行内元素不能设置 width/height，行内块和块级元素可以设置</li></ol><h2 id="3-谈谈-iframe">3. 谈谈 iframe</h2><ol><li><p>概念：能在当前页面嵌套其他页面（能在当前应用嵌套其他子应用）</p></li><li><p>问题</p></li></ol><ul><li>同源情况下, 可以通过 iframe 标签直接获取子页面的数据（比如，iframe.documentWindow 获取到 window 对象）</li><li>不同源情况下，postMessage 方法 和 message 事件的方式进行通信<ul><li>postMessage 方法，用来发送数据</li><li>message 事件，用来接受数据</li></ul></li></ul><ol start="3"><li>引申</li></ol><p>公司有多个项目，需要汇总到一个项目中一起使用，简单实现可以用 iframe 标签，也可以使用前端微应用框架：qiankun / micro 来实现</p><h1>CSS</h1><h2 id="1-CSS3-新特性">1. CSS3 新特性</h2><ol><li>新增了选择器</li></ol><ul><li>:last-child 匹配父元素的最后一个子元素</li><li>:nth-child(n) 匹配父元素的第 n 个子元素</li></ul><ol start="2"><li>边框特性</li></ol><ul><li>border-radius 圆角</li></ul><ol start="3"><li>颜色与不透明度</li></ol><ul><li>opacity: 0.5;</li><li>color: rgba(0, 0, 0, 0.5)</li></ul><ol start="4"><li>阴影</li></ol><ul><li>text-shadow 文字阴影</li><li>box-shadow 盒子阴影</li></ul><ol start="5"><li>transform 变形</li></ol><ul><li>transform: rotate(9deg) 旋转</li><li>transform: scale(0.5) 缩放</li><li>transform: translate(100px, 100px) 位移</li></ul><ol start="6"><li>过渡与动画</li></ol><ul><li><p>transition 过渡</p></li><li><p>animation 动画</p><p>Vue 中 transition 组件，用来给显示隐藏切换的元素一个动画/过渡效果<br><a href="https://gitee.com/xxpromise/class220829/blob/master/03.vue3-vite/src-16-vue-router/App.vue">https://gitee.com/xxpromise/class220829/blob/master/03.vue3-vite/src-16-vue-router/App.vue</a></p></li></ul><ol start="7"><li>媒体查询</li></ol><ul><li>@media 用来做响应式布局</li></ul><blockquote><p>至少说 4 个点</p></blockquote><h2 id="2-盒模型">2. 盒模型</h2><ol><li><p>概念：页面渲染时，DOM 元素所采用的布局模型。 可通过 box-sizing 进行设置。</p></li><li><p>分类：</p></li></ol><ul><li>content-box (W3C 标准盒模型)<br>当给元素设置 width 和 height 时，只会改变 width + height。</li><li>border-box (IE 盒模型)<br>当给元素设置 width 和 height 时，会改变 width + height + padding。</li><li>其他未实现了</li></ul><h2 id="3-BFC">3. BFC</h2><ol><li>概念</li></ol><ul><li>BFC，又称为块级格式化上下文，指的是：一个独立的渲染区域.</li></ul><ol start="2"><li>触发条件（开启 BFC）</li></ol><ul><li>设置 overflow，即 hidden，auto，scroll</li><li>设置浮动，不包括 none</li><li>设置定位，absolute 或者 fixed 等方式</li></ul><ol start="3"><li>具体规则</li></ol><ul><li>BFC 是一个块级元素，块级元素在垂直方向上依次排列。</li><li>BFC 是一个独立的容器，内部元素不会影响容器外部的元素。</li><li>属于同一个 BFC 的两个盒子，外边距 margin 会发生重叠，并且取最大外边距。</li><li>计算 BFC 高度时，浮动子元素也要参与计算。</li></ul><ol start="4"><li>应用</li></ol><ul><li>阻止 margin 重叠</li><li>清除浮动，防止高度塌陷</li><li>阻止标准流元素被浮动元素覆盖</li></ul><h2 id="4-选择器权重-优先级">4. 选择器权重&amp;优先级</h2><ul><li><code>!important &gt; 行内样式 &gt; #id &gt; .class &gt; tag &gt; * &gt; 继承 &gt; 默认</code></li><li>CSS 选择器浏览器是 <strong>从右往左</strong> 依次解析</li></ul><h2 id="5-CSS-预处理器-Sass-Less-Stylus">5. CSS 预处理器(Sass/Less/Stylus)</h2><ol><li><p>概念：CSS 预处理器定义了一种新的语言，可以更方便的维护和管理 CSS 代码</p></li><li><p>比如我最常用的 sass</p></li></ol><ul><li>可以使用 <code>$</code> 来定义变量</li><li>可以样式嵌套</li><li>可以通过 <code>mixin</code> 来定义混合，复用代码</li></ul><ol start="3"><li>Vue 项目中使用</li></ol><ul><li>通过安装 <code>sass sass-loader</code> 依赖就可以直接使用 sass 了</li><li>开发中我会定义全局变量文件，那么这个文件每个 sass 使用都要引入，太麻烦了。所以我通常在项目中会进行脚手架配置，scss - additionalData 让其给每个 sass 文件自动追加引入全局变量文件的代码，从而让其全局生效</li></ul><ol start="4"><li>扩展</li></ol><ul><li>现阶段样式变量 css 也支持了<ul><li>通过 <code>:root&#123; --xxx-xx: xxx &#125;</code> 定义</li><li>通过 <code>var(--xxx-xx)</code> 使用</li></ul></li></ul><h2 id="6-flex-布局">6. flex 布局</h2><ol><li>概念</li></ol><p>Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性。</p><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称&quot;容器&quot;。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称&quot;项目&quot;。</p><p>容器默认存在两根轴：主轴和交叉轴（也叫做侧轴）。默认水平方向的为主轴，垂直方向为侧轴。</p><ol start="2"><li>容器的属性（2-3 个）</li></ol><ul><li>flex-direction 定义主轴的方向</li><li>flex-wrap 定义是否换行</li><li>flex-flow 是 flex-direction 属性和 flex-wrap 属性的简写形式</li><li>justify-content 定义项目在主轴上的对齐方式</li><li>align-items 定义项目在侧轴上的对齐方式</li><li>align-content 定义项目在交叉轴上如何对齐</li></ul><ol start="3"><li>项目的属性（2-3 个）</li></ol><ul><li>order 定义项目的排列顺序。数值越小，排列越靠前，默认为 0。</li><li>flex-grow 定义项目的放大比例，默认为 0，即如果存在剩余空间，也不放大。</li><li>flex-shrink 定义了项目的缩小比例，默认为 1，即如果空间不足，该项目将缩小。</li><li>flex-basis 定义了在分配多余空间之前，项目占据的主轴空间。它的默认值为 auto，即项目的本来大小。</li><li>flex 是 flex-grow, flex-shrink 和 flex-basis 的简写，默认值为 0 1 auto。</li><li>align-self 允许单个项目有与其他项目不一样的对齐方式，可覆盖 align-items 属性。</li></ul><ol start="4"><li>扩展：flex: 1 啥意思</li></ol><ul><li>flex-grow: 1 如果存在剩余空间, 该项目会放大。</li><li>flex-shrink: 1 如果剩余空间不足，该项目会缩小。</li><li>flex-basis: 0% 设置为 0% 之后，即不占据主轴空间，但是因为有 flex-grow 和 flex-shrink 的设置，该项目会自动放大或缩小。</li></ul><h2 id="7-实现两栏布局">7. 实现两栏布局</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: deeppink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-隐藏页面元素方式">8. 隐藏页面元素方式</h2><ol><li>display: none 不占位。不会响应 DOM 事件。</li><li>opacity: 0 占位，但不可见。会响应 DOM 事件。</li><li>visibility: hidden 占位，但不可见。不会响应 DOM 事件。</li><li>position: absolute; left: -10000px 移动到屏幕外</li><li>z-index: -1 将别的定位元素遮盖掉当前元素</li></ol><h2 id="9-让元素水平垂直居中方式">9. 让元素水平垂直居中方式</h2><ol><li>利用绝对定位, 子元素未知宽高</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>利用绝对定位, 子元素未知宽高</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>利用绝对定位, 子元素必须明确宽高</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>利用 flex</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1>JavaScript</h1><h2 id="1-说说-JS-的数据类型">1. 说说 JS 的数据类型</h2><ol><li>基本数据类型</li></ol><ul><li>number</li><li>string</li><li>boolean</li><li>null</li><li>undefined</li><li>symbol<ul><li>用来给变量唯一的值</li><li>用来给对象唯一的属性名（对象属性名的类型只能是：string，symbol）</li></ul></li><li>bigint<ul><li>当 number 类型计算超过最大数（Number.MAX_SALE_NUMBER）或小于最小值，计算就会出现问题，这个时候可以用 bigint 解决（实际开发很少见）</li></ul></li></ul><ol start="2"><li>引用数据类型</li></ol><ul><li>object</li><li>function</li><li>array</li></ul><h2 id="2-如何判断-JS-数据类型">2. 如何判断 JS 数据类型</h2><ol><li>typeof</li></ol><p>大部分类型都能检查出来，但是对于 null\object\array 无法区分</p><ol start="2"><li>A instanceof B</li></ol><p>简单理解：检查 A 是否是 B 的实例<br>真正理解：检查 A 的某一个<code>__proto__</code>是否和 B.prototype 指向同一个对象</p><p>主要用来检测引用数据类型</p><ol start="3"><li>Object.prototype.toString.call(xxx).slice(8, -1)</li></ol><p>完美解决方案，可以检测所有数据类型，开发中使用 toString 方法去封装工具函数去检测类型</p><ol start="4"><li>Array.isArray</li></ol><p>检测是否是数组类型</p><ol start="5"><li>A === B</li></ol><p>检测 A 和 B 的值和类型都要相等</p><h2 id="3-说说常见的数组方法">3. 说说常见的数组方法</h2><ol><li>更新数组的方法</li></ol><ul><li>push 给数组最后添加一个元素</li><li>pop 删除数组最后一个元素</li><li>unshift 给数组最前面添加一个元素</li><li>shift 删除数组最前面一个元素</li><li>splice 删除/新增指定下标元素</li><li>sort 排序</li><li>reverse 反转</li></ul><ol start="2"><li>遍历元素的方法</li></ol><ul><li>forEach 遍历</li><li>map 返回一个新数组，新数组长度和原数组一致，但内部的值往往会发生变化。（长度不变，值变）<ul><li>在 React 中更新数据中某个值，往往使用 map 方法。</li></ul></li><li>filter 返回一个新数组，新数组长度往往比原数组更少，但内部的值和原数组一致。（长度变，值不变）<ul><li>在 React 中删除数据中某个值，往往使用 filter 方法。</li></ul></li><li>reduce 常用于统计、累加和求和等功能。<ul><li>购物车模块，计算总价。</li></ul></li><li>find 查找某个元素，找到返回这个元素，找不到返回 undefined。</li><li>findIndex 查找某个元素的下标，找到返回这个元素下标，找不到返回 -1。</li><li>every 所有返回 true 整体才返回 true，只要有一个返回 false，整体就返回 false。</li><li>some 只要有一个返回 true，整体就返回 true，只有全部返回 false，整体才返回 false。</li></ul><ol start="3"><li>其它方法</li></ol><ul><li>slice 截取数组中某些元素</li><li>concat 拼接数组</li><li>join 将数组内部元素以某种方式拼接成字符串</li><li>includes 判断是否包含某个元素，包含返回 true，不包含返回 false</li><li>indexOf 判断是否包含某个元素，包含返回其下标，不包含返回-1</li></ul><p><strong>至少能说个 6-7，并且相对复杂的方法</strong></p><h2 id="4-常见的-DOM-操作有哪些">4. 常见的 DOM 操作有哪些</h2><ol><li>新增 DOM 元素</li></ol><ul><li>document.createElement() 创建 DOM 元素</li><li>xxxDom.appendChild() 将某个 dom 元素插入到 xxxDom 内</li></ul><ol start="2"><li>删除 DOM 元素</li></ol><ul><li>xxxDom.removeChild() 将 xxxDom 下面某个子元素删除</li><li>xxxDom.remove()将 xxxDom 自身删除</li></ul><ol start="3"><li>修改 DOM 元素</li></ol><ul><li>xxxDom.innerText / xxxDom.textContent 设置元素的文本内容</li><li>xxxDom.innerHTML 设置元素的 html 内容</li></ul><ol start="4"><li>获取/查询 DOM 元素</li></ol><ul><li>document.getElementById() 根据 id 选择器获取某个 DOM 元素</li><li>document.querySelector()根据任意选择器获取找到的第一个 DOM 元素</li><li>document.querySelectorAll() 根据任意选择器获取找到的所有 DOM 元素集合</li></ul><h2 id="5-说说你对闭包的理解">5. 说说你对闭包的理解</h2><ol><li>概念</li></ol><p>通过 chrome 开发者调试工具得知: 闭包本质是内部函数中的一个容器(非 js 对象), 这个容器中包含了引用的局部变量</p><ol start="2"><li>产生原因</li></ol><ul><li>函数嵌套</li><li>内部函数引用外部函数的局部变量</li><li>调用外部函数时就会产生闭包</li></ul><ol start="3"><li>闭包的生命周期</li></ol><ul><li><p>产生：当内部函数创建时</p></li><li><p>死亡：当内部函数没有变量引用，成为垃圾对象，就会自动被 GC(垃圾回收机制)自动回收</p></li></ul><ol start="4"><li>闭包作用：</li></ol><ul><li>延长局部变量生命周期（活的久点）</li><li>让函数外部可以间接操作函数内部的局部变量数据</li></ul><ol start="5"><li>闭包在项目中的应用</li></ol><ul><li>React 中复用函数的手段，高阶函数形式</li><li>实际开发中很少使用闭包，我一般研究源码时发现闭包的场景，vue2 响应式原理中数据劫持阶段，内部通过闭包形式保存 dep 对象，这个 dep 对象在 vue2 响应式原理非常重要<ul><li>源码：<a href="https://github.com/vuejs/vue/blob/main/src/core/observer/index.ts">https://github.com/vuejs/vue/blob/main/src/core/observer/index.ts</a> 128 行开始</li></ul></li></ul><h2 id="6-谈谈-this-指向">6. 谈谈 this 指向</h2><p>普通情况下，this 指向看函数的调用方式：</p><ol><li><p>直接调用（默认绑定），this 指向 window, 严格模式（‘use strict’）下指向 undefined</p></li><li><p>对象调用函数（隐式绑定），this 指向调用的对象</p></li><li><p>call/apply/bind 调用函数（显示绑定），this 指向传入第一个参数</p></li></ol><ul><li>call/apply/bind 区别和联系：<ul><li>call/apply 都会立即执行函数，bind 返回一个新函数</li><li>call/apply 执行函数时函数的 this 指向第一个参数，bind 方法返回的新函数的 this 指向第一个参数，原函数不变</li><li>call/bind 方法传参是一致的, 可以 n 个参数, apply 只能两个参数，第二个参数是数组</li></ul></li></ul><ol start="4"><li>new 调用函数，this 指向生成的实例对象</li></ol><p>特殊情况：</p><ol><li><p>箭头函数：this 指向包裹它离它最近的函数的 this（指向外部函数的 this）</p></li><li><p>回调函数：</p></li></ol><ul><li>定时器回调函数：window，严格模式下 undefined</li><li>DOM 事件回调函数：指向绑定的事件的 DOM 元素</li><li>Vue 生命周期函数 / methods 中的函数 / 微信小程序生命周期函数：指向组件实例对象</li></ul><h2 id="7-说说原型与原型链">7. 说说原型与原型链</h2><ol><li>原型</li></ol><ul><li>我们说的原型，指的是两个原型属性：<code>__proto__</code> 和 prototype</li><li>prototype 叫做显示原型属性</li><li><code>__proto__</code> 叫做隐式原型属性</li><li>每个函数都有一个显式原型属性，它的值是一个对象，我们叫做原型对象。</li><li>这个原型对象上默认会有一个 constructor 方法，指向函数本身，有一个 <code>__proto__</code> 属性，指向 Object 的原型对象</li><li>每个实例都有一个隐式原型属性，它的值指向其对应构造函数的原型对象。</li></ul><p>特殊情况:</p><ul><li><code>Function.prototype === Function.__proto__</code> 他们指向同一个对象</li><li><code>Object.prototype.__proto__ === null</code> 这里是原型链的尽头</li></ul><ol start="2"><li>原型链</li></ol><ul><li>概念：从对象的 <code>__proto__</code> 开始, 连接的所有对象, 这个结构叫做原型链，也可称为“隐式原型链”</li><li>作用：用来查找对象的属性</li><li>规则：在查找对象属性或调用对象方法时，会先在对象自身上查找， 找不到就会沿着原型链查找，找到就返回属性的值，最终来到 <code>Object.prototype.__proto__</code>，找不到返回 undefined</li><li>应用：利用原型链可以实现继承<ul><li>Vue 中全局事件总线 $bus</li><li>项目中 <code>$api / $http</code> 汇总所有接口函数</li></ul></li></ul><h2 id="8-说说-JS-的垃圾回收机制">8. 说说 JS 的垃圾回收机制</h2><p>在 JS 中对象的释放（回收）是靠浏览器中的垃圾回收器来回收处理的</p><ol><li>垃圾回调器</li></ol><ul><li>浏览器中有个专门的线程， 它每隔很短的时间就会运行一次</li><li>主要工作：判断一个对象是否是垃圾对象，如果是，清除其内存数据，并标记内存是空闲状态</li></ul><ol start="2"><li>垃圾回收策略</li></ol><ul><li>机制 1：标记清除法<ul><li>简述：标记阶段即为所有活动对象做上标记，清除阶段则把没有标记（也就是非活动对象）销毁。</li><li>缺点：<ul><li>内存碎片化，空闲内存块是不连续的，容易出现很多空闲内存块，还可能会出现分配所需内存过大的对象时找不到合适的块</li><li>分配速度慢，因为即便是使用 First-fit 策略，其操作仍是一个 O(n) 的操作，最坏情况是每次都要遍历到最后，同时因为碎片化，大对象的分配效率会更慢。</li></ul></li><li>解决：可以使用 标记整理（Mark-Compact）算法，标记结束后，标记整理算法会将活着的对象（即不需要清理的对象）向内存的一端移动，最后清理掉边界的内存</li></ul></li></ul><p><strong>至少说上面内容</strong></p><ul><li>机制 2：引用计数法<ul><li>简述：它把对象是否不再需要简化定义为对象有没有其他对象引用到它。如果没有引用指向该对象（引用计数为 0），对象将被垃圾回收机制回收。</li><li>缺点：<ul><li>需要一个计数器，所占内存空间大，因为我们也不知道被引用数量的上限。</li><li>解决不了循环引用导致的无法回收问题。</li></ul></li></ul></li></ul><ol start="3"><li>JS 的 V8 引擎垃圾回收机制使用的是基于标记清除算法，不过对其做了一些优化。</li></ol><ul><li>针对新生区采用并行回收。</li><li>针对老生区采用增量标记与惰性回收。</li></ul><h2 id="9-说一下-JS-的事件循环机制">9. 说一下 JS 的事件循环机制</h2><ol><li><p>概念：异步代码执行机制</p></li><li><p>流程：</p></li></ol><ul><li>js 主线程会依次执行所有代码，遇到同步代码依次执行，遇到异步代码会交给相应管理模块（分线程）去处理：<ul><li>比如遇到定时器，会交给定时器管理模块管理，它会计时，到点时会自动将回调函数添加到回调队列中（宏任务队列）</li><li>比如遇到 DOM 事件，会交给 DOM 管理模块管理，它会绑定事件，当触发事件时会自动将回调函数添加到回调队列中（宏任务队列）</li><li>比如遇到 ajax 请求，会交给 ajax 管理模块管理，它会发送请求，等响应回来时会自动将回调函数添加到回调队列中（宏任务队列）</li></ul></li><li>js 主线程并不会等，会依次执行后面的代码，直到所有代码执行完毕，js 主线程就会开启事件轮询</li><li>js 主线程会遍历回调队列中回调函数，依次取出，同步执行<ul><li>回调队列分为两种队列：宏任务队列和微任务队列</li><li>宏任务队列：定时器回调函数、ajax 回调函数、DOM 事件回调函数</li><li>微任务队列：Promise.then/catch/finally、mutationObserver（nextTick 方法的原理）</li><li>优先执行微任务队列中的回调函数，直到全部执行完毕，</li><li>在执行宏任务队列中第一个回调函数，执行完又会执行，微任务队列中的回调函数，直到全部执行完毕，</li><li>在执行下一个宏任务队列中回调函数，执行完又会执行，微任务队列中的回调函数，直到全部执行完毕，以此类推</li></ul></li></ul><h2 id="10-Web-Worker">10. Web Worker</h2><ol><li>概念</li></ol><p>Web Worker 是 H5 新特性，允许我们开辟分线程，运行 js 代码。</p><ol start="2"><li>使用</li></ol><ul><li><code>const worker = new Worker('./xxx.js')</code> 创建分线程执行 js 脚本</li><li>主线程通过 <code>worker.onmessage</code> 事件接受分线程的消息</li><li>主线程通过 <code>worker.postMessage</code> 方法向分线程发送消息</li><li>分线程通过 <code>self.onmessage</code> 事件接受主线程的消息</li><li>分线程通过 <code>self.postMessage</code> 方法向主线程发送消息</li></ul><ol start="3"><li>应用</li></ol><p>主要用于 js 中大量计算工作，比如大文件上传中计算文件的 hash，使用了 web worker</p><h2 id="11-说出-ES6-常用新语法">11. 说出 ES6 常用新语法</h2><ol><li>简单的语法</li></ol><ul><li>const 与 let</li><li>解构赋值</li><li>形参默认值</li><li>扩展运算符: …</li><li>模板字符串</li><li>对象的属性与方法简写</li><li>模块化语法</li></ul><ol start="2"><li>比较复杂的语法</li></ol><ul><li>箭头函数<ul><li>编码简洁</li><li>不能通过 new 来创建实例对象，没有 constructor 方法</li><li>内部没有 arguments, 可以通过 rest 参数来代替</li><li>没有自己的 this, 使用外部作用域中的 this, 不能通过 bind 来绑定 this</li><li>说到 this 指向，平时我专门总结过 this 指向<ul><li>…</li></ul></li></ul></li><li>还有 class 与 extends<ul><li>主要用来做继承的，是构造函数+原型的语法糖</li><li>平时在项目主要还是通过原型的方式去继承：比如$bus</li></ul></li><li>promise / generator / async &amp; await（引申 js 事件循环机制）<ul><li>promise…(细说 promise)</li><li>promise 并不是解决回调地狱的最佳方案，后面推出了 generator</li><li>generator 惰性函数（懒），暂停 yield 执行 next，但是使用太复杂了，后面又推出了 async 函数</li><li>async、await、promise 一起使用，是项目中解决回调地狱的最佳方案</li></ul></li><li>Proxy（引申 vue2 和 vue3 响应式原理）<ul><li>可以对对象进行代理，当读取/设置对象上的属性时，会执行相应的 get/Set</li><li>这个内容主要在 Vue 响应式原理中使用了，Vue3 响应式通过 Proxy 实现的，原有和新增属性都是响应式。</li></ul></li><li>Map / Set / WeakMap / WeakSet (引申 vue3 响应式原理)<ul><li>他们都是新的存储数据的结构</li><li>Map 类似于对象，存储 key-value 的结构，特点：1. 有序 2. key 是任意类型</li><li>Set 类似于数组，特点：1. 值是唯一的</li><li>WeakMap 类似于 Map，存储 key-value 的结构，特点：1. 有序 2. key 必须是对象类型 3. 一旦 key 没有外部引用，会自动删除</li><li>WeakSet 类似于 Set，特点：1. 值是唯一的 2. 值必须是对象类型 3. 一旦值没有外部引用，会自动删除</li></ul></li></ul><h2 id="12-说说-ES6-的-promise">12. 说说 ES6 的 promise</h2><ol><li>概念</li></ol><p>异步代码解决方案，用于解决回调地狱问题。</p><ol start="2"><li>promise 对象内部有 3 种状态</li></ol><ul><li>pending 初始化状态</li><li>resolved / fulfilled 成功状态</li><li>rejected 失败状态</li></ul><p>状态只能变化一次，只能有以下两种变化：</p><ul><li>pending --&gt; resolved</li><li>pending --&gt; rejected</li></ul><p>状态发生变化后不能在改了。</p><ol start="3"><li>如何改变 promise 的状态</li></ol><ul><li>调用 resolve(), 改成成功状态</li><li>调用 reject(), 改为失败状态</li><li>throw new Error(), 改为失败状态</li></ul><ol start="4"><li>promise 实例对象上的方法</li></ol><ul><li>then 接受两个回调（一般只接受一个），第一个是成功回调，第二个是失败回调</li><li>catch 接受一个回调，是失败回调</li><li>finally 接受一个回调，不管成功/失败都会触发</li></ul><ol start="5"><li>Promise 构造函数上的方法</li></ol><ul><li>Promise.resolve() 返回一个成功的 promise 对象<ul><li>也可能返回失败的 promise 对象，比如 Promise.resolve(Promise.reject())</li></ul></li><li>Promise.reject() 返回一个失败的 promise 对象</li><li>Promise.all([promise1, promise2, …]) 只有所有 promise 成功才成功，只要有一个 promise 失败就会失败</li><li>Promise.allSettled([promise1, promise2, …]) 只要所有 promise 状态发生变化就成功，结果值包含所有 promise 的结果值（不管成功/失败）</li><li>Promise.race([promise1, promise2, …]) 只要有一个 promise 成功/失败，就成功/失败。</li></ul><ol start="6"><li>应用</li></ol><ul><li>在项目中一般是使用 axios 发送请求时会使用，返回值是一个 promise 对象，结合 async await 来处理</li><li>如果同时要发送多个请求的话，可以使用 Promise.all() 方法来处理</li></ul><h2 id="13-谈谈模块化语法">13. 谈谈模块化语法</h2><ol><li>Commonjs 模块化语法</li></ol><ul><li>主要用于 NodeJS 端</li><li>语法：<ul><li>引入：require</li><li>暴露：exports / module.exports</li></ul></li></ul><ol start="2"><li>ES6 模块化语法</li></ol><ul><li><p>主要用于浏览器端</p></li><li><p>语法：</p></li><li><p>引入：import</p></li><li><p>暴露：export</p></li><li><p>总结</p><ul><li>如果模块采用默认暴露：import xxx from ‘xxx’</li><li>如果模块采用分别/统一暴露：<ul><li>如果需要引入模块部分内容：import { xxx } from ‘xxx’</li><li>如果需要引入模块全部内容：<code>import * as xxx from 'xxx'</code></li></ul></li></ul></li><li><p>扩展</p><ul><li>无论什么暴露方式，暴露的一定是一个对象<ul><li>默认暴露：对象上添加一个 default 属性，值为暴露的内容</li><li>分别暴露/统一暴露：直接在对象上暴露内容</li></ul></li><li><code>import &#123; xxx &#125; from './xxx'</code> 引入暴露内容的某个属性（部分）</li><li><code>import xxx from './xxx'</code> 引入暴露内容的 default 属性（只要 default）</li><li><code>import * as xxx from './xxx'</code> 引入暴露内容的所有内容（全部）</li></ul></li></ul><h2 id="14-谈谈箭头函数">14. 谈谈箭头函数</h2><ul><li>编码简洁</li><li>不能通过 new 来创建实例对象，没有 constructor 方法</li><li>内部没有 arguments, 可以通过 rest 参数来代替</li><li>没有自己的 this, 使用外部作用域中的 this, 不能通过 bind 来绑定 this</li><li>说到 this 指向，平时我专门总结过 this 指向<ul><li>…</li></ul></li></ul><h2 id="15-浅度克隆和深度克隆">15. 浅度克隆和深度克隆</h2><ol><li>浅度克隆</li></ol><ul><li>object.assign()</li><li>扩展运算符: { …obj }</li><li>Array.prototype.slice()</li><li>Array.prototype.concat()</li></ul><ol start="2"><li>深度克隆</li></ol><ul><li>JSON.parse(JSON.stringify())</li><li>自定义深度克隆</li><li>lodash 中 cloneDeep</li></ul><ol start="3"><li>区别</li></ol><ul><li>浅度克隆: 对当前对象进行克隆，基本类型克隆生成新值，引用类型克隆的是地址值（所以当修改对象内部引用类型数据时，原对象也会发生变化）</li><li>深度克隆: 会完全复制整个对象，包括这个对象所包含的内部对象（所以不管如何修改对象数据，原对象都不会发生变化）。</li></ul><ol start="4"><li>深度克隆应用</li></ol><p>权限管理功能中使用深度克隆克隆了异步路由表</p><h2 id="16-节流和防抖">16. 节流和防抖</h2><h1>TypeScript</h1><h2 id="1-JavaScript-和-TypeScript-的区别">1. JavaScript 和 TypeScript 的区别</h2><ol><li>JavaScript 没有重载概念，TypeScript 有可以重载和接口类型合并</li><li>TypeScript 扩展更多的类型： 接口 interface、泛型、enum、unknown、any、void、never 等；</li><li>TypeScript 中引入了模块的概念，可以把声明、数据、函数和类封装在模块中；</li></ol><h2 id="2-interface-和-type-的区别">2. interface 和 type 的区别</h2><ol><li>interface 只能定义引用数据类型，不能定义基本数据类型。而 type 都可以；</li><li>interface 定义对象类型不够灵活，type 都可以；</li><li>type 声明的类型不能重名，interface 声明的重命名会声明合并；</li><li>两者继承的方法不同；</li></ol><ul><li>interface 使用 extends 继承</li><li>type 使用 &amp; 关键字</li></ul><p>总结： 一般开发中对象类型用 interface 定义，数组类型用 type</p><h2 id="3-泛型">3. 泛型</h2><ol><li>概念</li></ol><p>在接口、类、函数的时候，不预先定义类型，而是在使用时定义类型</p><ol start="2"><li>泛型默认值</li></ol><p><code>&lt;T = string&gt;</code></p><ol start="3"><li>泛型约束</li></ol><p><code>&lt;T extends U&gt;</code></p><ol start="4"><li><p>泛型工具类型：Pick(挑选)、Omit（排除）、Partial（可选）、Required（必填）</p></li><li><p>泛型应用：</p></li></ol><ul><li>axios: <code>request&lt;any, Xxx&gt;()</code></li><li>react: <code>useState&lt;Xxx&gt;()</code></li><li>vue3: <code>ref&lt;Xxx&gt;()</code> <code>reactive&lt;Xxx&gt;()</code></li></ul><h1>Server</h1><h2 id="1-谈谈-http-协议">1. 谈谈 http 协议</h2><ol><li>概念</li></ol><p>HTTP 是超文本传输协议(Hypertext Transfer Protocol)，是浏览器与服务器通信的协议。</p><ol start="2"><li>报文</li></ol><p>协议通信的内容我们称为报文。</p><p>浏览器发送给服务器叫做请求报文，服务器返回给浏览器的叫做响应报文。</p><p>报文由报文首行、报文头部、空行、报文体组成。</p><ol start="3"><li>请求报文</li></ol><p>请求报文：请求首行、请求头、空行、请求体组成。</p><p>请求首行主要有：请求方式、请求地址、get 请求的查询字符串参数、协议和版本号</p><p>请求头主要有：</p><ul><li><code>Connection: keep-alive</code> 保持长链接, 能共享一个 TCP 链接通道来发送请求，通信效率更高</li><li><code>Content-Type</code> 请求体参数类型<ul><li>我们使用 axios 发送请求，一般是：application/json 格式</li><li>我们使用原生 form 表单发送请求，一般是：application/x-www-form-urlencoded 格式</li></ul></li><li><code>User-Agent</code> 用户代理, 可以识别用户的客户端环境</li><li><code>Referer</code> 请求来源地址, 防盗链</li><li><code>Cookie / token</code> 用户唯一标识</li></ul><p>请求体主要有：POST 请求的参数</p><ol start="4"><li>响应报文</li></ol><p>响应报文：响应首行、响应头、空行、响应体组成。</p><p>响应首行主要有：协议和版本号、响应状态码</p><p>响应状态码分为 5 种类型：1xx、2xx、3xx、4xx、5xx（1 开头、2 开头、3 开头、4 开头、5 开头）</p><ul><li>1xx 请求正在处理</li><li>2xx 请求处理成功<ul><li>200 请求成功</li></ul></li><li>3xx 请求需要进一步处理（请求重定向）<ul><li>301 永久重定向</li><li>302 临时重定向</li><li>304 重定向到浏览器缓存中（协商缓存）</li></ul></li><li>4xx 客户端错误<ul><li>401 认证/授权失败</li><li>403 禁止访问</li><li>404 找不到资源</li><li>407 token 过期/失效</li></ul></li><li>5xx 服务器错误<ul><li>500 服务器内部错误</li></ul></li></ul><p>响应头：</p><ul><li>强制缓存字段 Cache-Control / Expires</li><li>协商缓存字段 Etag / Last-Modified</li><li>CORS 解决跨域字段：Access-Control-Allow-Origin</li></ul><p>响应体：响应的具体数据</p><h2 id="2-HTTP-1-1-和-HTTP-2-0-的区别">2. HTTP 1.1 和 HTTP 2.0 的区别</h2><ol><li>二进制格式(Binary Format)</li></ol><ul><li>HTTP/1.1 通信内容可以是文本或二进制</li><li>HTTP/2 通信内容都是二进制</li></ul><ol start="2"><li>多路复用(MultiPlexing)</li></ol><ul><li>HTTP/1.1 长链接（connection: keep-alive）是串行的，后面的请求等待前面请求的返回才能发送</li><li>HTTP/2 多路复用，一个连接里，客户端和服务器都可以同时发送多个请求或响应，而且不用按照顺序一一发送</li></ul><ol start="3"><li>头部压缩</li></ol><ul><li>HTTP 1.1 通信的请求头内容太多了，多次通信字段重复</li><li>HTTP/2 实现了头部压缩（ gzip 或 compress ），体积更小，同时只会发送不同的字段，和相同字段的索引号，体积更小</li></ul><ol start="4"><li>服务器推送(server push)</li></ol><ul><li>HTTP 1.1 协议不能服务器向浏览器发送消息，需要借助 ajax 轮询或 WebSocket 实现</li><li>HTTP/2 允许服务器向浏览器主动发送消息</li></ul><h2 id="3-HTTP-和-HTTPS-协议的区别">3. HTTP 和 HTTPS 协议的区别</h2><ol><li>HTTP 协议是明文传输的，HTTPS 通过 SSL 加密传输的；</li><li>使用不同的连接方式，端口也不同，HTTP 协议默认端口是 80，HTTPS 协议默认端口是 443；</li></ol><h2 id="4-TCP-的三次握手和四次挥手">4. TCP 的三次握手和四次挥手</h2><p>三次握手的目的：是为了确认双方的接收能力和发送能力是否正常。</p><p>第一次握手：由浏览器发送给服务器，服务器确定浏览器的发送能力<br>第二次握手：由服务器发送给浏览器，浏览器确定的服务器接受和发送能力<br>第三次握手：由浏览器发送给服务器，服务器确定的浏览器的接受能力</p><p>四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代表不能再向对方发送数据，连接处于的是半释放的状态。（确保双方都接受完毕和发送完毕数据）</p><p>第一次挥手：由浏览器发送给服务器，告诉服务器数据发送完了<br>第二次挥手：由服务器发送给浏览器，告诉浏览器数据接受完了<br>第三次挥手：由服务器发送给浏览器，告诉浏览器数据发送完了<br>第四次挥手：由浏览器发送给服务器，告诉服务器数据接受完了，此时浏览器会自动断开链接，服务器也会</p><h2 id="5-当在浏览器输入一个地址，按下回车发生了什么">5. 当在浏览器输入一个地址，按下回车发生了什么</h2><ol><li>解析 URL</li></ol><p>解析 URL 是否合法，合法进行下一步，不合法就直接出错。</p><ol start="2"><li>缓存判断</li></ol><p>判断该请求是否命中缓存，命中直接读取缓存，没有命中进行下一步</p><ol start="3"><li>DNS 解析</li></ol><p>将域名地址解析为 ip 地址</p><p>流程：</p><ul><li>首先读取 DNS 缓存：浏览器 DNS 缓存 - 计算机 DNS 缓存 - 路由器 DNS 缓存 - 网络运营商</li><li>然后 DNS 递归查询：根域名服务器 - 顶级域名服务器 - 权威域名服务器</li></ul><ol start="4"><li>TCP 三次握手</li></ol><p>为了确认双方的接收能力和发送能力是否正常。</p><p>第一次握手：由浏览器发送给服务器，服务器确定浏览器的发送能力<br>第二次握手：由服务器发送给浏览器，浏览器确定的服务器接受和发送能力<br>第三次握手：由浏览器发送给服务器，服务器确定的浏览器的接受能力</p><ol start="5"><li>发送请求</li></ol><p>将请求以请求报文形式发送给服务器。</p><p>请求报文由请求首行、请求头、空行、请求体组成。</p><p>请求首行主要有：请求方式、请求地址、get 请求的查询字符串参数、协议和版本号</p><p>请求头主要有：</p><ul><li><code>Connection: keep-alive</code> 保持长链接, 能共享一个 TCP 链接通道来发送请求，通信效率更高</li><li><code>Content-Type</code> 请求体参数类型<ul><li>我们使用 axios 发送请求，一般是：application/json 格式</li><li>我们使用原生 form 表单发送请求，一般是：application/x-www-form-urlencoded 格式</li></ul></li><li><code>User-Agent</code> 用户代理, 可以识别用户的客户端环境</li><li><code>Referer</code> 请求来源地址, 防盗链</li><li><code>Cookie / token</code> 用户唯一标识</li></ul><p>请求体主要有：POST 请求的参数</p><p><strong>报文内容简单说说也行，可以不用这么复杂</strong></p><ol start="6"><li>返回数据</li></ol><p>服务器以响应报文形式返回响应</p><p>响应报文：响应首行、响应头、空行、响应体组成。</p><p>响应首行主要有：协议和版本号、响应状态码</p><p>响应状态码分为 5 种类型：1xx、2xx、3xx、4xx、5xx（1 开头、2 开头、3 开头、4 开头、5 开头）</p><ul><li>1xx 请求正在处理</li><li>2xx 请求处理成功<ul><li>200 请求成功</li></ul></li><li>3xx 请求需要进一步处理（请求重定向）<ul><li>301 永久重定向</li><li>302 临时重定向</li><li>304 重定向到浏览器缓存中（协商缓存）</li></ul></li><li>4xx 客户端错误<ul><li>401 认证/授权失败</li><li>403 禁止访问</li><li>404 找不到资源</li><li>407 token 过期/失效</li></ul></li><li>5xx 服务器错误<ul><li>500 服务器内部错误</li></ul></li></ul><p>响应头：</p><ul><li>强制缓存字段 Cache-Control / Expires</li><li>协商缓存字段 Etag / Last-Modified</li><li>CORS 解决跨域字段：Access-Control-Allow-Origin</li></ul><p>响应体：响应的具体数据</p><p><strong>报文内容简单说说也行，可以不用这么复杂</strong></p><ol start="7"><li>页面渲染</li></ol><ul><li>将 DOM 结构解析成 DOM 树</li><li>将 CSS 样式解析成 CSSOM 树</li><li>将 DOM 树和 CSSOM 树合成渲染（render）树</li><li>根据渲染（render）树首先进行布局，然后进行渲染</li><li>整个过程会触发多次渲染，也就是说构建了部分 DOM 树和 CSSOM 树就会开始合成渲染了</li><li>如果遇到 script 标签会同步执行里面的 js 代码，会阻塞渲染</li><li>如果 script 标签 js 操作了 DOM 或 CSS，重新生成 DOM 树和 CSSOM 树，合成渲染树，布局（重排），渲染（重绘）</li></ul><ol start="8"><li>TCP 四次挥手</li></ol><p>四次挥手的原因是因为 TCP 的连接是全双工的，所以需要双方分别释放到对方的连接，单独一方的连接释放，只代表不能再向对方发送数据，连接处于的是半释放的状态。（确保双方都接受完毕和发送完毕数据）</p><p>第一次挥手：由浏览器发送给服务器，告诉服务器数据发送完了<br>第二次挥手：由服务器发送给浏览器，告诉浏览器数据接受完了<br>第三次挥手：由服务器发送给浏览器，告诉浏览器数据发送完了<br>第四次挥手：由浏览器发送给服务器，告诉服务器数据接受完了，此时浏览器会自动断开链接，服务器也会</p><h2 id="6-强制缓存和协商缓存">6. 强制缓存和协商缓存</h2><p>强制缓存字段：Cache-Control（优先级更高） 、Expires</p><p>协商缓存字段：位于响应头的：Etag / Last-Modified 和位于请求头的 If-None-Match / If-Modified-Since</p><p>整体流程：</p><ol><li><p>第一次请求该资源，没有缓存，服务器返回新资源，同时在响应头携带：强制缓存字段 Cache-Control 和 协商缓存字段：Etag / Last-Modified，此时响应状态码 200</p></li><li><p>第二次以后请求该资源，首先判断该资源强制缓存是否过期，没有过期，直接读取缓存，不会发送请求了，响应状态码 200</p></li><li><p>如果强制缓存过期了，就会发送请求给服务器，同时在请求头自动携带协商缓存字段: 此时 Etag 会改名为 If-None-Match, Last-Modified 会改名为 If-Modified-Since</p></li><li><p>由服务器检查和服务器的 Etag 和 Last-Modified 是否匹配</p></li><li><p>如果匹配没变，就返回响应状态码 304，浏览器接受到会自动去缓存中找该资源使用</p></li><li><p>如果变了，就会返回新的资源，同时在响应头携带新的：强制缓存字段 Cache-Control 和 协商缓存字段：Etag / Last-Modified，此时响应状态码 200</p></li></ol><h2 id="7-谈谈-WebSocket">7. 谈谈 WebSocket</h2><p>WebSocket 是一个全双工通讯协议。</p><p>特点：服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</p><p>使用：</p><p>new WebSocket(url) 传入 url 就可以连接上 WebSocket 服务器了</p><p>通过 message：接受服务器发送的消息</p><p>通过 send 方法：可以给服务器发送消息</p><p>除此以外还有其他方法：close 关闭连接</p><p>其他事件：open：打开事件 error 错误事件 close 关闭事件</p><p>功能：WebSocket 连接时可能因为不好的网络环境会断开链接，此时可以使用心跳检测机制来进行断开重连</p><p>心跳检测:</p><p>web socket 在连接过程中可能会因为网络问题断开连接，我们需要重连，这里用到心跳检测机制</p><p>具体来说：</p><ol><li>检测是否断开链接：</li></ol><p>当我们连接上 ws 服务时，需要开启定时器，隔一段时间（10s - 30s）向 ws 服务器发送一个特殊信号（ping），同时开启定时器（2s）检测服务器是否有回应信号（pong）</p><p>如果在规定时间内有回应，继续此操作，如果没有回应，说明断开连接了，我们要开始重连 ws</p><ol start="2"><li>重连机制</li></ol><p>每隔一段时间发起 ws 的重连，同时重连次数增加，一旦重新连接成功，就归零重连次数，方便下次重连，如果重连次数超过最大次数，就要提示错误，不在尝试了</p><h2 id="8-谈谈-ajax">8. 谈谈 ajax</h2><p>可以发送异步请求，进行局部页面更新</p><p>流程：</p><ol><li>new XMLHttpRequest() 来创建 xhr 对象</li><li>通过 xhr 调用 open 方法，设置请求方式和请求地址（请求地址可以添加查询字符串参数）</li><li>通过 xhr.send 方法发送请求（可以携带请求体参数）</li><li>通过 xhr.onreadystatechange 或 onload 事件监听响应回来的结果，往往需要判断 xhr 的响应状态码是否 2 开头，来判断请求成功还是失败</li></ol><h2 id="9-跨域">9. 跨域</h2><ol><li><p>什么是跨域？<br>违背同源策略产生跨域。</p></li><li><p>什么是同源策略？<br>同源指的是：协议、域名、端口号三者必须完全一致。</p></li><li><p>什么样的请求存在跨域问题？</p></li></ol><p>只有浏览器端的 ajax 请求存在跨域。</p><p>服务器与服务器之间没有跨域，浏览器的 script、img、form 等标签都没有跨域。</p><ol start="4"><li>解决跨域的方案：</li></ol><ul><li>jsonp: 利用 script 标签可以跨域特性进行跨域。</li></ul><p>可以说说具体做法</p><ul><li><p>cors: 服务器设置特定响应头即可实现。access-control-allow-Origin</p></li><li><p>NodeJS 代理服务器: 这是我开发中主要使用解决跨域的方案</p></li></ul><p>比如 vue2 项目，可以在 vue.config.js 中进行配置，配置 devServer 的 proxy，设置代理请求前缀和目标服务器地址等来完成</p><ul><li>Nginx 代理服务器：项目上线时公司采用 nginx 反向代理解决跨域</li></ul><h2 id="10-Nginx">10. Nginx</h2><ol><li>概念</li></ol><p>Nginx 是开源、高性能、高可靠的 Web 服务器和反向代理服务器。</p><ol start="2"><li>基本使用</li></ol><ul><li>反向代理解决跨域</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">3000</span>;</span><br><span class="line">  <span class="attribute">server_name</span> localhost;</span><br><span class="line">  <span class="section">location</span> /app-prod &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://xxx.com/; <span class="comment"># 转发到目标服务器地址</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/app-prod/(.*)</span> /<span class="variable">$1</span> <span class="literal">break</span>; <span class="comment"># 路径重写</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>解决 history 模式前端路由 404 问题</li></ul><p><code>try_files $uri $uri/ /index.html;</code></p><h1>Builder</h1><h2 id="1-谈谈-Git-常见指令">1. 谈谈 Git 常见指令</h2><h2 id="2-谈谈-Git-Flow-Git-工作流程">2. 谈谈 Git Flow / Git 工作流程</h2><ol><li>概念</li></ol><p>是一个 git 标准化操作流程</p><ol start="2"><li>Git 分支</li></ol><ul><li>master 是长期分支，一般用于管理对外发布版本，每个 commit 对一个 tag，也就是一个发布版本</li><li>develop 是长期分支，一般用于作为日常开发汇总，即开发版的代码<br>开发一个新的 feature 直接新在 develop 新开一个临时的 feature 分支，开发完成向 develop 提 Pull Request。</li><li>feature 是短期分支，一般用于一个新功能的开发</li><li>hotfix 是短期分支 ，一般用于正式发布以后，出现 bug，需要创建一个分支，进行 bug 修补。</li><li>release 是短期分支，一般用于发布正式版本之前（即合并到 master 分支之前），需要有的预发布的版本进行测试。release 分支在经历测试之后，测试确认验收，将会被合并的 develop 和 master。</li></ul><ol start="3"><li>提交 commit 规范</li></ol><ul><li><p>feat：开发新功能（feature）</p></li><li><p>fix：修复 bug</p></li><li><p>style： 调整格式（不影响代码运行的变动）</p></li><li><p>build：修改构建相关内容，如 npm、maven 内容。</p></li><li><p>imp：优化已有功能(improve)</p></li><li><p>refactor：重构功能</p></li><li><p>test：添加测试</p></li><li><p>docs：撰写文档（documentation）</p></li><li><p>ci：修改持续集成相关内容(Continues Intergration)</p></li></ul><p><strong>记住一部分就好</strong></p><ol start="4"><li>流程概述</li></ol><ul><li>开发时，以 develop 分支为模板新建一个新的分支：feature/{任务 id}-{任务名称}</li><li>克隆仓库，拉取 feature 开发分支，切换到 feature 开发分支上进行开发</li><li>开发完成，提交合并请求（Pull Request, 也叫 PR），合并 feature 和 develop 分支代码</li><li>由组长审核通过，经过流水线（eslint 检查、测试等），完成合并</li><li>当所有特性开发&amp;基本测试完成，会以 develop 分支为模板新建一个新的分支：release/{版本号}</li><li>release 是预发布分支，会进行进一步测试</li><li>没问题后，会将 release 分支合并到 master 分支，同时生成一个 tag 备份代码，上线代码从 master 分支取出使用</li><li>将来上线代码出现问题，会以 master 分支为模板创建新的分支：hotfix/{任务 id}-{bug 名称}</li><li>解决 bug 后，会合并到 master 分支上，生成新的 tag</li></ul><h2 id="3-谈谈-Webpack">3. 谈谈 Webpack</h2><ol><li>概念</li></ol><p>静态模块打包工具，可以将静态模块编译、打包和输出成一个或多个文件（bundles）。</p><ol start="2"><li>5 个核心概念</li></ol><ul><li>入口(entry): 指示 webpack 从哪个文件开始打包。</li><li>输出(output): 指示 webpack 编译、打包后的文件输出到哪里去。</li><li>加载器(loader): webpack 只能识别 js、json 文件，其他类型的文件需要通过 loader 转化成有效模块才能识别。<ul><li>比如：处理样式文件可以使用 css-loader\style-loader\less-loader\sass-loader</li><li>处理 vue 文件可以使用 vue-loader</li></ul></li><li>插件(plugin): 相对 loader，plugin 可以做范围更广的工作，比如：打包优化，资源管理，注入环境变量。<ul><li>比如：处理 html 资源需要使用 html-webpack-plugin</li><li>eslint 语法风格检查需要使用 eslint-webpack-plugin</li></ul></li><li>模式(mode): 可以选择 development, production 或 none 之中的一个。不同模式会加载不同的配置。</li></ul><h2 id="4-webpack-优化">4. webpack 优化</h2><h2 id="5-vite-和-webpack-的区别">5. vite 和 webpack 的区别</h2><ol><li>底层语言不同</li></ol><p>Vite 是基于 esbuild 采用 go 语言编写，go 语言的操作是纳秒级别</p><p>Webpack 是基于 Nodejs，以毫秒计数</p><p>所以 vite 比 webpack 更快。</p><ol start="2"><li>启动方式</li></ol><p>webpack 启动慢：webpack 首先分析各个模块之间的依赖，然后将所有内容进行打包，模块越多打包速度越慢，所以启动慢。</p><p>vite 启动快：vite 采用了一种懒加载的方式，它在启动的时候不需要打包，而是需要某个模块时，再对模块内容进行编译，所以启动很快</p><ol start="3"><li>首屏渲染</li></ol><p>webpack 渲染快：webpack 启动时已经将所有内容进行打包了，渲染时直接获取资源渲染即可</p><p>vite 渲染慢：Vite 渲染时才会打包编译文件，然后再渲染，打包越慢，渲染速度越慢（但是 vite 有缓存，所以第二次渲染速度没问题）</p><ol start="4"><li>生态</li></ol><p>webpack 诞生很久了，生态基本完善</p><p>vite 生态不够全，对代码分割不够友好</p><h1>React</h1><h2 id="1-React-和-Vue-的区别">1. React 和 Vue 的区别</h2><ol><li>数据流</li></ol><ul><li>Vue 默认支持双向数据绑定</li><li>React 提倡单向数据流</li></ul><ol start="2"><li>虚拟 DOM</li></ol><ul><li>Vue 宣称可以更快地计算出 Virtual DOM 的差异，这是由于它在渲染过程中，会跟踪每一个组件的依赖关系，不需要重新渲染整个组件树。</li><li>对于 React 而言，每当应用的状态被改变时，全部子组件都会重新渲染。当然，这可以通过 PureComponent/shouldComponentUpdate 这个生命周期方法来进行控制，但 Vue 将此视为默认的优化。</li></ul><ol start="3"><li>组件化</li></ol><ul><li>Vue 提供单文件组件方式，类似于 HTML 语法。</li><li>React 通过 JSX 语法来定义组件。</li></ul><ol start="4"><li>更新用户界面方式</li></ol><ul><li>Vue 的数据是响应式的，更新数据同时用户界面也会更新</li><li>React 要触发用户界面更新需要使用 this.setState 方法或者 useState 提供的函数</li></ul><ol start="5"><li>构建工具</li></ol><ul><li>Vue 有 vite-cli / vue-cli</li><li>React 有 create-react-app</li></ul><ol start="6"><li>跨平台</li></ol><ul><li>Vue 有 Weex</li><li>React 有 React Native</li></ul><ol start="7"><li>数据可变性</li></ol><ul><li>Vue 使用的是可变数据</li><li>React 强调不可变数据</li></ul><h2 id="2-谈谈-redux">2. 谈谈 redux</h2><h2 id="3-对-React-Hook-的理解">3. 对 React Hook 的理解</h2><h2 id="4-React-组件间通信">4. React 组件间通信</h2><h2 id="5-React-生命周期">5. React 生命周期</h2><h2 id="6-谈谈-React-Router">6. 谈谈 React Router</h2><h2 id="7-什么是虚拟-DOM？">7. 什么是虚拟 DOM？</h2><h2 id="8-React-中虚拟-DOM-Diff-算法">8. React 中虚拟 DOM Diff 算法</h2><h1>Vue</h1><h2 id="1-生命周期函数">1. 生命周期函数</h2><ol><li>基础</li></ol><ul><li>初始化阶段<ul><li>beforeCreate</li><li>created</li></ul></li><li>挂载阶段<ul><li>beforeMount</li><li>mounted</li></ul></li><li>更新阶段<ul><li>beforeUpdate</li><li>updated</li></ul></li><li>卸载阶段<ul><li>Vue2: beforeDestroy / destroyed</li><li>Vue3: beforeUnmount / unmounted</li></ul></li></ul><ol start="2"><li>重要的生命周期</li></ol><p>其中重要生命周期：mounted 和 beforeDestroy（beforeUnmount）</p><ul><li>mounted 用来发送请求、设置定时器、绑定事件等任务</li><li>beforeDestroy 用来解绑定时器，解绑事件等收尾工作，防止内存泄漏</li></ul><ol start="3"><li>其他生命周期函数</li></ol><p>除此之外，还有一些别的生命周期函数：</p><ul><li><p>被 keep-alive 缓存的组件会自动拥有两个生命周期函数</p><ul><li>activated</li><li>deactivated</li></ul></li><li><p>用来捕获后代组件产生的错误</p><ul><li>errorCaptured</li></ul></li></ul><ol start="4"><li>Vue3 提供了两种开发模式：选项式和组合式，其中组合式 API 生命周期用法有一些变化</li></ol><ul><li>setup：相当于之前的 beforeCreate/created</li><li>剩下的生命周期函数需要引入使用，比如：<ul><li>onMounted</li><li>onBeforeUnmount</li></ul></li><li>每个生命周期函数都能使用多次</li></ul><h2 id="2-组件间通信">2. 组件间通信</h2><ol><li>props 父 -&gt; 子</li></ol><p>可以展开说说 props 具体内容</p><ol start="2"><li>自定义事件 子 -&gt; 父</li></ol><ul><li>Vue2 中给组件绑定的事件默认都是自定义事件，加上<code>.native</code>才是 DOM 事件</li><li>Vue3 中给组件绑定的事件默认是 DOM 事件（当然实际要满足条件才会绑定：1. 事件名需要是 DOM 事件名称 2. 子组件必须有根标签 3. 子组件内部不能 defineEmits 声明接受），不满足条件就是自定义事件</li></ul><ol start="3"><li>v-model 父 &lt;-&gt; 子</li></ol><p>vue2 和 vue3 用法也不一样：</p><ul><li>vue2 中给组件绑定 value 属性和 input 自定义事件</li><li>vue3 中默认给组件绑定 modelValue 属性和 update:modelValue 事件<ul><li>也可以通过 v-model:xxx 的方式修改属性名和事件名</li></ul></li></ul><ol start="4"><li>v-bind:xxx.sync 父 &lt;-&gt; 子</li></ol><ul><li>只有 vue2 才能使用，vue3 不能使用了</li><li>绑定 xxx 属性和 update:xxx 自定义事件</li></ul><ol start="5"><li>插槽 父 &lt;-&gt; 子</li></ol><ul><li>通信的内容主要是标签数据（之前通信方案都是普通数据）</li><li>分类：默认插槽、具名插槽和作用域插槽</li><li>一般我设置组件时，会优先最重要内容用默认插槽（因为简单），其他内容考虑具名插槽，如果需要子向父通信用作用域插槽（table）</li></ul><ol start="6"><li>vuex / pinia 兄弟、祖孙</li></ol><ul><li>一般 vue2 项目用 vuex，vue3 项目用 pinia</li></ul><ol start="7"><li>还有其他通信方案</li></ol><ul><li>全局事件总线(兄弟)：vue2 中能使用，vue3 不能使用了, 因为删除了<code>$on/$off</code>等自定义事件方法，想要使用必须用第三方库，比如 mitt 实现</li><li><code>$parent/$children/$refs</code>（父 &lt;-&gt; 子），其中 vue3 删除了<code>$children</code></li><li><code>$attrs/$listeners</code> （父 -&gt; 子）, 其中 vue3 删除了<code>$listeners</code>， 内容放入了<code>$attrs</code>中</li><li>provide/inject 祖孙</li></ul><h2 id="3-谈谈-Vuex">3. 谈谈 Vuex</h2><p>一个集中式状态管理方案，通常用于管理多个组件共享的状态数据。</p><p>开发时需要定义主模块和其他分模块</p><p>主模块主要定义 modules 属性用来汇总其他分模块</p><p>其他分模块主要定义 state、getters、actions、mutations、namespaced。</p><ul><li>state 模块管理的状态数据</li><li>getters 只读计算属性数据</li><li>actions 一般用来与服务器进行交互的函数，比如：发送请求</li><li>mutations 直接更新数据的函数</li><li>namespaced 的值为 true，开启命名空间，这样每个 vuex 模块的内容就被隔离，不会互相影响。</li></ul><p>组件读取/更新 vuex 数据有两种方式，一种通过<code>$store</code>，一种 map 函数形式</p><p>一般如果数据只用一两次，我会用$store，比较简单。数据比较频繁使用，用 map 函数形式</p><h2 id="4-谈谈-Pinia">4. 谈谈 Pinia</h2><p>一个集中式状态管理方案，通常用于管理多个组件共享的状态数据。</p><p>相对于 Vuex 来说，pinia 优点：</p><ul><li>没有 mutations （流程更简洁）</li><li>Typescript 支持更友好</li><li>pinia 模块定义即可使用，不用汇总</li></ul><p>开发时需要定义主模块和其他分模块：主模块定义好后，就定义分模块即可，不用汇总</p><p>分模块主要由以下内容：</p><ul><li>state 模块管理的状态数据</li><li>getters 只读计算属性数据</li><li>actions 与服务器进行交互（发送请求），同时更新数据</li></ul><p>组件引入分模块暴露的 useXxxStore 函数，得到 Store 对象，即可操作数据和方法了</p><ul><li>一般如果我需要直接更新一个数据：就直接操作数据即可</li><li>如果我需要直接更新多个数据：store.$patch 方法更新数据</li><li>如果我需要更新数据并且发送请求：就需要定义 action 函数，通过 store 调用 action 函数来更新</li></ul><h2 id="5-Vue2-和-Vue3-的区别">5. Vue2 和 Vue3 的区别</h2><ol><li>生命周期不一样</li></ol><p>卸载阶段</p><ul><li>vue2 beforeDestroy destroyed</li><li>vue3 beforeUnmount unmounted</li></ul><ol start="2"><li>组件间通信方案用法不一样</li></ol><ul><li>vue3 删除了<code>$on/$off/$once</code>API，所以默认不能全局事件总线，如果想要使用全局事件总线，需要使用第三方库 mitt</li><li>vue3 删除了 v-bind:xxx.sync 修饰符，父子组件双向通信只能使用 v-model</li><li>v-model 对组件用法不一样<ul><li>vue2 v-model 绑定的是 value 属性和 input 自定义事件</li><li>vue3 v-model 绑定的是 modelValue 属性和 update:modelValue 自定义事件</li></ul></li><li>vue3 删除<code>$listeners</code>，整合到<code>$attrs</code>中</li><li>vue3 删除<code>$children</code>，获取子组件实例对象必须使用 ref</li></ul><ol start="3"><li>指令不一样</li></ol><ul><li>v-for 和 v-if 优先级不同<ul><li>vue2 是 v-for 优先级更高</li><li>vue3 是 v-if 优先级更高</li></ul></li><li>vue3 新增了一个指令：v-memo 用来缓存 DOM 元素</li><li>vue3 删除了 v-bind:xxx.sync 修饰符</li><li>vue3 v-model 用法不一样</li></ul><ol start="4"><li>开发模式不一样</li></ol><ul><li>vue2 只有选项式开发模式</li><li>vue3 除了有选项式开发模式以外，新增了组合式开发模式<ul><li>setup</li><li>ref / reactive / watch / computed</li><li>onMounted / onBeforeUnmount</li></ul></li></ul><ol start="5"><li>响应式原理不一样</li></ol><ul><li>vue2 通过 Object.defineProperty 实现的响应式</li><li>vue3 通过 Proxy 实现的响应式</li></ul><h2 id="6-谈谈-Vue-的指令">6. 谈谈 Vue 的指令</h2><ol><li>常用指令</li></ol><ul><li>v-if / v-else-if / v-else 条件渲染（控制元素的显示和隐藏）</li><li>v-show 条件渲染（控制元素的显示和隐藏）<ul><li>v-if 和 v-show 区别：<ul><li>v-if 隐藏时，销毁元素（卸载组件）</li><li>v-show 隐藏时，通过 display:none 来隐藏的</li><li>结论：频繁切换用 v-show，不频繁用 v-if</li></ul></li></ul></li><li>v-for 遍历展示（列表渲染）<ul><li>key 属性作用：在 diff 算法中，尽可能复用相同 key 的元素，更新性能更好</li><li>key 属性取值：一般用 id，用 index 可能导致更新性能不好</li><li>v-for 和 v-if 优先级：<ul><li>vue2 是 v-for 更高</li><li>vue3 是 v-if 更高</li></ul></li></ul></li><li>v-on 绑定事件 @<ul><li>事件修饰符 .prevent .stop .once .self</li><li>按键修饰符 .enter .13</li></ul></li><li>v-model 双向数据绑定<ul><li>双向数据绑定原理<ul><li>给普通 input 元素（text）绑定，绑定的是 value 属性和 input 事件</li><li>给单选（radio）或多选（checkout）绑定，绑定的是 checked 属性和 change 事件</li><li>给下拉列表（select）绑定，绑定的是 value 属性和 change 事件</li><li>给组件绑定<ul><li>vue2 中，组件绑定和普通元素绑定效果一样</li><li>vue3 中，默认绑定 modelValue 属性和 update:modelValue 事件</li></ul></li></ul></li></ul></li><li>v-bind 单向数据绑定（强制绑定数据） :</li><li>v-slot 插槽 #<ul><li>默认插槽、具名插槽和作用域插槽</li></ul></li><li>v-memo(新增的指令) 用于缓存部分 DOM 元素</li></ul><ol start="2"><li>不常用指令</li></ol><ul><li>v-text 设置元素 textContent</li><li>v-html 设置元素 innerHTML</li><li>v-once 元素只解析渲染一次，后续再也不变了</li><li>v-pre 跳过解析，直接渲染最原始的内容</li><li>v-cloak 防止解析时渲染表达式(用于隐藏尚未完成编译的 DOM 模板。)</li></ul><h2 id="7-ref-和-reactive-的区别">7. ref 和 reactive 的区别</h2><ol><li>ref 可以用来定义基本类型和引用类型数据，reactive 只能用来定义引用类型数据；</li><li>ref 定义的数据如果是引用数据类型，实际是通过 reactive 来定义的。</li><li>ref 定义的数据需要通过 .value 来读取或更新，reactive 可以直接操作数据；</li></ol><h2 id="8-谈谈-Vue-Router">8. 谈谈 Vue Router</h2><ol><li>概念<br>用来实现 Vue 的单页面应用（single page web application，SPA）。</li></ol><p>单页面应用特点：</p><ul><li>整个应用只有一个完整页面，所有更新只是这个页面的局部渲染</li><li>点击页面链接不会刷新整个页面，只会更新浏览历史记录和页面局部更新</li></ul><ol start="2"><li>路由两种模式</li></ol><ul><li>hash<ul><li>特点<ul><li>hash 路径带 #，# 后面的值（路由路径）不会提交到 server 端；</li><li>hash 可以改变 url ，准确来说改变的是 # 后面的值，页面不会刷新；</li><li>兼容性更好, IE6+。</li></ul></li><li>原理<ul><li>hash 通过 window.location.hash 的方式，实现路由跳转的功能。</li><li>hash 通过 window.onhashchange 的方式，来监听 hash 的改变，借此实现无刷新跳转的功能。</li></ul></li></ul></li><li>history<ul><li>特点<ul><li>history 路径不带 #，更美观。</li><li>history 可以改变 url ，改变的是整个 url，页面不会刷新；</li><li>兼容性稍差, IE10+；</li><li>页面刷新时，history 可能会出现 404 问题。</li></ul></li><li>原理<ul><li>history 通过 window.history.pushState / replaceState 等方式，实现路由跳转的功能。</li><li>history 通过 window.onpopstate 的方式，来监听 url 的改变，借此实现无刷新跳转的功能。</li></ul></li></ul></li></ul><ol start="3"><li>基本内容</li></ol><ul><li>提供两个组件<ul><li>router-link 用来路由跳转（声明式导航）</li><li>router-view 用来加载渲染路由组件</li></ul></li><li>提供两个属性<ul><li>$router 用来路由跳转（编程式导航）</li><li>$route 用来获取路由参数和路由路径</li></ul></li></ul><ol start="4"><li>路由跳转两种方式</li></ol><ul><li>声明式导航 router-link</li><li>编程式导航 this.$router.push/replace/go</li></ul><ol start="5"><li>路由传参</li></ol><ul><li>query</li><li>params</li><li>meta</li></ul><ol start="6"><li>路由导航守卫</li></ol><ul><li>全局路由导航守卫<ul><li>beforeEach</li><li>afterEach</li></ul></li><li>路由独享守卫</li><li>组件独享守卫</li></ul><p>最重要的是全局路由导航守卫的 beforeEach</p><p>主要用来：权限管理功能，控制用户的访问权限</p><ol start="7"><li>路由懒加载</li></ol><p>通过 import 动态加载组件，实现组件懒加载</p><p>内部做了两件事：</p><ul><li>代码分割：将路由组件单独打包成一个 js 文件</li><li>按需加载：需要使用这个路由组件时，才会加载对应的 js 文件</li></ul><h2 id="9-nextTick-方法的原理">9. nextTick 方法的原理</h2><h3 id="9-1-Vue2">9.1. Vue2</h3><ol><li>定义一个数组（callbacks）用来存储回调函数</li><li>定义一个用来遍历数组，执行回调函数的方法（flushCallbacks）</li><li>定义一个用来将执行回调函数的方法添加到异步队列去的方法（timerFunc）</li></ol><ul><li>这个方法内部会通过 4 种方式来操作：Promise、MutationObserver、setImmediate、setTimeout</li><li>会从上到下依次判断来选择，一旦选择前面的方案，后面就不看了</li></ul><ol start="4"><li><p>到此准备工作完成了，接下来组件会调用 nextTick 方法</p></li><li><p>调用 nextTick 方法时，会将回调函数添加到数组（callbacks）中，在通过 timerFunc 将执行回调函数的方法 flushCallbacks 添加到异步队列等待将来执行</p></li><li><p>等主线程执行完所有同步代码，就会执行异步代码，此时会就执行 flushCallbacks 函数</p></li><li><p>执行 flushCallbacks 函数就会遍历所有回调函数依次执行</p></li></ol><p>总结：</p><p>所以 nextTick 方法的真正理解就是将回调函数添加到异步队列中，等待将来执行。</p><p>它之所以可以等 DOM 元素渲染完成才触发回调函数，是因为我们先更新响应式数据，此时内部会将更新用户界面的方法通过 nextTick 添加到异步队列去，在调用 nextTick 方法，会将其他代码也添加到异步队列去，队列先进先出，所以先更新用户界面，在执行其他代码，此时就能操作更新后的 DOM 元素了</p><h3 id="9-2-Vue3">9.2. Vue3</h3><p>调用 nextTick 方法，如果不传入参数，就会直接返回一个成功的 promise 对象。后续代码会添加到异步队列等待将来执行。</p><p>问题：为什么 Vue3 的 nextTick 这么简单？</p><ul><li>因为 Vue2 要考虑低版本浏览器的兼容性处理，所以用了 4 种方式来将回调函数添加到异步队列。</li><li>而 Vue3 放弃了低版本浏览器的兼容，所以只需要考虑最佳方案：Promise 即可。</li></ul><h2 id="10-双向数据绑定原理">10. 双向数据绑定原理</h2><p>v-model 主要用于双向数据绑定（收集表单数据），它给元素绑定时，不同元素做法不一样：</p><ol><li>如果是文本类型元素（<input> 和 <textarea>）：绑定 value 属性和 input 事件；</li><li>如果是单选或多选元素（<input type="checkbox"> 和 <input type="radio">）：绑定 checked 属性和 change 事件；</li><li>如果是下拉列表元素（<select>）：绑定 value 属性和 change 事件；</li><li>如果不是上述这些元素（比如组件），会按照文本类型元素处理。</li></ol><ul><li>Vue3 中，给组件绑定的是 modelValue 属性和 update:modelValue 事件</li></ul><h2 id="11-响应式原理">11. 响应式原理</h2><h3 id="11-1-Vue2">11.1. Vue2</h3><ol><li>数据代理</li></ol><ul><li><p>总结：将 data/props/methods 等属性代理到 this 上，可以通过 this 直接访问数据，从而让访问数据更加方便</p></li><li><p>详情：遍历 data 所有属性，对每一个属性通过 Object.defineProperty 方法，将 data 属性定义在 vm 上，同时定义了读取数据的 get 和设置属性值的 set 方法。此时我们就能通过 <a href="http://this.xxx">this.xxx</a> 的方式访问 data 中的数据了。 get/set 实际访问/操作的都是原 data 数据</p></li></ul><ol start="2"><li>数据劫持</li></ol><ul><li><p>总结：将原 data 数据中所有属性进行重新定义，定义成响应式的属性</p></li><li><p>详情：遍历 data 所有属性，每一个属性都会创建一个 dep 对象， 然后通过 Object.defineProperty 方法进行重新定义，同时定义读取数据的 get 和设置属性值的 set 方法, 此时 dep 对象会以闭包的形式保存在 get 和 set 方法中。</p><ul><li>未来当你读取属性数据就会触发 get 方法，会返回属性的值，同时会调用 dep.depend() 方法，它用来建立响应式联系，响应式联系就是，dep 保存 watcher，watcher 保存 dep</li><li>未来当你设置属性的值就会触发 set 方法，内部会同步更新值，同时会调用 dep.notify() 方法，它用来遍历 dep 保存的所有 watcher，调用 watcher 的方法将更新用户界面的方法添加到异步队列，等待异步更新。（更新数据是同步的，更新用户界面是异步的。）</li></ul></li></ul><ol start="3"><li>页面解析渲染</li></ol><ul><li><p>总结：将模板页面内部模板语法进行解析生成虚拟 DOM 树，这个过程会建立响应式联系，遍历虚拟 DOM 树渲染成真实 DOM 元素，插入页面根标签生效，完成初始化渲染</p></li><li><p>详情：首先 new Watcher，然后内部会调用方法去进行页面初始化渲染，初始化渲染过程中就会构建虚拟 DOM 树，此时会读取表达式的值，会触发数据代理的 get，又触发数据劫持的 get，此时会通过 dep.depend() 建立响应式联系，所谓的响应式联系就是 dep 保存 watcher，watcher 保存 dep（dep 保存 watcher 的目的为了将来能通过 dep 找到 watcher 从而更新用户界面，watcher 保存 dep 为了防止重复保存），构建完虚拟 DOM 树，就会将虚拟 DOM 树解析成真实 DOM 元素，插入页面生效</p></li></ul><ol start="4"><li>更新触发响应式</li></ol><ul><li>将来当你更新 data 数据时，就会触发数据代理阶段给属性设置的 set 方法，方法内部实际更新的是原 data 数据，又会触发数据劫持阶段给属性设置的 set 方法，此时会同步更新数据的值，同时触发 dep.notify() 方法遍历 dep 保存的 watcher 将更新用户界面的方法添加到异步队列，等待异步更新（通过 nextTick 方法做得：我在官网查询 nextTick 方法的时候，发现他能等 DOM 元素渲染好在触发指定回调，我就去研究它怎么做到的，发现原来它真正原理，并没有等 DOM 元素渲染好，仅仅是将回调函数添加到异步队列而已（这里可以在展开说为什么，也可以等他来问））。</li></ul><h3 id="11-1-Vue3">11.1. Vue3</h3><ol><li>概述</li></ol><p>主要由 4 个方法构成 reactive、track、trigger、effect</p><ul><li>reactive 用来将数据定义成响应式</li><li>track 用来进行依赖收集：建立响应式数据和 effect 实例之间的联系</li><li>trigger 用来触发依赖更新：找到响应式数据对应的 effect 实例，去更新用户界面</li><li>effect 用来存储更新用户界面的方法</li></ul><ol start="2"><li><p>当你定义 reactive 数据时，内部通过 Proxy 方法对数据进行代理，当你读取属性的时候会触发 get，设置属性的值的时候会触发 set，get 方法中会返回属性的值，同时通过 track 进行依赖收集，set 方法中会更新属性的值，同时会通过 trigger 触发依赖更新</p></li><li><p>默认 effect 方法一上来就会执行一遍，此时会生成 effect 实例，将更新用户界面的方法存储在 effect 实例, 并调用更新用户界面的方法来完成页面初始化渲染</p></li><li><p>初始化渲染时会读取表达式的值，触发 Proxy 设置的 get，此时会通过 track 进行依赖收集：依赖收集会创建一个 weakMap 容器，存储的 key 为响应式对象，值为 Map 容器，Map 容器 存储的 key 为响应式对象中某个属性，值为 Set 容器，Set 容器会存储对应的 effect 实例。到此依赖收集完成，初始化渲染后续也会完成</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="comment">// WeakMap容器 key是响应式数据 value是一个Map容器</span></span><br><span class="line">  &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;: &#123; <span class="comment">// Map容器 key是响应式数据中某个属性 value是Set容器</span></span><br><span class="line">    <span class="attr">age</span>: [ <span class="comment">// Set容器保存effect实例</span></span><br><span class="line">      effect1, effect2, ...</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>将来更新响应式数据时，数据的值会同步更新，同时会触发 Proxy 设置的 set，此时会通过 trigger 触发依赖更新: 依赖更新会通过 weakMap 容器找到响应式数据对应的 Map 容器，通过 Map 容器找到对应属性的 Set 容器，遍历 Set 容器中 effect 实例调用更新用户界面的方法，从而更新用户界面达到响应式</li></ol><h2 id="12-Vue2-中虚拟-DOM-Diff-算法">12. Vue2 中虚拟 DOM Diff 算法</h2><ol><li>Diff 算法简述</li></ol><p>初始化渲染阶段会生成一个虚拟 DOM 树（旧树），更新数据时会生成一个新的虚拟 DOM 树，新旧虚拟 DOM 树进行比较，找到不同的内容，从而更新，这就是虚拟 DOM Diff 算法做的事情</p><ol start="2"><li>虚拟 DOM 树简述</li></ol><p>虚拟 DOM 树就是一个对象，这个对象通过特定属性代表真实 DOM 元素的信息，比如：tag 代表元素标签，data 代表元素属性，children 代表子元素</p><ol start="3"><li>Diff 算法详细流程</li></ol><p>Diff 算法一共会经历三个函数：patch、patchVnode、updateChildren</p><p>其中最重要的是 updateChildren 方法：</p><p>它是对相同层级的所有子节点进行 diff（比较），整体流程是从两端到中间遍历，一个一个元素进行比较，从而更新。</p><p>具体来说：</p><ul><li><p>定义 4 个指针，分别指向旧的虚拟 DOM 树开头，也叫做旧前，指向旧的虚拟 DOM 树结尾，叫做旧后，新的虚拟 DOM 树开头，叫做新前，新的虚拟 DOM 树结尾，叫做新后</p></li><li><p>整个遍历过程（详细版本）：</p><ul><li>判断旧前元素是否存在，不存在就更新下标（旧前++），存在就下一步</li><li>判断旧后元素是否存在，不存在就更新下标（旧后–）存在就下一步</li><li>判断旧前和新前元素是否一致（sameVnode：看 key 和 tag），如果一致就会进一步比较（patchVnode），（新前旧前）下标++，不一致就下一步</li><li>判断旧后和新后元素是否一致（sameVnode：看 key 和 tag），如果一致就会进一步比较（patchVnode），（新后旧后）下标–，不一致就下一步</li><li>判断旧前和新后元素是否一致（sameVnode：看 key 和 tag），如果一致就会进一步比较（patchVnode），更新下标（新后–旧前++），移动 DOM 元素位置（将旧前插入到旧后的后面），不一致就下一步</li><li>判断旧后和新前元素是否一致（sameVnode：看 key 和 tag），如果一致就会进一步比较（patchVnode），更新下标（旧后–新前++），移动 DOM 元素位置（将旧后插入到旧前的前面），不一致就下一步</li><li>看 key，提取旧树剩下的子元素的 key 属性，判断新前节点的 key 在不在旧树 key 中，存在就移动 DOM 元素位置，不存在创建新前元素插入页面，更新下标（新前++）</li></ul></li><li><p>整个遍历过程（简化版本）：</p><ul><li>旧前新前</li><li>旧后新后</li><li>旧前新后</li><li>旧后新前</li><li>看 key</li><li>其中 旧前新后 旧后新前 看 key 更新 DOM 元素后，还需要移动 DOM 元素位置</li></ul></li></ul><p>到此更新基本完成。（后面还有两个流程，也可以说）</p><h2 id="13-keep-alive-原理">13. keep-alive 原理</h2><h1>Mobile</h1><h2 id="1-移动端适配方案">1. 移动端适配方案</h2><ol><li>rem</li></ol><p>原理：</p><ul><li>rem 单位是相对长度单位，是相对 html 标签字体大小的。</li><li>我们通过动态更新 html 标签字体大小，就能控制 rem 的大小，从而实现适配</li></ul><p>具体做法</p><ul><li>准备 js</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> docEl = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"><span class="comment">// 设置 1rem = 屏幕宽度 / 100</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setRemUnit</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> rem = docEl.<span class="property">clientWidth</span> / <span class="number">100</span>;</span><br><span class="line">  docEl.<span class="property">style</span>.<span class="property">fontSize</span> = rem + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">setRemUnit</span>();</span><br><span class="line"><span class="comment">// 当浏览器大小调整时，重新更新字体大小</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, setRemUnit);</span><br></pre></td></tr></table></figure><ul><li>配置插件：postcss-pxtorem，能够自动将 px 转 rem 单位</li></ul><ol start="2"><li>viewport</li></ol><p>原理：</p><ul><li>vw/vh 也是相对长度单位，相对于整个浏览器视口的宽度和高度</li><li>1vw 等于屏幕宽度的 1%</li></ul><p>具体做法：</p><ul><li>设置 meta 标签</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span></span></span><br><span class="line"><span class="tag">  <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">content</span>=<span class="string">&quot;width=device-width; initial-scale=1; maximum-scale=1; minimum-scale=1; user-scalable=no;&quot;</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置插件 postcss-px-to-viewport，能够自动将 px 转 vw 单位</li></ul><h2 id="2-1-物理像素边框方案">2. 1 物理像素边框方案</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border-b</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.border-b</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>) &#123;</span><br><span class="line">  <span class="selector-class">.border-b</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">3</span>) &#123;</span><br><span class="line">  <span class="selector-class">.border-b</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.33333</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">4</span>) &#123;</span><br><span class="line">  <span class="selector-class">.border-b</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.25</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-小程序的生命周期函数">3. 小程序的生命周期函数</h2><ol><li>应用生命周期</li></ol><ul><li>onLaunch: 用于登录</li><li>onShow</li><li>onHide</li></ul><ol start="2"><li>页面生命周期</li></ol><ul><li>onLoad</li><li>onShow</li><li>onReady</li><li>onHide</li><li>onUnload：做收尾工作，清除定时器等任务，防止内存泄漏</li></ul><p>如果需要发送请求，需要分析需求，看当前页面的数据是否要实时更新：</p><ul><li>需要实时更新：onShow</li><li>不需要实时更新，一次就好：onLoad</li></ul><ol start="3"><li>组件生命周期</li></ol><ul><li><p>组件自身生命周期函数</p><ul><li>created</li></ul></li><li><p>组件所在页面的生命周期函数</p><ul><li>show</li><li>hide</li></ul></li></ul><h2 id="4-小程序的分包">4. 小程序的分包</h2><ol><li>分包目的</li></ol><ul><li>小程序体积能更大能写更多功能</li><li>优化小程序首次启动的下载时间</li></ul><ol start="2"><li>分类</li></ol><p>主包和分包</p><p>分包又分为：普通分包和独立分包</p><ol start="3"><li>普通分包和独立分包区别</li></ol><ul><li><p>普通分包可以使用自己和主包的内容</p></li><li><p>独立分包只能使用自己的内容（除了插件等以外）</p></li></ul><ol start="4"><li>分包大小限制</li></ol><ul><li><p>整个小程序所有分包大小不超过 20M</p></li><li><p>单个分包/主包大小不能超过 2M</p></li></ul><ol start="5"><li>分包具体配置</li></ol><p>需要将分包的页面和其他资源放入一个单独的文件夹中，再在 app.json 中配置 subpackages</p><p>独立分包需要配置中加上 independent</p><ol start="6"><li>分包预下载</li></ol><p>有时候我们加载分包速度比较慢，可以提前加载分包</p><p>需要在 app.json 配置 preloadRule 就可以</p><h2 id="5-微信小程序组件间通信">5. 微信小程序组件间通信</h2><ol><li>页面与组件之间的通信</li></ol><ul><li>properties 父 -&gt; 子</li><li>自定义事件 子 -&gt; 父<ul><li>通过 bind:xxx 绑定事件</li><li>通过 this.triggerEvent 触发事件</li></ul></li></ul><ol start="2"><li>全局通信方案</li></ol><ul><li><p>globalData</p><ul><li>在 app.js 中定义 globalData</li><li>其他页面/组件通过 getApp() 得到 app 实例对象，进而操作数据</li></ul></li><li><p>storage</p><ul><li>wx.getStorageSync() 获取</li><li>wx.setStorageSync() 设置</li></ul></li></ul><p>通常情况下不建议直接用 storage 通信，性能较差。storage 主要用于持久化存储数据，如果要频繁通信，可以在 app.globalData 中存储一份使用</p><ul><li>事件总线<ul><li>pubsub-js</li></ul></li></ul><ol start="3"><li>页面之间通信</li></ol><ul><li><p>query</p><ul><li>跳转路由携带 query 参数</li><li>下个页面通过 onLoad 生命周期函数的参数接受使用</li></ul></li><li><p>getCurrentPages()</p><ul><li>可以获取路由历史记录，从而得到上个页面的实例对象进而操作数据</li></ul></li></ul><h2 id="6-微信小程序登录流程">6. 微信小程序登录流程</h2><ol><li>需求：用户无需登录，可以访问部分页面。需要用户手动点击授权登录进行登录</li></ol><ul><li><p>点击授权登录，通过 wx.login 得到 code</p></li><li><p>将 code 发送请求给服务器得到用户的 token</p></li><li><p>将 token 存储起来（globalData 和 storage）</p><ul><li>storage 为了持久化存储</li><li>globalData 读写速度更快，性能更好</li></ul></li><li><p>在封装请求函数中在请求头携带 token 参数</p></li><li><p>发送请求获取用户数据，将用户数据存储起来（globalData 和 storage）</p></li><li><p>跳转回之前页面</p></li><li><p>默认会返回默认头像和用户名，可以通过微信提供最新填写能力，引导用户设置用户头像和用户名</p></li></ul><ol start="2"><li>需求：用户必须登录才能使用小程序，一上来就需要进行登录</li></ol><ul><li>用户无需点击，在 app.js 中 onLaunch 生命周期函数就进行登录操作</li><li>wx.login - 发送请求携带 code - 得到 token 并存储 - 发送请求携带 …</li></ul><h2 id="7-微信小程序支付流程">7. 微信小程序支付流程</h2><ol><li>用户可以从两个地方来到订单支付页面</li></ol><ul><li><p>商品详情 - 点击立即购买</p></li><li><p>购物车 - 点击提交订单</p></li><li><p>商品详情点击立即购买就打算要买这个商品，将商品 id 以 query 参数传递给订单支付页面，在跳转过去</p></li><li><p>购物车点击提交订单直接跳转订单支付页面</p></li></ul><ol start="2"><li>订单支付页面需要展示商品信息和收件人信息</li></ol><ul><li><p>商品信息，可以通过判断是否有 query 参数来识别是哪种渠道进入的</p><ul><li>如果是有商品 id，说明是商品详情进入，通过商品 id 发送请求获取商品数据展示</li><li>如果没有商品 id，说明是购物车进入的，直接发送请求获取购物车已选择商品列表展示</li></ul></li><li><p>收件人信息，直接发送请求获取默认收件人展示即可。同时提供方式跳转页面可以对收件人信息 CRUD</p></li></ul><ol start="3"><li>当用户确认并填写好信息后，点击结算开始支付</li></ol><ul><li>首先将收件人、商品详情等信息发送请求给服务器获取 orderId</li><li>通过 orderId 发送请求获取微信支付需要的参数：（timeStamp 时间戳、paySign 签名、signType 签名算法 nonceStr 随机字符串等）</li><li>将微信支付需要的参数通过 wx.requestPayment(微信支付接口)来发起支付</li><li>支付成功进行提示，跳转到支付成功页面</li></ul><h2 id="8-小程序上线流程">8. 小程序上线流程</h2><ol><li>将写好的代码上传到微信</li></ol><p>微信开发者工具 - 右上角 - 上传</p><ol start="2"><li><p>来到微信小程序管理平台，填写小程序的信息和条目等内容</p></li><li><p>来到 管理 - 版本管理 - 提交审核</p></li><li><p>此时微信小程序官方会审核你提交的小程序代码，审核通过小程序就上线了</p></li></ol><h2 id="9-小程序代码上线后修改代码，如何让用户看到最新效果">9. 小程序代码上线后修改代码，如何让用户看到最新效果</h2><p>在 app.js 中 onLaunch 中通过 UpdateManager 实例来监听小程序新版本下载完成事件，调用实例的 applyUpdate 方法就能应用新版本并重启了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkUpdateVersion</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 1. 判断小程序版本是否可以使用小程序更新机制API</span></span><br><span class="line">  <span class="keyword">if</span> (wx.<span class="title function_">canIUse</span>(<span class="string">&quot;getUpdateManager&quot;</span>)) &#123;</span><br><span class="line">    <span class="comment">// 2. 创建 UpdateManager 实例</span></span><br><span class="line">    <span class="keyword">const</span> updateManager = wx.<span class="title function_">getUpdateManager</span>();</span><br><span class="line">    <span class="comment">// 3. 监听检测版本更新事件</span></span><br><span class="line">    updateManager.<span class="title function_">onCheckForUpdate</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="comment">// 4. 如果有新的版本，小程序会自动在后台下载新版本，开发者无需设置</span></span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">hasUpdate</span>) &#123;</span><br><span class="line">        <span class="comment">// 5. 监听小程序新版本下载完成事件</span></span><br><span class="line">        updateManager.<span class="title function_">onUpdateReady</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="comment">// 6. 调用方法应用新版本并重启</span></span><br><span class="line">          updateManager.<span class="title function_">applyUpdate</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 7. 监听小程序新版本下载失败事件</span></span><br><span class="line">        updateManager.<span class="title function_">onUpdateFailed</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&quot;已经有新版本喽~&quot;</span>,</span><br><span class="line">            <span class="attr">content</span>:</span><br><span class="line">              <span class="string">&quot;请您删除当前小程序，到微信 “发现-小程序” 页，重新搜索打开哦~&quot;</span>,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    wx.<span class="title function_">showModal</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&quot;溫馨提示&quot;</span>,</span><br><span class="line">      <span class="attr">content</span>: <span class="string">&quot;当前微信版本过低，无法使用该功能，请升级到最新微信版本后重试。&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10-原生小程序和-uni-app-的区别">10. 原生小程序和 uni-app 的区别</h2><ol><li>uni-app 开发一套代码，能运行多个平台。原生小程序只能在微信小程序中运行</li><li>uni-app 是使用 Vue 框架语法进行开发。原生小程序使用 WXML 语法进行开发</li><li>uni-app 生命周期支持 Vue 的生命周期，原生小程序只能使用 onLoad、onShow 等</li><li>uni-app 全局对象是 uni，能兼容多个平台，原生小程序全局对象是 wx</li></ol><h2 id="11-uni-app-的生命周期">11. uni-app 的生命周期</h2><p>生命周期和微信小程序类似，但是支持 Vue 的生命周期</p><h2 id="12-uni-app-怎么打包成-apk（打包-App-流程）">12. uni-app 怎么打包成 apk（打包 App 流程）</h2><ol><li>来到 manifest.json 文件配置 app 的图标、启动页、appid、使用权限等</li><li>使用 HbuilderX - 发行 - 云打包开始打包</li><li>打包需要填写应用名称和证书等内容，点击打包即可</li><li>云打包后会提供下载地址，下载打包好的 app</li><li>也可以本地打包</li></ol><h2 id="13-开发-uni-app-项目，使用过哪些插件库">13. 开发 uni-app 项目，使用过哪些插件库</h2><ol><li><p>UI 组件库：uView-ui</p></li><li><p>其他内容可看插件市场：<a href="https://ext.dcloud.net.cn/">https://ext.dcloud.net.cn/</a></p></li></ol><h1>Project</h1><h2 id="1-项目开发过哪些功能模块">1. 项目开发过哪些功能模块</h2><p>6-7 个模块以上</p><h2 id="2-项目难点">2. 项目难点</h2><h3 id="2-1-axios-二次封装">2.1. axios 二次封装</h3><ol><li>基本功能</li></ol><p><strong>说法一：</strong></p><ul><li>携带统一的请求前缀</li></ul><p>通过 baseURL 指定，它的值通常从.env 环境变量文件中获取</p><ul><li>携带公共请求参数：token</li></ul><p>在设置请求拦截器中携带公共参数</p><ul><li>成功返回成功的数据，失败返回失败的原因</li></ul><p>在响应拦截器成功回调中，还需要进一步判断返回值中的 code，来判断是否功能成功</p><p>成功返回成功的数据（外面使用更简单），失败做出对应的错误提示（不同的 code 错误提示不一样的）</p><ul><li>响应拦截器失败回调错误提示</li></ul><p>通过判断响应状态吗和响应 message 信息来做出相应的错误提示</p><p>例如：404 资源找不到等</p><p><strong>说法二：</strong></p><p>首先通过 axios.create 来生成 axios 实例，这个时候可以定义 baseUrl 来指定公共请求前缀，它的值通常从.env 环境变量文件中获取</p><p>接下来可以定义 axios 的请求拦截器和响应拦截器，它们分别是发送请求前和得到响应后触发的回调函数</p><p>在请求拦截器中我们添加公共请求参数 token</p><p>在响应拦截器成功回调中，还需要进一步判断返回值中的 code，来判断是否功能成功</p><p>成功返回成功的数据（外面使用更简单），失败做出对应的错误提示（不同的 code 错误提示不一样的）</p><p>在响应拦截器失败回调中进行更加详细的错误提示，通过判断响应状态吗和响应 message 信息来做出相应的错误提示</p><p>例如：404 资源找不到等</p><ol start="2"><li>取消重复请求</li></ol><ul><li>给每个请求生成一个 key（相同请求生成的 key 相同，不同请求升成的 key 不相同）</li></ul><p>key 由 url、method、params 和 data 拼接组成</p><ul><li>给每个请求生成一个取消请求的方法 cancel</li></ul><p>给每个请求 config 添加 cancelToken，值 new axios.CancelToken 产生，此时在回调函数中可以得到取消当前请求的 cancel 方法。</p><ul><li><p>使用 map 容器将 key 和 cancel 存储起来（使用对象也可以的）</p></li><li><p>发送请求的请求拦截器中，先判断当前请求的 key 是否存在 map 容器中，存在就调用 cancel 方法取消请求，同时删除这个数据，不存在就将当前请求的 key 的 cancel 存储起来</p></li><li><p>完成请求的响应拦截器中，将当前请求的 key 和 cancel 给删除掉</p></li></ul><ol start="3"><li>取消上一个页面的请求</li></ol><ul><li>在存储 key 和 cancel 时，还存储当前请求对应页面的路由路径（可以通过 window.location.pathname 获取）</li><li>在路由前置守卫中，遍历 map 容器，取出每一个请求，判断请求对应页面的路径和当前 to.path 是否相同，不相同说明是之前页面的请求，调用 cancel 方法取消掉即可</li></ul><h3 id="2-2-echarts-大屏适配-大数据渲染问题-实时数据通信">2.2 echarts 大屏适配/大数据渲染问题/实时数据通信</h3><h4 id="1-echarts-基本理解">1. echarts 基本理解</h4><p>echarts 用来数据可视化，将数据以图形图表的方式展示</p><p>它默认有两种渲染方式：canvas 和 svg 形式，一般用 canvas 渲染</p><p>它主要是通过配置去渲染图表，它的配置有：</p><ul><li>title 标题</li><li>xAxis x 轴</li><li>yAxis y 轴</li><li>series 类型：指定图表类型、图表数据、图表样式</li><li>legend 图例：切换显示图表</li><li>grid 布局</li><li>tooltip 提示框</li><li>dataZoom 数据缩放：只查看一定范围内的数据</li><li>geo 地理坐标系，可以绘制地图</li></ul><h4 id="2-echarts-大屏适配">2. echarts 大屏适配</h4><p>有 rem、viewport、scale 等方案，其中 rem 和 viewport 方案对图表中的字体大小等调整不友好，需要手动处理，比较麻烦，所以项目中我采用了 scale 的方案</p><p>scale 方案通过比较屏幕和设计稿宽高比来对页面进行缩放，缩放过程保持页面整体宽高比不变。</p><ol><li>计算设计稿的宽高比和当前页面的宽高比</li><li>判断当前页面的宽高比是否大于设计稿的宽高比，如果大于说明当前屏幕宽度更宽，高度更小，此时需要拿取高度来进行缩放</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缩放的值等于屏幕高度/设计稿高度</span></span><br><span class="line">scale.<span class="property">value</span> = clientHeight / draftHeight;</span><br></pre></td></tr></table></figure><ol start="3"><li>判断当前页面的宽高比是否小于设计稿的宽高比，如果小于说明当前屏幕宽度更窄，高度更大，此时需要拿取宽度来进行缩放</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 缩放的值等于屏幕宽度/设计稿宽度</span></span><br><span class="line">scale.<span class="property">value</span> = clientWidth / draftWidth;</span><br></pre></td></tr></table></figure><ol start="4"><li>onMounted 绑定窗口 resize 事件，当窗口大小调整时，重新设置 scale 即可，为了防止内存泄漏，onBeforeUnmount 时解绑事件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> scale = <span class="title function_">ref</span>(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大屏适配</span></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resize</span>();</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, resize);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;resize&quot;</span>, resize);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resize</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 设计稿的宽高</span></span><br><span class="line">  <span class="keyword">const</span> draftWidth = <span class="number">1366</span>;</span><br><span class="line">  <span class="keyword">const</span> draftHeight = <span class="number">617</span>;</span><br><span class="line">  <span class="comment">// 整个屏幕的宽高</span></span><br><span class="line">  <span class="keyword">const</span> clientWidth = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span><br><span class="line">  <span class="keyword">const</span> clientHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 当屏幕的比例（16 / 7）大于设计稿的比例（16 / 9）,说明屏幕更宽</span></span><br><span class="line">  <span class="keyword">if</span> (clientWidth / clientHeight &gt; draftWidth / draftHeight) &#123;</span><br><span class="line">    scale.<span class="property">value</span> = clientHeight / draftHeight;</span><br><span class="line">    <span class="comment">// 当屏幕的比例（16 / 7）小于设计稿的比例（16 / 9）,说明屏幕更窄</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (clientWidth / clientHeight &lt; draftWidth / draftHeight) &#123;</span><br><span class="line">    scale.<span class="property">value</span> = clientWidth / draftWidth;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    scale.<span class="property">value</span> = <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="3-echarts-数据实时通信">3. echarts 数据实时通信</h4><p>echarts 数据实时通信和 echarts 没啥关系，主要使用 web socket 技术进行实时通信的</p><p>WebSocket 是一个全双工通讯协议。</p><p>特点：服务器可以向客户端主动推动消息，客户端也可以主动向服务器推送消息。</p><p>使用：</p><p>new WebSocket(url) 传入 url 就可以连接上 WebSocket 服务器了</p><p>通过 message：接受服务器发送的消息</p><p>通过 send 方法：可以给服务器发送消息</p><p>除此以外还有其他方法：close 关闭连接</p><p>其他事件：open：打开事件 error 错误事件 close 关闭事件</p><p>功能：WebSocket 连接时可能因为不好的网络环境会断开链接，此时可以使用心跳检测机制来进行断开重连</p><p>心跳检测:</p><p>web socket 在连接过程中可能会因为网络问题断开连接，我们需要重连，这里用到心跳检测机制</p><p>具体来说：</p><ol><li>检测是否断开链接：</li></ol><p>当我们连接上 ws 服务时，需要开启定时器，隔一段时间（10s - 30s）向 ws 服务器发送一个特殊信号（ping），同时开启定时器（2s）检测服务器是否有回应信号（pong）</p><p>如果在规定时间内有回应，继续此操作，如果没有回应，说明断开连接了，我们要开始重连 ws</p><ol start="2"><li>重连机制</li></ol><p>每隔一段时间发起 ws 的重连，同时重连次数增加，一旦重新连接成功，就归零重连次数，方便下次重连，如果重连次数超过最大次数，就要提示错误，不在尝试了</p><h4 id="4-echarts-大数据渲染">4. echarts 大数据渲染</h4><p>有三种方案：</p><ol><li>降采样策略</li></ol><p>不会渲染全部数据，按照某种算法只加载部分数据，但是保留整体图形相似的形状。</p><p>具体配置：大部分图表都有一个配置项 sampling，配置它就可以达到了</p><ol start="2"><li>添加 dataZoom 组件</li></ol><p>设置渲染数据范围：startValue 和 endValue，这么做的目的就是一次性渲染一部分数据，速度更快</p><ol start="3"><li>appendData</li></ol><p>能支持大数据量（百万以上）的渲染场景，可以对数据进行分片加载数据和增量渲染。</p><p>但是只能部分图表才能使用，具体用法一般会参考文档使用。</p><h3 id="2-3-后台实现权限管理功能">2.3. 后台实现权限管理功能</h3><ol><li>搭建三个页面来管理权限功能：用户管理、角色管理、菜单管理</li></ol><ul><li>菜单管理：需要填写路由名称、路由组件地址、菜单图标、按钮权限值等内容</li><li>角色管理：管理角色对应访问菜单的权限</li><li>用户管理：管理用来登录的账户，同时会分配角色（一旦分配该用户就有角色对应的访问权限了）</li></ul><ol start="2"><li>登录</li></ol><p>当用户进行登录时，就能得到 token，我们将 token 存储起来（pinia/vuex 和 localStorage）</p><p>使用：在 axios 请求拦截器中携带 token 参数</p><ol start="3"><li>路由全局前置导航守卫</li></ol><p>登录成功，会进行路由跳转。或者用户第一次访问，都会触发路由全局前置导航守卫</p><p>此时会判断是否有 token，没有 token 说明没有登录，只能访问登录页面</p><p>有 token 说明登录了，需要进一步判断是否有用户数据，如果有，直接访问页面</p><p>如果没有用户数据，需要发送请求获取用户数据</p><ol start="4"><li>获取用户数据</li></ol><p>获取用户数据可以得到用户基本信息、用户的菜单权限列表和用户按钮权限列表</p><p>用户的菜单权限列表：就是服务器返回的用户拥有访问权限的路由表</p><p>用户按钮权限列表：就是用户拥有页面上某个按钮的权限表</p><ol start="5"><li>路由权限控制</li></ol><p>一开始路由表分成两部分：静态路由表和任意路由表</p><p>静态路由表：登录、404 等页面</p><p>任意路由表：匹配任意地址，跳转 404</p><p>一上来只加载静态路由表，所以可以访问登录页面</p><p>当用户数据加载完成时，我们会遍历用户的菜单权限列表，将内部 component 通过路由懒加载形式替换成路由组件，然后在遍历通过 router.addRoute 方法将配置追加到路由中，此时我们就能访问这些路由了（最后会追加任意路由表）</p><ol start="6"><li>按钮权限控制</li></ol><p>通过指令方式实现的：自定义全局指令 v-permission</p><p>内部会判断某个按钮传入的权限值在不在用户按钮权限列表中，如果在啥也不处理，不在就删除当前元素</p><p>让用户无法访问，从而实现按钮权限控制</p><h3 id="2-4-其他">2.4 其他</h3><p>也能说项目优化和组件封装</p><h2 id="3-项目优化">3. 项目优化</h2><ol><li>样式方面</li></ol><ul><li>定义公共样式，混合，全局变量复用</li></ul><ol start="2"><li>js 方面</li></ol><ul><li>v-if 和 v-show，频繁用 v-show，不频繁用 v-if</li><li>页面比较长的表达式，或者使用了多次表达式，用 computed 缓存</li><li>vue 中遇到大量数据可以使用 Object.freeze 冻结数据（这样能让内部数据不被数据劫持，不会生产 dep 对象等，节省内存提升性能）</li><li>vue 中遇到不涉及用户界面更新的数据不定义成响应式（这个数据也不会被数据劫持，比如定时器的返回值）</li><li>使用 keep-alive 缓存路由组件，切换性能更好，但是要注意数据是否需要及时更新（activated 生命周期）</li><li>v-for 遍历 key 属性尽量唯一且稳定（这里可以聊一下 diff 算法），且在 vue2 中避免同时使用 v-if，vue3 中可以。</li><li>echarts 大量数据渲染优化（…），普通大数据渲染：分页 或 虚拟长列表优化（商品数据展示）</li><li>图片懒加载</li><li>路由懒加载</li><li>第三方插件的按需引入（element-ui、echarts 按需加载配置）</li><li>高频触发的事件使用防抖、节流（购物车商品数量操作）</li><li>大量的事件使用事件委托优化（三级分类导航）</li><li>封装函数、封装组件复用（EchartsCard、Card 等）</li></ul><ol start="3"><li>打包工具层面的优化</li></ol><p>vue2 项目：通过配置 webpack splitChunk 代码分割，从而将 element-ui、echarts、vue 等库进行单独打包，就能并行加载速度更快</p><ol start="4"><li>网络层面的优化</li></ol><ul><li>开启 gzip 压缩</li><li>浏览器缓存（强缓存和协商缓存）</li><li>CDN 的使用（要结合 webpack 配置一起使用）</li><li>升级 http 协议为 2.0</li></ul><h2 id="4-项目组件封装">4. 项目组件封装</h2><h3 id="1-大文件上传">1. 大文件上传</h3><p>需求: 项目中有超过几百 mb 的文件需要上传，原来 el-upload 是整体上传比较慢，同时网络一旦不稳定，需要重新上传，不太好，所以重新封装 el-upload 组件，实现大文件上传</p><ol><li>切片上传</li></ol><ul><li>通过 el-upload 组件定义 http-request 方法来自定义上传，在回调函数中可以得到上传文件</li><li>将上传文件按照预先定义好单个切片大小（比如 10mb），通过文件的 slice 方法，将大文件截取成一个个小文件，添加到数组中，实现切片</li><li>设置文件名称和代表顺序的下标，通过 formData 方式并行上传到服务器</li><li>再通过 Promise.all 方法等所有切片上传好，在发送一个请求通知服务器所有切片上传完成，请求合并文件，服务器返回大文件在线访问地址</li></ul><ol start="2"><li>进度条</li></ol><ul><li><p>el-upload 组件 file-list 文件列表中每个文件都有一个 status 和 percentage 属性</p><ul><li>status 代表上传的状态：uploading 代表上传中，此时会显示上传进度条，success 代表上传成功，显示成功的图标</li><li>percentage 显示上传的进度</li></ul></li><li><p>上传切片之前初始化 file 的 status 为 uploading，此时会显示上传进度条，percentage 为 0，同时定义一个用来存储已经上传文件大小的属性（loaded）</p></li><li><p>在上传切片请求方法中添加 onProgress 回调，它会在上传文件时触发，此时就能得到已经上传的文件大小，将<code>已经上传的文件大小累加 / 文件总大小 * 100</code> 就能得到上传的进度 percentage</p></li><li><p>判断<code>percentage=100</code>时，将 status 调成 success，上传成功</p></li></ul><ol start="3"><li>创建 hash</li></ol><p>要想实现断点续传，需要服务器记录已经上传的切片内容，并且要保证如果多个用户上传文件名一样的话，文件不能冲突</p><p>所以我们根据文件内容生成 hash 值（相同文件生成 hash 值一样，不同文件生成 hash 值不一样），将 hash 值作为切片名称，这样就不会受文件名影响了</p><p>因为上传文件非常大，计算 hash 值需要比较长的时间，这里我使用 web worker 进行优化，将根据文件内容计算 hash 值的任务交给分线程完成，这样主线程还可以干其他事情</p><ol start="4"><li>断点续传</li></ol><ul><li>在上传切片之前，需要先发送请求给服务器获取当前 hash 对应文件已经上传的切片</li><li>服务器会返回值，值有一个数组，内部包含已经上传的切片名称</li><li>我们上传切片之前，对所有切片进行过滤，判断当前切片是否已经上传过，上传过就过滤，没有上传过就保留，这样就能实现断点续传了（此时 loaded 值初始化就不能为 0 了，而是<code>已经上传的切片数量 * 10mb</code>）</li></ul><ol start="5"><li>秒传</li></ol><ul><li>在上传切片之前，需要先发送请求给服务器获取当前 hash 对应文件已经上传的切片</li><li>如果文件全部上传过，会返回一个标识和文件在线访问地址 url，我们判断标识如果满足条件，就直接使用 url 就好</li><li>不满足条件继续走断点续传逻辑</li></ul><h3 id="2-配置化表单-动态化表单">2. 配置化表单/动态化表单</h3><p>需求: 后台管理项目有大量的表单需要开发，传统一个个开发效率太低，重复度高，所以封装了一个 Schema Form 组件来配置化表单</p><ol><li>给组件传递 schema、rules、model 等属性</li></ol><ul><li><p>schema：是一个数组内部是对象，包含：</p><ul><li>component 代表要渲染的组件</li><li>label 左侧文字</li><li>props 渲染组件的 props 数据</li><li>model 要收集的数据名称，也是表单校验规则名称</li><li>key 遍历的 key 属性</li><li>span 栅格布局占份数</li><li>下拉列表 selectOptions、单选 radioOptions 等</li></ul></li><li><p>rules：表单校验规则</p></li><li><p>model：表单的数据</p></li></ul><ol start="2"><li>组件内部会根据 schema 的值来动态渲染表单（可以说说具体做法）</li></ol><h1>Other</h1><h2 id="1-你的期望薪资多少">1. 你的期望薪资多少</h2><h2 id="2-你为什么从上家公司离职">2. 你为什么从上家公司离职</h2><h2 id="3-上家公司有多少人？前端多少？">3. 上家公司有多少人？前端多少？</h2><h2 id="4-公司开发项目流程">4. 公司开发项目流程</h2><h2 id="5-如果你的上级将一些不是你的任务交给你，你怎么办？">5. 如果你的上级将一些不是你的任务交给你，你怎么办？</h2><h2 id="6-怎么与后端协商？怎么与其他同事交流？">6. 怎么与后端协商？怎么与其他同事交流？</h2>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023前端面试系列— 计算机网络篇</title>
      <link href="/posts/105.html"/>
      <url>/posts/105.html</url>
      
        <content type="html"><![CDATA[<div class="note info no-icon flat"><p>本文是我的前端面试系列系列导航，其他章节内容可点击链接查看：</p><ol><li><a href="https://www.cameliia.top/posts/100.html">2023前端面试系列–HTML &amp; CSS 篇</a> ⇦当前位置🪂</li><li><a href="https://www.cameliia.top/posts/101.html">2023前端面试系列-- JS 篇</a></li><li><a href="https://www.cameliia.top/posts/102.html">2023前端面试系列–vue篇</a></li><li><a href="https://www.cameliia.top/posts/103.html">2023前端面试系列–TS篇</a></li><li><a href="https://www.cameliia.top/posts/104.html">2023前端面试系列–React篇</a></li><li><a href="https://www.cameliia.top/posts/105.html">2023前端面试系列–网络篇</a></li><li><a href="https://www.cameliia.top/posts/106.html">2023前端面试系列–浏览器篇</a></li></ol></div><h1>HTTP 和 HTTPS</h1><h3 id="HTTP-的基本概念">HTTP 的基本概念</h3><p>http: 是互联网上应用最为广泛的一种网络协议，是一个客户端和服务器端<code>请求和应答的标准（TCP）</code>，用于从 WWW 服务器传输超文本到本地浏览器的<code>超文本传输协议</code>。</p><h3 id="HTTP工作原理">HTTP工作原理</h3><p>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。客户端向服务器发送一个请求报文，服务器以一个状态行作为响应。</p><h3 id="HTTP请求-响应的步骤">HTTP请求/响应的步骤</h3><ul><li>1.客户端连接到Web服务器</li><li>2.发送HTTP请求</li><li>3.服务器接受请求并返回HTTP响应</li><li>4.释放TCP连接</li><li>5.客户端（浏览器）解析HTML内容</li></ul><blockquote><p>记忆口诀：连接发送加响应，释放解析整过程。</p></blockquote><h3 id="HTTP-的-5-种方法">HTTP 的 5 种方法</h3><ul><li>GET—获取资源</li><li>POST—传输资源</li><li>PUT—更新资源</li><li>DELETE—删除资源</li><li>HEAD—获取报文首部</li></ul><h3 id="GET与POST的区别">GET与POST的区别</h3><p><strong>1.浏览器回退表现不同</strong> GET在浏览器回退时是无害的，而POST会再次提交请求<br><strong>2.浏览器对请求地址的处理不同</strong> GET请求地址会被浏览器主动缓存，而POST不会，除非手动设置<br><strong>3.浏览器对响应的处理不同</strong>GET请求参数会被完整的保留在浏览器历史记录里，而POST中的参数不会被保留<br><strong>4.参数大小不同.</strong> GET请求在URL中传送的参数是有长度的限制，而POST没有限制<br><strong>5.安全性不同.</strong> GET参数通过URL传递，会暴露，不安全；POST放在Request Body中，相对更安全<br><strong>6.针对数据操作的类型不同</strong>.GET对数据进行查询，POST主要对数据进行增删改！简单说，GET是只读，POST是写。</p><h3 id="HTTP报文的组成成分">HTTP报文的组成成分</h3><p>请求报文{ 请求行、请求头、空行、请求体 } 请求行：{http方法、页面地址、http协议、http版本} 响应报文{ 状态行、响应头、空行、响应体 }</p><p><strong>Request Header:</strong></p><ol><li><strong>GET /sample.Jsp HTTP/1.1</strong>  //请求行</li><li><strong>Host:</strong>  www.uuid.online/ //请求的目标域名和端口号</li><li><strong>Origin:</strong> <a href="http://localhost:8081/">http://localhost:8081/</a>  //请求的来源域名和端口号 （跨域请求时，浏览器会自动带上这个头信息）</li><li><strong>Referer:</strong> <a href="https://localhost:8081/link?query=xxxxx">https://localhost:8081/link?query=xxxxx</a> //请求资源的完整URI</li><li><strong>User-Agent:</strong> Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36 //浏览器信息</li><li><strong>Cookie:</strong>  BAIDUID=FA89F036:FG=1; BD_HOME=1; sugstore=0  //当前域名下的Cookie</li><li><strong>Accept:</strong> text/html,image/apng  //代表客户端希望接受的数据类型是html或者是png图片类型</li><li><strong>Accept-Encoding:</strong> gzip, deflate  //代表客户端能支持gzip和deflate格式的压缩</li><li><strong>Accept-Language:</strong> zh-CN,zh;q=0.9  //代表客户端可以支持语言zh-CN或者zh(值得一提的是q(0~1)是优先级权重的意思，不写默认为1，这里zh-CN是1，zh是0.9)</li><li><strong>Connection:</strong> keep-alive  //告诉服务器，客户端需要的tcp连接是一个长连接</li></ol><p><strong>Response Header:</strong></p><ol><li><strong>HTTP/1.1 200 OK</strong>  // 响应状态行</li><li><strong>Date:</strong>  Mon, 30 Jul 2018 02:50:55 GMT  //服务端发送资源时的服务器时间</li><li><strong>Expires:</strong>  Wed, 31 Dec 1969 23:59:59 GMT //比较过时的一种验证缓存的方式，与浏览器（客户端）的时间比较，超过这个时间就不用缓存（不和服务器进行验证），适合版本比较稳定的网页</li><li><strong>Cache-Control:</strong>  no-cache  // 现在最多使用的控制缓存的方式，会和服务器进行缓存验证，具体见<a href="https://www.cnblogs.com/amiezhang/p/9389537.html">博文”Cache-Control“</a></li><li><strong>etag:</strong>  “fb8ba2f80b1d324bb997cbe188f28187-ssl-df”  // 一般是<a href="http://www.t086.com/article/5207">Nginx静态服务器</a>发来的静态文件签名，浏览在没有“Disabled cache”情况下，接收到etag后，同一个url第二次请求就会自动带上“If-None-Match”</li><li><strong>Last-Modified:</strong>  Fri, 27 Jul 2018 11:04:55 GMT //是服务器发来的当前资源最后一次修改的时间，下次请求时，如果服务器上当前资源的修改时间大于这个时间，就返回新的资源内容</li><li><strong>Content-Type:</strong>  text/html; charset=utf-8  //如果返回是流式的数据，我们就必须告诉浏览器这个头，不然浏览器会下载这个页面，同时告诉浏览器是utf8编码，否则可能出现乱码</li><li><strong>Content-Encoding:</strong>  gzip  //告诉客户端，应该采用gzip对资源进行解码</li><li><strong>Connection:</strong>  keep-alive  //告诉客户端服务器的tcp连接也是一个长连接</li></ol><h3 id="https-的基本概念">https 的基本概念</h3><p>https:是以安全为目标的 HTTP 通道，即 HTTP 下 加入 SSL 层进行加密。</p><p>https 协议的作用：建立一个信息安全通道，来确保数据的传输，确保网站的真实性。</p><h3 id="http-和-https-的区别？">http 和 https 的区别？</h3><ul><li>http 是超文本传输协议，信息是明文传输，https 则是具有安全性的 ssl 加密传输协议。</li><li>Https 协议需要 ca 证书，费用较高。</li><li>使用不同的链接方式，端口也不同，一般，http 协议的端口为 80，https 的端口为 443。</li><li>http 的连接很简单，是无状态的。</li></ul><blockquote><p>记忆口诀：明文传输超文本，安全等级各不同。CA证书费用高，无状连接端难同。</p></blockquote><h4 id="https-协议的工作原理">https 协议的工作原理</h4><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c42bc6f45451457fa6d614fb27534516~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>客户端在使用 HTTPS 方式与 Web 服务器通信时有以下几个步骤：</p><ol><li>客户端使用 https url 访问服务器，则要求 web 服务器<code>建立 ssl 链接</code>。</li><li>web 服务器接收到客户端的请求之后，会<code>将网站的证书（证书中包含了公钥），传输给客户端</code>。</li><li>客户端和 web 服务器端开始<code>协商 SSL 链接的安全等级</code>，也就是加密等级。</li><li>客户端浏览器通过双方协商一致的安全等级，<code>建立会话密钥</code>，然后通过网站的公钥来加密会话密钥，并传送给网站。</li><li>web 服务器<code>通过自己的私钥解密出会话密钥</code>。</li><li>web 服务器<code>通过会话密钥加密与客户端之间的通信</code>。</li></ol><blockquote><p>记忆口诀：一连二传三协商，四建五得六使用。</p></blockquote><h4 id="https-协议的优缺点">https 协议的优缺点</h4><ul><li>HTTPS 协议要比 http 协议<code>安全</code>，可防止数据在传输过程中被窃取、改变，确保数据的完整性。</li><li>https 握手阶段比较<code>费时</code>，会使页面加载时间延长 50%，增加 10%~20%的耗电。</li><li>https <code>缓存</code>不如 http 高效，会增加数据开销。</li><li>SSL 证书也需要钱，功能越强大的<code>证书费</code>用越高。</li><li>SSL 证书需要绑定 <code>IP</code>，不能再同一个 ip 上绑定多个域名，ipv4 资源支持不了这种消耗。</li></ul><h3 id="TCP-IP网络模型">TCP/IP网络模型</h3><p>TCP/IP模型是互联网的基础，它是一系列网络协议的总称。这些协议可以划分为四层，分别为链路层、网络层、传输层和应用层。</p><ul><li>链路层：负责封装和解封装IP报文，发送和接受ARP/RARP报文等。</li><li>网络层：负责路由以及把分组报文发送给目标网络或主机。</li><li>传输层：负责对报文进行分组和重组，并以TCP或UDP协议格式封装报文。</li><li>应用层：负责向用户提供应用程序，比如HTTP、FTP、Telnet、DNS、SMTP等。</li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fa80b3b48a84bd18d8e708c56a1dc22~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><h3 id="TCP三次握手">TCP三次握手</h3><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/baf3d5df95a74f47a1d779ee50c3411f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><ol><li>第一次握手：<code>建立连接时，客户端发送syn包（syn=j）到服务器，并进入SYN_SENT状态，等待服务器确认</code>；SYN：同步序列编号（Synchronize Sequence Numbers）。</li><li>第二次握手：<code>服务器收到syn包并确认客户的SYN</code>（ack=j+1），<code>同时也发送一个自己的SYN包</code>（syn=k），即SYN+ACK包，此时服务器进入SYN_RECV状态；</li><li>第三次握手：<code>客户端收到服务器的SYN+ACK包，向服务器发送确认包ACK(ack=k+1）</code>，此包发送完毕，客户端和服务器进入ESTABLISHED（TCP连接成功）状态，完成三次握手。</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">握手过程中传送的包里不包含数据，三次握手完毕后，客户端与服务器才正式开始传送数据。</span><br></pre></td></tr></table></figure><h3 id="TCP-四次挥手">TCP 四次挥手</h3><ol><li><code>客户端进程发出连接释放报文</code>，并且停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u（等于前面已经传送过来的数据的最后一个字节的序号加1），此时，客户端进入FIN-WAIT-1（终止等待1）状态。 TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li></ol><p>2）<code>服务器收到连接释放报文，发出确认报文</code>，ACK=1，ack=u+1，并且带上自己的序列号seq=v，此时，服务端就进入了CLOSE-WAIT（关闭等待）状态。TCP服务器通知高层的应用进程，客户端向服务器的方向就释放了，这时候处于半关闭状态，即客户端已经没有数据要发送了，但是服务器若发送数据，客户端依然要接受。这个状态还要持续一段时间，也就是整个CLOSE-WAIT状态持续的时间。</p><p>3）客户端收到服务器的确认请求后，此时，客户端就进入FIN-WAIT-2（终止等待2）状态，等待服务器发送连接释放报文（在这之前还需要接受服务器发送的最 后的数据）。</p><p>4）<code>服务器将最后的数据发送完毕后，就向客户端发送连接释放报文</code>，FIN=1，ack=u+1，由于在半关闭状态，服务器很可能又发送了一些数据，假定此时的序列号为seq=w，此时，服务器就进入了LAST-ACK（最后确认）状态，等待客户端的确认。</p><p>5）<code>客户端收到服务器的连接释放报文后，必须发出确认</code>，ACK=1，ack=w+1，而自己的序列号是seq=u+1，此时，客户端就进入了TIME-WAIT（时间等待）状态。注意此时TCP连接还没有释放，必须经过2∗∗MSL（最长报文段寿命）的时间后，当客户端撤销相应的TCB后，才进入CLOSED状态。</p><p>6）服务器只要收到了客户端发出的确认，立即进入CLOSED状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，服务器结束TCP连接的时间要比客户端早一些。</p><h3 id="TCP和UDP的区别">TCP和UDP的区别</h3><ol><li><p>TCP是面向<code>连接</code>的，而UDP是面向无连接的。</p></li><li><p>TCP仅支持<code>单播传输</code>，UDP 提供了单播，多播，广播的功能。</p></li><li><p>TCP的三次握手保证了连接的<code>可靠性</code>; UDP是无连接的、不可靠的一种数据传输协议，首先不可靠性体现在无连接上，通信都不需要建立连接，对接收到的数据也不发送确认信号，发送端不知道数据是否会正确接收。</p></li><li><p>UDP的<code>头部开销</code>比TCP的更小，数据<code>传输速率更高</code>，<code>实时性更好</code>。</p></li></ol><h3 id="HTTP-请求跨域问题">HTTP 请求跨域问题</h3><ol><li><p>跨域的原理</p><p><strong>跨域</strong>，是指浏览器不能执行其他网站的脚本。它是由浏览器的<code>同源策略</code>造成的。<br><strong>同源策略</strong>,是浏览器对 JavaScript 实施的安全限制，只要<code>协议、域名、端口</code>有任何一个不同，都被当作是不同的域。<br><strong>跨域原理</strong>，即是通过各种方式，<code>避开浏览器的安全限制</code>。</p></li><li><p>解决方案</p><p>最初做项目的时候，使用的是jsonp，但存在一些问题，使用get请求不安全，携带数据较小，后来也用过iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和proxy代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用proxy，在服务器上使用nginx代理，这样开发过程中彼此都方便，效率也高；现在h5新特性还有 windows.postMessage()</p><ul><li><p><strong>JSONP</strong>：<br>ajax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。</p><p>步骤：</p><ol><li>去创建一个script标签</li><li>script的src属性设置接口地址</li><li>接口参数，必须要带一个自定义函数名，要不然后台无法返回数据</li><li>通过定义函数名去接受返回的数据</li></ol>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态创建 script</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置 script 的 src 属性，并设置请求地址</span></span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://localhost:3000/?callback=getData&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让 script 生效</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br></pre></td></tr></table></figure><p><strong>JSONP 的缺点</strong>:<br>JSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。</p></li><li><p><strong>document.domain</strong>  基础域名相同 子域名不同</p></li><li><p><strong><a href="http://window.name">window.name</a></strong> 利用在一个浏览器窗口内，载入所有的域名都是共享一个 <a href="http://window.name">window.name</a></p></li><li><p><strong>CORS</strong> CORS(Cross-origin resource sharing)跨域资源共享 服务器设置对CORS的支持原理：服务器设置Access-Control-Allow-Origin HTTP响应头之后，浏览器将会允许跨域请求</p></li><li><p><strong>proxy代理</strong> 目前常用方式</p></li><li><p><strong>window.postMessage()</strong>  利用h5新特性 window.postMessage()</p></li><li><p><strong>Websocket</strong></p></li></ul></li></ol><h3 id="Cookie、sessionStorage、localStorage-的区别">Cookie、sessionStorage、localStorage 的区别</h3><p><strong>相同点</strong>：</p><ul><li>存储在客户端</li></ul><p><strong>不同点</strong>：</p><ul><li>cookie数据大小不能超过4k；sessionStorage和localStorage的存储比cookie大得多，可以达到5M+</li><li>cookie设置的过期时间之前一直有效；localStorage永久存储，浏览器关闭后数据不丢失除非主动删除数据；sessionStorage数据在当前浏览器窗口关闭后自动删除</li><li>cookie的数据会自动的传递到服务器；sessionStorage和localStorage数据保存在本地</li></ul><h3 id="HTTP状态码及常见状态码">HTTP状态码及常见状态码</h3><h4 id="HTTP状态码">HTTP状态码</h4><ul><li>1xx：指示信息类，表示请求已接受，继续处理</li><li>2xx：指示成功类，表示请求已成功接受</li><li>3xx：指示重定向，表示要完成请求必须进行更近一步的操作</li><li>4xx：指示客户端错误，请求有语法错误或请求无法实现</li><li>5xx：指示服务器错误，服务器未能实现合法的请求</li></ul><h4 id="常见状态码">常见状态码</h4><ul><li><p>200 OK：客户端请求成功</p></li><li><p>301 Moved Permanently：所请求的页面已经永久重定向至新的URL</p></li><li><p>302 Found：所请求的页面已经临时重定向至新的URL</p></li><li><p>304 Not Modified 未修改。</p></li><li><p>403 Forbidden：对请求页面的访问被禁止</p></li><li><p>404 Not Found：请求资源不存在</p></li><li><p>500 Internal Server Error：服务器发生不可预期的错误原来缓冲的文档还可以继续使用</p></li><li><p>503 Server Unavailable：请求未完成，服务器临时过载或宕机，一段时间后可恢复正常</p></li><li><p>1xx（临时响应）表示临时响应并需要请求者继续执行操作的状态码</p><ul><li>100 - 继续 请求者应当继续提出请求。服务器返回此代码表示已收到请求的第一部分，正在等待其余部分</li><li>101 - 切换协议 请求者已要求服务器切换协议，服务器已确认并准备切换</li></ul></li><li><p>2xx（成功）表示成功处理了请求的状态码</p><ul><li><code>200</code> - 成功 服务器已经成功处理了请求。通常，这表示服务器提供了请求的网页</li><li>201 - 已创建 请求成功并且服务器创建了新的资源</li><li>202 - 已接受 服务器已接受请求，但尚未处理</li><li>203 - 非授权信息 服务器已经成功处理了请求，但返回的信息可能来自另一来源</li><li>204 - 无内容 服务器成功处理了请求，但没有返回任何内容</li><li>205 - 重置内容 服务器成功处理了请求，但没有返回任何内容</li></ul></li><li><p>3xx（重定向）表示要完成请求，需要进一步操作；通常，这些状态代码用来重定向</p><ul><li>300 - 多种选择 针对请求，服务器可执行多种操作。服务器可根据请求者（user agent）选择一项操作，或提供操作列表供请求者选择</li><li><code>301</code> - 永久移动 请求的网页已永久移动到新位置。服务器返回此响应（对GET或HEAD请求的响应）时，会自动将请求者转到新位置</li><li><code>302</code> - 临时移动 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求</li><li>303 - 查看其它位置 请求者应当对不同的位置使用单独的GET请求来检索响应时，服务器返回此代码</li><li><code>304</code> - 未修改 自上次请求后，请求的网页未修改过。服务器返回此响应，不会返回网页的内容</li><li>305 - 使用代理 请求者只能使用代理访问请求的网页。如果服务器返回此响应，还表示请求者应使用代理</li><li><code>307</code> - 临时性重定向 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有的位置来进行以后的请求</li></ul></li><li><p>4xx（请求错误）这些状态码表示请求可能出错，妨碍了服务器的处理</p><ul><li><code>400</code> - 错误请求 服务器不理解请求的语法</li><li><code>401</code> - 未授权 请求要求身份验证。对于需要登录的网页，服务器可能返回此响应</li><li><code>403</code> - 禁止 服务器拒绝请求</li><li><code>404</code> - 未找到 服务器找不到请求的网页</li><li>405 - 方法禁用 禁用请求中指定的方法</li><li>406 - 不接受 无法使用请求的内容特性响应请求的网页</li><li><code>407</code> - 需要代理授权 此状态码与401（未授权）类似，但指定请求者应当授权使用代理</li><li><code>408</code> - 请求超时 服务器等候请求时发生超时</li><li>410 - 已删除 如果请求的资源已永久删除，服务器就会返回此响应</li><li><code>413</code> - 请求实体过大 服务器无法处理请求，因为请求实体过大，超出了服务器的处理能力</li><li><code>414</code> - 请求的URI过长 请求的URI（通常为网址）过长，服务器无法处理</li></ul></li><li><p>5xx（服务器错误）这些状态码表示服务器在尝试处理请求时发生内部错误。这些错误可能是服务器本身的错误，而不是请求出错</p><ul><li><code>500</code> - 服务器内部错误 服务器遇到错误，无法完成请求</li><li>501 - 尚未实施 服务器不具备完成请求的功能。例如，服务器无法识别请求方法时可能会返回此代码</li><li><code>502</code> - 错误网关 服务器作为网关或代理，从上游服务器无法收到无效响应</li><li><code>503</code> - 服务器不可用 服务器目前无法使用（由于超载或者停机维护）。通常，这只是暂时状态</li><li><code>504</code> - 网关超时 服务器作为网关代理，但是没有及时从上游服务器收到请求</li><li>505 - HTTP版本不受支持 服务器不支持请求中所用的HTTP协议版本</li></ul></li></ul><h3 id="介绍下304过程">介绍下304过程</h3><ul><li><p>a. 浏览器请求资源时首先命中资源的Expires 和 Cache-Control，Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效，可以通过Cache-control: max-age指定最大生命周期，状态仍然返回200，但不会请求数据，在浏览器中能明显看到from cache字样。</p></li><li><p>b. 强缓存失效，进入协商缓存阶段，首先验证ETagETag可以保证每一个资源是唯一的，资源变化都会导致ETag变化。服务器根据客户端上送的If-None-Match值来判断是否命中缓存。</p></li><li><p>c. 协商缓存Last-Modify/If-Modify-Since阶段，客户端第一次请求资源时，服务服返回的header中会加上Last-Modify，Last-modify是一个时间标识该资源的最后修改时间。再次请求该资源时，request的请求头中会包含If-Modify-Since，该值为缓存之前返回的Last-Modify。服务器收到If-Modify-Since后，根据资源的最后修改时间判断是否命中缓存。</p></li></ul><h3 id="浏览器的缓存机制-强制缓存-协商缓存">浏览器的缓存机制 强制缓存 &amp;&amp; 协商缓存</h3><p>浏览器与服务器通信的方式为应答模式，即是：浏览器发起HTTP请求 – 服务器响应该请求。那么浏览器第一次向服务器发起该请求后拿到请求结果，会根据响应报文中HTTP头的缓存标识，决定是否缓存结果，是则将请求结果和缓存标识存入浏览器缓存中，简单的过程如下图：</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/05b3fe9c411f4881a8b22fe37eae170b~tplv-k3u1fbpfcp-zoom-1.image" alt="图片"></p><p>由上图我们可以知道：</p><ul><li>浏览器每次发起请求，都会<code>先在浏览器缓存中查找该请求的结果以及缓存标识</code></li><li>浏览器每次拿到返回的请求结果都会<code>将该结果和缓存标识存入浏览器缓存中</code></li></ul><p>以上两点结论就是浏览器缓存机制的关键，他确保了每个请求的缓存存入与读取，只要我们再理解浏览器缓存的使用规则，那么所有的问题就迎刃而解了。为了方便理解，这里根据是否需要向服务器重新发起HTTP请求将缓存过程分为两个部分，分别是<code>强制缓存</code>和<code>协商缓存</code>。</p><ul><li><p><strong>强制缓存</strong></p><p><code>强制缓存就是向浏览器缓存查找该请求结果，并根据该结果的缓存规则来决定是否使用该缓存结果的过程。</code>当浏览器向服务器发起请求时，服务器会将缓存规则放入HTTP响应报文的HTTP头中和请求结果一起返回给浏览器，控制强制缓存的字段分别是 <code>Expires</code> 和 <code>Cache-Control</code>，其中Cache-Control优先级比Expires高。</p><p>强制缓存的情况主要有三种(暂不分析协商缓存过程)，如下：</p><ol><li>不存在该缓存结果和缓存标识，强制缓存失效，则直接向服务器发起请求（跟第一次发起请求一致）。</li><li>存在该缓存结果和缓存标识，但该结果已失效，强制缓存失效，则使用协商缓存。</li><li>存在该缓存结果和缓存标识，且该结果尚未失效，强制缓存生效，直接返回该结果</li></ol></li><li><p><strong>协商缓存</strong></p><p><code>协商缓存就是强制缓存失效后，浏览器携带缓存标识向服务器发起请求，由服务器根据缓存标识决定是否使用缓存的过程</code>，同样，协商缓存的标识也是在响应报文的HTTP头中和请求结果一起返回给浏览器的，控制协商缓存的字段分别有：<code>Last-Modified / If-Modified-Since</code> 和 <code>Etag / If-None-Match</code>，其中Etag / If-None-Match的优先级比Last-Modified / If-Modified-Since高。协商缓存主要有以下两种情况：</p><ol><li>协商缓存生效，返回304</li><li>协商缓存失效，返回200和请求结果结果</li></ol></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e0ce991db4847b98d9f049f9ffa5c93~tplv-k3u1fbpfcp-watermark.image" alt="image.png"></p><p>传送门 ☞ <a href="https://juejin.cn/post/6992843117963509791" title="https://juejin.cn/post/6992843117963509791"># 彻底理解浏览器的缓存机制</a></p><h3 id="HTTP-请求跨域问题-2">HTTP 请求跨域问题</h3><ol><li><p>跨域的原理</p><p><strong>跨域</strong>，是指浏览器不能执行其他网站的脚本。它是由浏览器的<code>同源策略</code>造成的。跨域访问是被各大浏览器所默认禁止的。<br><strong>同源策略</strong>,是浏览器对 JavaScript 实施的安全限制，只要<code>协议、域名、端口</code>有任何一个不同，都被当作是不同的域。<br><strong>跨域原理</strong>，即是通过各种方式，<code>避开浏览器的安全限制</code>。</p></li><li><p>解决方案</p><p>最初做项目的时候，使用的是jsonp，但存在一些问题，使用get请求不安全，携带数据较小，后来也用过iframe，但只有主域相同才行，也是存在些问题，后来通过了解和学习发现使用代理和proxy代理配合起来使用比较方便，就引导后台按这种方式做下服务器配置，在开发中使用proxy，在服务器上使用nginx代理，这样开发过程中彼此都方便，效率也高；现在h5新特性还有 windows.postMessage()</p><ul><li><p><strong>JSONP</strong>：<br>ajax 请求受同源策略影响，不允许进行跨域请求，而 script 标签 src 属性中的链 接却可以访问跨域的 js 脚本，利用这个特性，服务端不再返回 JSON 格式的数据，而是 返回一段调用某个函数的 js 代码，在 src 中进行了调用，这样实现了跨域。</p><p>步骤：</p><ol><li>去创建一个script标签</li><li>script的src属性设置接口地址</li><li>接口参数，必须要带一个自定义函数名，要不然后台无法返回数据</li><li>通过定义函数名去接受返回的数据</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态创建 script</span></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置回调函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">data</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置 script 的 src 属性，并设置请求地址</span></span><br><span class="line">script.<span class="property">src</span> = <span class="string">&#x27;http://localhost:3000/?callback=getData&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 让 script 生效</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(script);</span><br></pre></td></tr></table></figure><p><strong>JSONP 的缺点</strong>:<br>JSON 只支持 get，因为 script 标签只能使用 get 请求； JSONP 需要后端配合返回指定格式的数据。</p></li><li><p><strong>document.domain</strong> 基础域名相同 子域名不同</p></li><li><p><strong><a href="http://window.name">window.name</a></strong> 利用在一个浏览器窗口内，<a href="http://xn--window-9m7igl23bo8p1d816aimn1m9awlmujd5y9gz67ew7f.name">载入所有的域名都是共享一个window.name</a></p></li><li><p><strong>CORS</strong><br>CORS(Cross-origin resource sharing)跨域资源共享 是一种机制，是目前主流的跨域解决方案，它使用额外的 HTTP 头来告诉浏览器 让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。服务器设置对CORS的支持原理：服务器设置Access-Control-Allow-Origin HTTP响应头之后，浏览器将会允许跨域请求</p><p>1.浏览器端会自动向请求头添加origin字段，表明当前请求来源。<br>2.服务器设置Access-Control-Allow-Origin、Access-Control-Allow-Methods、Access-Control-Allow-Headers等 HTTP响应头字段之后，浏览器将会允许跨域请求。</p><p><strong>预检</strong></p><p>但是还有复杂一点的请求，我们需要先发OPTIONS请求，a.com想请求b.com它需要发一个自定义的Headers：X-ABC和content-type，这个时候就不是简单请求了， <a href="http://a.xn--comb-295k414c.com">a.com要给b.com</a> 发一个options请求，它其实在问b.com我用post行不行，还想在Headers中带X-ABC和content-type；并不是所有的headers都发这个OPTIONS请求，因为X-ABC是自定义的，所以需要发；b.com看到OPTIONS请求，先不会返回数据，先检查自己的策略，看看能不能支持这次请求，如果支持就返回200。</p><p>OPTIONS请求返回以下报文</p><p>HTTP/2.0 20 OK<br>Access-Control-Allow-Origin:<a href="https://a.com">https://a.com</a><br>Access-Control-Allow-Methods:POST,GET,OPTIONS<br>Access-Control-Allow-Headers:X-ABC,Content-Type<br>Access-Control-Max-Age:86400 // 告诉浏览器这个策略生效时间为一个小时，在一个小时之内发送类似的请求，不用在问服务端了，相当于缓存了<br>浏览器收到了OPTIONS的返回，会在发一次，这一次才是真正的请求数据，这次headers会带上X-ABC、contentType。</p><p>整体的过程cors将请求分为2种，简单请求和复杂请求，需不需要发送OPTIONS浏览器说的算，浏览器判断是简单请求还是复杂请求，cors是非常广泛的跨域手段 这里的缺点是OPTIONS请求也是一次请求，消耗带宽，真正的请求也会延迟。</p></li><li><p>最方便的跨域方案 <strong>proxy代理+ Nginx</strong><br>nginx是一款极其强大的web服务器，其优点就是轻量级、启动快、高并发。</p><p>跨域问题的产生是因为浏览器的同源政策造成的，但是服务器与服务器之间的数据交换是没有这个限制。</p><p>反向代理就是采用这种方式，建立一个虚拟的代理服务器来接收 internet 上的链接请求，然后转发给内部网络上的服务器，并将从服务器上得到的结果，返回给 internet 上请求链接的客户端。现在的新项目中nginx几乎是首选，我们用node或者java开发的服务通常都需要经过nginx的反向代理。</p></li><li><p><strong>window.postMessage()</strong> 利用h5新特性window.postMessage()</p></li></ul></li></ol><p>跨域传送门 ☞ <a href="https://juejin.cn/post/7003232769182547998"># 跨域，不可不知的基础概念</a></p><h3 id="粘包问题分析与对策">粘包问题分析与对策</h3><p>TCP粘包是指发送方发送的若干包数据到接收方接收时粘成一包，从接收缓冲区看，后一包数据的头紧接着前一包数据的尾。</p><p><strong>粘包出现原因</strong></p><p>简单得说，在流传输中出现，UDP不会出现粘包，因为它有<strong>消息边界</strong></p><p>粘包情况有两种，一种是<code>粘在一起的包都是完整的数据包</code>，另一种情况是<code>粘在一起的包有不完整的包</code>。</p><p>为了<strong>避免粘包</strong>现象，可采取以下几种措施：</p><p>（1）对于发送方引起的粘包现象，用户可通过编程设置来避免，<code>TCP提供了强制数据立即传送的操作指令push</code>，TCP软件收到该操作指令后，就立即将本段数据发送出去，而不必等待发送缓冲区满；</p><p>（2）对于接收方引起的粘包，则可通过优化程序设计、精简接收进程工作量、<code>提高接收进程优先级等措施</code>，使其及时接收数据，从而尽量避免出现粘包现象；</p><p>（3）由接收方控制，将一包数据按结构字段，人为控制分多次接收，然后合并，通过这种手段来避免粘包。<code>分包多发</code>。</p><p>以上提到的三种措施，都有其不足之处。</p><p>（1）第一种编程设置方法虽然可以避免发送方引起的粘包，但它关闭了优化算法，降低了网络发送效率，影响应用程序的性能，一般不建议使用。</p><p>（2）第二种方法只能减少出现粘包的可能性，但并不能完全避免粘包，当发送频率较高时，或由于网络突发可能使某个时间段数据包到达接收方较快，接收方还是有可能来不及接收，从而导致粘包。</p><p>（3）第三种方法虽然避免了粘包，但应用程序的效率较低，对实时应用的场合不适合。</p><blockquote><p>一种比较周全的对策是：接收方创建一预处理线程，对接收到的数据包进行预处理，将粘连的包分开。实验证明这种方法是高效可行的。</p></blockquote><h3 id="客户端与服务端长连接的几种方式">客户端与服务端长连接的几种方式</h3><ol><li><p><strong>ajax 轮询</strong><br><strong>实现原理</strong>：ajax 轮询指客户端每间隔一段时间向服务端发起请求，保持数据的同步。</p><p><strong>优点</strong>：可实现基础（指间隔时间较短）的数据更新。</p><p><strong>缺点</strong>：这种方法也只是尽量的模拟即时传输，但并非真正意义上的即时通讯，很有可能出现客户端请求时，服务端数据并未更新。或者服务端数据已更新，但客户端未发起请求。导致多次请求资源浪费，效率低下。【<code>数据更新不及时，效率低下</code>】</p></li><li><p><strong>long poll 长轮询</strong></p><p><strong>实现原理</strong>：<br>long poll 指的是客户端发送请求之后，如果没有数据返回，服务端会将请求挂起放入队列（不断开连接）处理其他请求，直到有数据返回给客户端。然后客户端再次发起请求，以此轮询。在 HTTP1.0 中客户端可以设置请求头 Connection:keep-alive，服务端收到该请求头之后知道这是一个长连接，在响应报文头中也添加 Connection:keep-alive。客户端收到之后表示长连接建立完成，可以继续发送其他的请求。在 HTTP1.1 中默认使用了 Connection:keep-alive 长连接。</p><p><strong>优点</strong>：减少客户端的请求，降低无效的网络传输，保证每次请求都有数据返回，不会一直占用线程。</p><p><strong>缺点</strong>：无法处理高并发，当客户端请求量大，请求频繁时对服务器的处理能力要求较高。服务器一直保持连接会消耗资源，需要同时维护多个线程，服务器所能承载的 TCP 连接数是有上限的，这种轮询很容易把连接数顶满。每次通讯都需要客户端发起，服务端不能主动推送。【<code>无法处理高并发，消耗服务器资源严重，服务端不能主动推送</code>】</p></li><li><p><strong>iframe 长连接</strong></p><p><strong>实现原理：</strong><br>在网页上嵌入一个 iframe 标签，该标签的 src 属性指向一个长连接请求。这样服务端就可以源源不断地给客户端传输信息。保障信息实时更新。</p><p><strong>优点</strong>：消息及时传输。</p><p><strong>缺点</strong>：<code>消耗服务器资源</code>。</p></li><li><p><strong>WebSocket</strong></p><p><strong>实现原理</strong>：<br>Websocket 实现了客户端与服务端的双向通信，只需要连接一次，就可以相互传输数据，很适合实时通讯、数据实时更新等场景。</p><p>Websocket 协议与 HTTP 协议没有关系，它是一个建立在 TCP 协议上的全新协议，为了兼容 HTTP 握手规范，在握手阶段依然使用 HTTP 协议，握手完成之后，数据通过 TCP 通道进行传输。</p><p>Websoket 数据传输是通过 frame 形式，一个消息可以分成几个片段传输。这样大数据可以分成一些小片段进行传输，不用考虑由于数据量大导致标志位不够的情况。也可以边生成数据边传递消息，提高传输效率。</p><p><strong>优点</strong>：<br>双向通信。客户端和服务端双方都可以主动发起通讯。<br>没有同源限制。客户端可以与任意服务端通信，不存在跨域问题。<br>数据量轻。第一次连接时需要携带请求头，后面数据通信都不需要带请求头，减少了请求头的负荷。<br>传输效率高。因为只需要一次连接，所以数据传输效率高。</p><p><strong>缺点</strong>：<br>长连接需要后端处理业务的代码更稳定，推送消息相对复杂；<br>长连接受网络限制比较大，需要处理好重连。<br>兼容性，WebSocket 只支持 IE10 及其以上版本。<br>服务器长期维护长连接需要一定的成本，各个浏览器支持程度不一；<br>成熟的 HTTP 生态下有大量的组件可以复用，WebSocket 则没有，遇到异常问题难以快速定位快速解决。【需要后端代码稳定，受网络限制大，兼容性差，维护成本高，生态圈小】</p></li></ol><h3 id="利用Socket建立网络连接的步骤">利用Socket建立网络连接的步骤</h3><p>建立Socket连接至少需要一对套接字，其中一个运行于客户端，称为ClientSocket ，另一个运行于服务器端，称为ServerSocket 。</p><p>套接字之间的连接过程分为三个步骤：服务器监听，客户端请求，连接确认。</p><p>1、服务器监听：服务器端套接字并不定位具体的客户端套接字，而是处于等待连接的状态，实时监控网络状态，等待客户端的连接请求。</p><p>2、客户端请求：指客户端的套接字提出连接请求，要连接的目标是服务器端的套接字。</p><p>为此，客户端的套接字必须首先描述它要连接的服务器的套接字，指出服务器端套接字的地址和端口号，然后就向服务器端套接字提出连接请求。</p><p>3、连接确认：当服务器端套接字监听到或者说接收到客户端套接字的连接请求时，就响应客户端套接字的请求，建立一个新的线程，把服务器端套接字的描述发给客户端，一旦客户端确认了此描述，双方就正式建立连接。</p><p>而服务器端套接字继续处于监听状态，继续接收其他客户端套接字的连接请求。</p><h3 id="非对称加密RSA">非对称加密RSA</h3><p>简介：</p><ol><li>对称加密算法又称现代加密算法。</li><li>非对称加密是计算机通信安全的基石，保证了加密数据不会被破解。</li><li>非对称加密算法需要两个密钥：公开密钥(publickey) 和私有密(privatekey)</li><li>公开密钥和私有密钥是一对</li></ol><p>如果用公开密钥对数据进行加密，只有用对应的私有密钥才能解密。 <br>如果用私有密钥对数据进行加密，只有用对应的公开密钥才能解密。</p><p>特点： <br>算法强度复杂，安全性依赖于算法与密钥。 <br>加密解密速度慢。</p><p>与对称加密算法的对比： <br>对称加密只有一种密钥，并且是非公开的，如果要解密就得让对方知道密钥。 <br>非对称加密有两种密钥，其中一个是公开的。</p><p>RSA应用场景： <br>由于RSA算法的加密解密速度要比对称算法速度慢很多，在实际应用中，通常采取 <br>数据本身的加密和解密使用对称加密算法(AES)。 用RSA算法加密并传输对称算法所需的密钥。</p><h3 id="HTTP1、HTTP2、HTTP3">HTTP1、HTTP2、HTTP3</h3><p>HTTP/2 相比于 HTTP/1.1，可以说是大幅度提高了网页的性能，只需要升级到该协议就可以减少很多之前需要做的性能优化工作，虽如此但HTTP/2并非完美的，HTTP/3 就是为了解决 HTTP/2 所存在的一些问题而被推出来的。</p><h3 id="HTTP1-1-的缺陷"><strong>HTTP1.1 的缺陷</strong></h3><ol><li><p>高延迟 — 队头阻塞(Head-Of-Line Blocking)</p><p><code>队头阻塞</code>是指当顺序发送的请求序列中的一个请求因为某种原因被阻塞时，在后面排队的所有请求也一并被阻塞，会导致客户端迟迟收不到数据。</p><p>针对队头阻塞的解决办法:</p><ul><li><code>将同一页面的资源分散到不同域名下，提升连接上限</code>。</li><li><code>合并小文件减少资源数</code>，使用精灵图。</li><li><code>内联(Inlining)资源</code>是另外一种防止发送很多小图请求的技巧，将图片的原始数据嵌入在CSS文件里面的URL里，减少网络请求次数。</li><li><code>减少请求数量</code>，合并文件。</li></ul></li><li><p>无状态特性 — 阻碍交互</p><p><code>无状态是指协议对于连接状态没有记忆能力</code>。纯净的 HTTP 是没有 cookie 等机制的，每一个连接都是一个新的连接。</p><p><code>Header里携带的内容过大，在一定程度上增加了传输的成本</code>。且请求响应报文里有大量字段值都是重复的。</p></li><li><p>明文传输 — 不安全性</p><p>HTTP/1.1在传输数据时，所有<code>传输的内容都是明文</code>，客户端和服务器端都无法验证对方的身份，无法保证数据的安全性。</p></li><li><p>不支持服务端推送</p></li></ol><blockquote><p>记忆口诀：队头阻塞高延迟，无状态阻交互，明文传输不安全，服务推送不支持。</p></blockquote><p><strong>HTTP 1.1 排队问题</strong></p><p>HTTP 1.1多个文件共用一个TCP，这样可以减少tcp握手，这样3个文件就不用握手9次了，不过这样请求文件需要排队，请求和返回都需要排队， 如果第一个文件响应慢，会阻塞后面的文件，这样就产生了对头的等待问题。</p><p>有的网站可能会有很多文件，浏览器处于对机器性能的考虑，它不可能让你无限制的发请求建连接，因为建立连接需要占用资源，浏览器不想把用户的网络资源都占用了，所以浏览器最多会建立6个tcp连接；如果有上百个文件可能都需要排队，http2.0正在解决这个问题。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ecdc60670194df7957ee59e1f56701f~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h3 id="SPDY-协议与-HTTP-2-简介">SPDY 协议与 HTTP/2 简介</h3><h4 id="1、HTTP-2-简介">1、HTTP/2 简介</h4><p>HTTP/2是现行HTTP协议（HTTP/1.x）的替代，但它不是重写。<strong>HTTP/2基于SPDY，专注于性能，最大的一个目标是在用户和网站间只用一个连接（connection）</strong> 。</p><h4 id="2、HTTP-2-新特性">2、HTTP/2 新特性</h4><h4 id="1、二进制传输">1、二进制传输</h4><p><code>HTTP/2传输数据量的大幅减少,主要有两个原因:以二进制方式传输和Header 压缩</code>。我们先来介绍二进制传输,HTTP/2 采用二进制格式传输数据，而非HTTP/1.x 里纯文本形式的报文 ，二进制协议解析起来更高效。<code>HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码</code>。</p><h4 id="2、Header-压缩">2、Header 压缩</h4><p>HTTP/2并没有使用传统的压缩算法，而是开发了专门的&quot;HPACK”算法，在客户端和服务器两端建立“字典”，用索引号表示重复的字符串，还采用哈夫曼编码来压缩整数和字符串，可以达到50%~90%的高压缩率。</p><h4 id="3、多路复用">3、多路复用</h4><p>在 HTTP/2 中引入了多路复用的技术。多路复用很好的解决了浏览器限制同一个域名下的请求数量的问题，同时也更容易实现全速传输。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f756ad3403bc4fe18e970c56677c796e~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><h4 id="4、Server-Push">4、Server Push</h4><p>HTTP2还在一定程度上改变了传统的“请求-应答”工作模式，服务器不再是完全被动地响应请求，也可以新建“流”主动向客户端发送消息。减少等待的延迟，这被称为&quot;<code>服务器推送</code>&quot;（ Server Push，也叫 Cache push）</p><h4 id="5、提高安全性">5、提高安全性</h4><p>出于兼容的考虑，HTTP/2延续了HTTP/1的“明文”特点，可以像以前一样使用明文传输数据，不强制使用加密通信，不过格式还是二进制，只是不需要解密。</p><p>但由于HTTPS已经是大势所趋，而且主流的浏览器Chrome、Firefox等都公开宣布只支持加密的HTTP/2，<strong>所以“事实上”的HTTP/2是加密的</strong>。也就是说，互联网上通常所能见到的HTTP/2都是使用&quot;https”协议名，跑在TLS上面。HTTP/2协议定义了两个字符串标识符：“h2&quot;表示加密的HTTP/2，“h2c”表示明文的HTTP/2。</p><h4 id="6、防止对头阻塞">6、防止对头阻塞</h4><p>http1.1如果第一个文件阻塞，第二个文件也就阻塞了。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b67bd1f793a3425d9e8a415cae9b7863~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>http2.0的解决，把3个请求打包成一个小块发送过去，即使第一个阻塞了，后面2个也可以回来；相当于3个文件同时请求，就看谁先回来谁后回来，阻塞的可能就后回来，对带宽的利用是最高的；但没有解决TCP的对头阻塞，如果TCP发过去的一个分包发丢了，他会重新发一次；http2.0的解决了大文件的阻塞。</p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77d8ae8e0de44f3aa693f0626a346d4c~tplv-k3u1fbpfcp-watermark.image?" alt="image.png"></p><p>一个分包请求3个文件，即使第一个阻塞了，第二个也能返回</p><h3 id="HTTP-2-的缺点">HTTP/2 的缺点</h3><p>虽然 HTTP/2 解决了很多之前旧版本的问题，但它还是存在一个巨大的问题，<strong>主要是底层支撑的 TCP 协议造成的</strong>。HTTP/2的缺点主要有以下几点：</p><ol><li>TCP 以及 TCP+TLS 建立连接时延时</li><li>TCP 的队头阻塞并没有彻底解决</li><li>多路复用导致服务器压力上升也容易 Timeout</li></ol><h3 id="HTTP-3-新特性">HTTP/3 新特性</h3><h4 id="1、HTTP-3简介">1、HTTP/3简介</h4><p>Google 在推SPDY的时候就搞了个基于 UDP 协议的“QUIC”协议，让HTTP跑在QUIC上而不是TCP上。而“HTTP over QUIC”就是HTTP/3，真正“完美”地解决了“队头阻塞”问题。</p><p>QUIC 虽然基于 UDP，但是在原本的基础上新增了很多功能，接下来我们重点介绍几个QUIC新功能。</p><h4 id="2、QUIC新功能">2、QUIC新功能</h4><p>QUIC基于UDP，而UDP是“无连接”的，根本就不需要“握手”和“挥手”，所以就比TCP来得快。此外QUIC也实现了可靠传输，保证数据一定能够抵达目的地。它还引入了类似HTTP/2的“流”和“多路复用”，单个“流&quot;是有序的，可能会因为丢包而阻塞，但其他“流”不会受到影响。具体来说QUIC协议有以下特点：</p><ul><li><p><strong>实现了类似TCP的流量控制、传输可靠性的功能</strong></p><p>虽然UDP不提供可靠性的传输，但QUIC在UDP的基础之上增加了一层来保证数据可靠性传输。它提供了数据包重传、拥塞控制以及其他一些TCP中存在的特性。</p></li><li><p><strong>实现了快速握手功能</strong></p><p>由于QUIC是基于UDP的，所以QUIC可以实现使用0-RTT或者1-RTT来建立连接，这意味着QUIC可以用最快的速度来发送和接收数据，这样可以大大提升首次打开页面的速度。<strong>0RTT 建连可以说是 QUIC 相比 HTTP2 最大的性能优势</strong>。</p></li><li><p><strong>集成了TLS加密功能</strong></p></li><li><p><strong>多路复用，彻底解决TCP中队头阻塞的问题</strong></p><p>和TCP不同，QUIC实现了在同一物理连接上可以有多个独立的逻辑数据流。实现了数据流的单独传输，就解决了TCP中队头阻塞的问题。</p></li><li><p><strong>连接迁移</strong></p><p>TCP 是按照 4 要素（客户端 IP、端口, 服务器 IP、端口）确定一个连接的。而 QUIC 则是让客户端生成一个 Connection ID （64 位）来区别不同连接。只要 Connection ID 不变，连接就不需要重新建立，即便是客户端的网络发生变化。由于迁移客户端继续使用相同的会话密钥来加密和解密数据包，QUIC 还提供了迁移客户端的自动加密验证。</p></li></ul><h3 id="总结">总结</h3><ul><li>HTTP/1.1有两个主要的缺点：安全不足和性能不高。</li><li>HTTP/2完全兼容HTTP/1，是“更安全的HTTP、更快的HTTPS&quot;，二进制传输、头部压缩、多路复用、服务器推送等技术可以充分利用带宽，降低延迟，从而大幅度提高上网体验；</li><li>QUIC 基于 UDP 实现，是 HTTP/3 中的底层支撑协议，该协议基于 UDP，又取了 TCP 中的精华，实现了即快又可靠的协议。</li></ul><h3 id="理解xss，csrf，ddos攻击原理以及避免方式">理解xss，csrf，ddos攻击原理以及避免方式</h3><p><code>XSS</code>(<code>Cross-Site Scripting</code>，<strong>跨站脚本攻击</strong>)是一种代码注入攻击。攻击者在目标网站上注入恶意代码，当被攻击者登陆网站时就会执行这些恶意代码，这些脚本可以读取 <code>cookie，session tokens</code>，或者其它敏感的网站信息，对用户进行钓鱼欺诈，甚至发起蠕虫攻击等。</p><p><code>CSRF</code>（<code>Cross-site request forgery</code>）<strong>跨站请求伪造</strong>：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。</p><p><strong>XSS避免方式：</strong></p><ol><li><code>url</code>参数使用<code>encodeURIComponent</code>方法转义</li><li>尽量不是有<code>InnerHtml</code>插入<code>HTML</code>内容</li><li>使用特殊符号、标签转义符。</li></ol><p><code>CSRF</code>避免方式：</p><ol><li><p>添加验证码</p></li><li><p>使用token</p><ul><li>服务端给用户生成一个token，加密后传递给用户</li><li>用户在提交请求时，需要携带这个token</li><li>服务端验证token是否正确</li></ul></li></ol><p><code>DDoS</code>又叫分布式拒绝服务，全称 <code>Distributed Denial of Service</code>，其原理就是利用大量的请求造成资源过载，导致服务不可用。</p><p><strong><code>DDos</code>避免方式：</strong></p><ol><li>限制单IP请求频率。</li><li>防火墙等防护设置禁止<code>ICMP</code>包等</li><li>检查特权端口的开放</li></ol><p><a href="https://mp.weixin.qq.com/s?__biz=MzkzNzI0MDMxNQ==&amp;mid=2247487116&amp;idx=1&amp;sn=09187eeb7e45faa1bee86ff48ae14be1&amp;source=41#wechat_redirect">360技术：嗨，送你一张Web性能优化地图</a></p>]]></content>
      
      
      <categories>
          
          <category> 面试题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Front-matter</title>
      <link href="/posts/20230302.html"/>
      <url>/posts/20230302.html</url>
      
        <content type="html"><![CDATA[<h2 id="Page-Front-matter">Page Front-matter</h2><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>updated</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>description</td><td>【可选】页面描述</td></tr><tr><td>keywords</td><td>【可选】页面关键字</td></tr><tr><td>comments</td><td>【可选】显示页面评论模块 (默认 true)</td></tr><tr><td>top_img</td><td>【可选】页面顶部图片</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开 (true/false) (默认为设置中 highlight_shrink 的配置)</td></tr></tbody></table><h2 id="Post-Front-matter">Post Front-matter</h2><table><thead><tr><th>写法</th><th>解释</th></tr></thead><tbody><tr><td>title</td><td>【必需】页面标题</td></tr><tr><td>date</td><td>【必需】页面创建日期</td></tr><tr><td>type</td><td>【必需】标签、分类和友情链接三个页面需要配置</td></tr><tr><td>tags</td><td>【【可选】文章标签</td></tr><tr><td>categories</td><td>【可选】文章分类</td></tr><tr><td>keywords</td><td>【【可选】文章关键字</td></tr><tr><td>description</td><td>【可选】文章描述</td></tr><tr><td>top_img</td><td>【可选】文章顶部图片</td></tr><tr><td>cover</td><td>【可选】文章缩略图 (如果没有设置 top_img，文章页顶部将显示缩略图，可设为 false/图片地址/留空)</td></tr><tr><td>comments</td><td>【可选】显示文章评论模块 (默认 true)</td></tr><tr><td>toc</td><td>【可选】显示文章 TOC (默认为设置中 toc 的 enable 配置)</td></tr><tr><td>toc_number</td><td>【可选】显示 toc_number (默认为设置中 toc 的 number 配置)</td></tr><tr><td>copyright</td><td>【可选】显示文章版权模块 (默认为设置中 post_copyright 的 enable 配置)</td></tr><tr><td>copyright_author</td><td>【可选】文章版权模块的文章作者</td></tr><tr><td>copyright_author_href</td><td>【可选】文章版权模块的文章作者链接</td></tr><tr><td>copyright_url</td><td>【可选】文章版权模块的文章版权链接</td></tr><tr><td>copyright_info</td><td>【可选】文章版权模块的版权声明文字</td></tr><tr><td>mathjax</td><td>【可选】显示 mathjax (当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>katex</td><td>【可选】显示 katex (当设置 katex 的 per_page: false 时，才需要配置，默认 false)</td></tr><tr><td>aplayer</td><td>【可选】在需要的页面加载 aplayer 的 js 和 css</td></tr><tr><td>highlight_shrink</td><td>【可选】配置代码框是否展开 (true/false) (默认为设置中 highlight_shrink 的配置)</td></tr><tr><td>aside</td><td>【可选】显示侧边栏 (默认 true)</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6笔记</title>
      <link href="/posts/301.html"/>
      <url>/posts/301.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>阮一峰的es6 <a href="https://es6.ruanyifeng.com/">https://es6.ruanyifeng.com/</a></p></blockquote><h2 id="ES6新特性">ES6新特性</h2><h3 id="let关键字">let关键字</h3><h4 id="特性">特性</h4><p>let关键字用来声明变量，使用 let 声明的变量有几个特点：</p><ul><li><p><strong>不允许重复声明；</strong></p></li><li><p><strong>块儿级作用域（局部变量）；</strong></p></li><li><p><strong>不存在变量提升；</strong></p></li><li><p><strong>不影响作用域链；</strong></p></li></ul><h4 id="块儿级作用域（局部变量）">块儿级作用域（局部变量）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> cat = <span class="string">&quot;猫&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat);</span><br><span class="line"><span class="comment">// 报错：Uncaught ReferenceError: cat is not defined</span></span><br></pre></td></tr></table></figure><h4 id="不存在变量提升">不存在变量提升</h4><p><strong>什么是变量提升</strong></p><p>就是 <code>在变量创建之前使用</code>（比如输出：输出的是默认值），let不存在，var存在；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3. 不存在变量提升；</span></span><br><span class="line"><span class="comment">// 什么是变量提升：就是在变量创建之前使用（比如输出：输出的是默认值），let不存</span></span><br><span class="line">在，<span class="keyword">var</span>存在；</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(people1); <span class="comment">// 可输出默认值undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(people2); <span class="comment">// 报错：Uncaught ReferenceError: people2 is not</span></span><br><span class="line">defined</span><br><span class="line"><span class="keyword">var</span> people1 = <span class="string">&quot;大哥&quot;</span>; <span class="comment">// 存在变量提升</span></span><br><span class="line"><span class="keyword">let</span> people2 = <span class="string">&quot;二哥&quot;</span>; <span class="comment">// 不存在变量提升</span></span><br></pre></td></tr></table></figure><h4 id="不影响作用域链">不影响作用域链</h4><p><strong>什么是作用域链</strong></p><p>很简单，就是代码块内有代码块，跟常规编程语言一样，<code>上级代码块中 的局部变量下级可用</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> p = <span class="string">&quot;大哥&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(p); <span class="comment">// 这里是可以使用的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">fn</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const-关键字">const 关键字</h3><h4 id="特性-2">特性</h4><p>const 关键字用来声明常量，const 声明有以下特点：</p><ul><li><strong>声明必须赋初始值；</strong></li><li><strong>标识符一般为大写（习惯）；</strong></li><li><strong>不允许重复声明；</strong></li><li><strong>值不允许修改；</strong></li><li><strong>块儿级作用域（局部变量）;</strong></li></ul><h4 id="应用场景">应用场景</h4><p>声明对象类型使用 const，非对象类型声明选择 let；</p><h3 id="变量和对象的解构赋值">变量和对象的解构赋值</h3><h4 id="什么是解构赋值">什么是解构赋值</h4><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构赋值；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、数组的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">F4</span> = [<span class="string">&quot;大哥&quot;</span>,<span class="string">&quot;二哥&quot;</span>,<span class="string">&quot;三哥&quot;</span>,<span class="string">&quot;四哥&quot;</span>];</span><br><span class="line"><span class="keyword">let</span> [a,b,c,d] = <span class="variable constant_">F4</span>;</span><br><span class="line"><span class="comment">// 这就相当于我们声明4个变量a,b,c,d，其值分别对应&quot;大哥&quot;,&quot;二哥&quot;,&quot;三哥&quot;,&quot;四哥&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a + b + c + d); <span class="comment">// 大哥二哥三哥四哥</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、对象的解构赋值</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">F3</span> = &#123;</span><br><span class="line">name : <span class="string">&quot;大哥&quot;</span>,</span><br><span class="line">age : <span class="number">22</span>,</span><br><span class="line">sex : <span class="string">&quot;男&quot;</span>,</span><br><span class="line">xiaopin : <span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="comment">// 常用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我会演小品！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name,age,sex,xiaopin&#125; = <span class="variable constant_">F3</span>; <span class="comment">// 注意解构对象这里用的是&#123;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name + age + sex + xiaopin); <span class="comment">// 大哥22男</span></span><br><span class="line"><span class="title function_">xiaopin</span>(); <span class="comment">// 此方法可以正常调用</span></span><br></pre></td></tr></table></figure><h4 id="应用场景-2">应用场景</h4><p>频繁使用对象方法、数组元素，就可以使用解构赋值形式；</p><h3 id="模板字符串">模板字符串</h3><h4 id="概述">概述</h4><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识，特点：</p><ul><li><strong>字符串中可以出现换行符；</strong></li><li><strong>可以使用 ${xxx} 形式引用变量；</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">let</span> string = <span class="string">`我也一个字符串哦！`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(string);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特性</span></span><br><span class="line"><span class="comment">// 1、字符串中可以出现换行符(可以直接换行)</span></span><br><span class="line"><span class="keyword">let</span> str =</span><br><span class="line"><span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;大哥&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;二哥&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;三哥&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;四哥&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line"><span class="comment">// 2、可以使用 $&#123;xxx&#125; 形式引用变量</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="string">&quot;大哥&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`<span class="subst">$&#123;s&#125;</span>是我最大的榜样！`</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(out);</span><br></pre></td></tr></table></figure><h3 id="简化对象和函数写法">简化对象和函数写法</h3><h4 id="概述-2">概述</h4><p>ES6 允许在大括号里面，直接写入变量和函数，作为对象的属性和方法。这样的书写更加简洁；（键名就是变量名和方法名）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量和函数</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&quot;訾博&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;活着就是为了改变世界！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建对象</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line"><span class="comment">// 完整写法</span></span><br><span class="line"><span class="comment">// name:name,</span></span><br><span class="line"><span class="comment">// change:change</span></span><br><span class="line"><span class="comment">// 简化写法</span></span><br><span class="line">name,</span><br><span class="line">change,</span><br><span class="line"><span class="comment">// 声明方法的简化</span></span><br><span class="line"><span class="title function_">say</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;言行一致！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">school.<span class="title function_">change</span>();</span><br><span class="line">school.<span class="title function_">say</span>();</span><br></pre></td></tr></table></figure><h3 id="箭头函数">箭头函数</h3><h4 id="概述-3">概述</h4><p>ES6允许使用箭头（=&gt;）定义函数，箭头函数提供了一种更加简洁的函数书写方式，箭头函数多用于匿名函数的定义；</p><h4 id="箭头函数的注意点">箭头函数的注意点</h4><ul><li><strong>如果形参只有一个，则小括号可以省略；</strong></li><li><strong>函数体如果只有一条语句，则花括号可以省略，函数的返回值为该条语句的执行结果；</strong></li><li><strong>箭头函数的this是静态的，始终指向函数声明时所在作用域下的this的值；</strong></li><li><strong>箭头函数不能作为构造函数实例化；</strong></li><li><strong>不能使用 arguments；</strong></li></ul><h4 id="代码演示及相关说明">代码演示及相关说明</h4><p>注意：箭头函数不会更改 this 指向，用来指定回调函数会非常合适；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 传统写法：无参数</span></span><br><span class="line"><span class="keyword">var</span> say = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">say</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES写法2：无参数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">speak</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello 哈哈！&quot;</span>);</span><br><span class="line"><span class="title function_">speak</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统写法：一个参数</span></span><br><span class="line"><span class="keyword">var</span> hello = <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello &quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hello</span>(<span class="string">&quot;訾博&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6箭头函数：一个参数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">hi</span> = name =&gt; <span class="string">&quot;hi &quot;</span> + name;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hi</span>(<span class="string">&quot;訾博&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传统写法：多个参数</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span>(<span class="params">a,b,c</span>)&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6箭头函数：多个参数</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">he</span> = (<span class="params">a,b,c</span>) =&gt; a + b + c;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">he</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特性</span></span><br><span class="line"><span class="comment">// 1、箭头函数的this是静态的，始终指向函数声明时所在作用域下的this的值</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">name : <span class="string">&quot;大哥&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 传统函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getName</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getName：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数</span></span><br><span class="line">getName1 = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getName1：&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">name</span> = <span class="string">&quot;訾博&quot;</span>;</span><br><span class="line"><span class="comment">// 直接调用</span></span><br><span class="line"><span class="title function_">getName</span>(); <span class="comment">// 訾博</span></span><br><span class="line"><span class="title function_">getName1</span>(); <span class="comment">// 訾博</span></span><br><span class="line"><span class="comment">// 使用call调用</span></span><br><span class="line">getName.<span class="title function_">call</span>(school); <span class="comment">// 大哥</span></span><br><span class="line">getName1.<span class="title function_">call</span>(school); <span class="comment">// 訾博</span></span><br><span class="line"><span class="comment">// 结论：箭头函数的this是静态的，始终指向函数声明时所在作用域下的this的值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2、不能作为构造实例化对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">Persion</span> = (<span class="params">name,age</span>) =&gt; &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> me = <span class="keyword">new</span> <span class="title class_">Persion</span>(<span class="string">&quot;訾博&quot;</span>,<span class="number">24</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(me);</span><br><span class="line"><span class="comment">// 报错：Uncaught TypeError: Persion is not a constructor</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3、不能使用 arguments 变量</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 报错：Uncaught ReferenceError: arguments is not defined</span></span><br></pre></td></tr></table></figure><h3 id="ES6中函数参数的默认值">ES6中函数参数的默认值</h3><h4 id="概述-4">概述</h4><p>ES允许给函数的参数赋初始值；</p><h4 id="代码示例及相关说明">代码示例及相关说明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 形参初始值 具有默认值的参数, 一般位置要靠后(潜规则)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a,b,c=<span class="number">10</span></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> result = <span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 与解构赋值结合</span></span><br><span class="line"><span class="comment">// 注意这里参数是一个对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;host=<span class="string">&quot;127.0.0.1&quot;</span>, username,password, port&#125;</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(host)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(username)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(password)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(port)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line"><span class="attr">host</span>: <span class="string">&#x27;atguigu.com&#x27;</span>,</span><br><span class="line"><span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="attr">port</span>: <span class="number">3306</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="rest参数">rest参数</h3><h4 id="概述-5">概述</h4><p>ES6 引入 rest 参数，用于获取函数的实参，用来代替 arguments；</p><p>参考文章：<a href="https://www.jianshu.com/p/50bcb376a419">https://www.jianshu.com/p/50bcb376a419</a></p><h4 id="代码示例及相关说明-2">代码示例及相关说明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5获取实参的方式</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">data</span>(<span class="string">&quot;大哥&quot;</span>,<span class="string">&quot;二哥&quot;</span>,<span class="string">&quot;三哥&quot;</span>,<span class="string">&quot;四哥&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的rest参数...args，rest参数必须放在最后面</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">data</span>(<span class="params">...args</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(args); <span class="comment">// fliter some every map</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">data</span>(<span class="string">&quot;大哥&quot;</span>,<span class="string">&quot;二哥&quot;</span>,<span class="string">&quot;三哥&quot;</span>,<span class="string">&quot;四哥&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="扩展运算符">扩展运算符</h3><h4 id="介绍">介绍</h4><p><code>...</code> 扩展运算符能将数组转换为逗号分隔的参数序列；</p><p>扩展运算符（spread）也是三个点（…）。</p><p>它好比 rest 参数的逆运算，将一个数组转为用逗号分隔的参数序列，对数组进行解包；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明一个数组 ...</span></span><br><span class="line"><span class="keyword">const</span> ls = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="comment">// 声明一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">demo</span>(...ls); <span class="comment">// demo(&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;)</span></span><br></pre></td></tr></table></figure><h3 id="Symbol">Symbol</h3><h4 id="Symbol-概述">Symbol 概述</h4><p>ES6 引入了一种新的原始数据类型 Symbol，表示独一无二的值。</p><p>它是JavaScript 语言的第七种数据类型，是一种类似于字符串的数据类型；</p><p>参考文章：<a href="https://blog.csdn.net/fesfsefgs/article/details/108354248">https://blog.csdn.net/fesfsefgs/article/details/108354248</a></p><h4 id="Symbol-特点">Symbol 特点</h4><ul><li>Symbol 的值是唯一的，用来解决命名冲突的问题；</li><li>Symbol 值不能与其他数据进行运算；</li><li>Symbol 定义的对象属性不能使用for…in循环遍历 ，但是可以使用Reflect.ownKeys 来获取对象的所有键名;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="comment">// console.log(s, typeof s);</span></span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2==s3); <span class="comment">// false</span></span><br><span class="line"><span class="comment">//Symbol.for 创建</span></span><br><span class="line"><span class="keyword">let</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;111&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4==s5); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//不能与其他数据进行运算</span></span><br><span class="line"><span class="keyword">let</span> result = s + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> result = s &gt; <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> result = s + s;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据类型</span></span><br><span class="line"><span class="comment">// u undefined</span></span><br><span class="line"><span class="comment">// s string symbol</span></span><br><span class="line"><span class="comment">// o object</span></span><br><span class="line"><span class="comment">// n null number</span></span><br><span class="line"><span class="comment">// b boolean</span></span><br></pre></td></tr></table></figure><h4 id="Symbol创建对象属性">Symbol创建对象属性</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向对象中添加方法 up down</span></span><br><span class="line"><span class="keyword">let</span> game = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;俄罗斯方块&#x27;</span>,</span><br><span class="line"><span class="attr">up</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line"><span class="attr">down</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 我们要往game对象里面添加方法，但是怕game对象已经存在同名方法，所以我们这时使用到了Symbol</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="comment">// 声明一个对象</span></span><br><span class="line"><span class="keyword">let</span> methods = &#123;</span><br><span class="line"><span class="attr">up</span>: <span class="title class_">Symbol</span>(),</span><br><span class="line"><span class="attr">down</span>: <span class="title class_">Symbol</span>()</span><br><span class="line">&#125;;</span><br><span class="line">game[methods.<span class="property">up</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以改变形状&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">game[methods.<span class="property">down</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以快速下降!!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(game);</span><br><span class="line">game[methods.<span class="property">up</span>](); <span class="comment">// 调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;狼人杀&quot;</span>,</span><br><span class="line">[<span class="title class_">Symbol</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以发言&quot;</span>)</span><br><span class="line">&#125;,</span><br><span class="line">[<span class="title class_">Symbol</span>(<span class="string">&#x27;zibao&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以自爆&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(youxi);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 因为Symbol(&#x27;xxx&#x27;)生成的标识是唯一的，所以定义在youxi里面的[Symbol(&#x27;say&#x27;)]是无法调用的，而解决方案如</span></span><br><span class="line"><span class="keyword">let</span> youxi = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;狼人杀&quot;</span>,</span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;say&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以发言&quot;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;zibao&#x27;</span>)]: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;我可以自爆&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">youxi[<span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&#x27;say&#x27;</span>)]();</span><br><span class="line"><span class="comment">// 因为Symbol.for(&#x27;xxx&#x27;)生成的标识不是唯一的，所以定义在youxi里面的[Symbol.for(&#x27;say&#x27;)]是可以调用的</span></span><br></pre></td></tr></table></figure><h4 id="Symbol内置值">Symbol内置值</h4><h4 id="概述-6">概述</h4><p>除了定义自己使用的 Symbol 值以外，ES6 还提供了 11 个内置的 Symbol 值，指向语言内部使用的方 法。可以称这些方法为魔术方法，因为它们会在特定的场景下自动执行；</p><table><thead><tr><th>内置Symbol的值</th><th>调用时机</th></tr></thead><tbody><tr><td>Symbol.hasInstance</td><td>当其他对象使用 instanceof 运算符，判断是否为该对象的实例时，会调用这个方法</td></tr><tr><td>Symbol.isConcatSpreadable</td><td>对象的 Symbol.isConcatSpreadable 属性等于的是一个布尔值，表示该对象用于 Array.prototype.concat()时，是否可以展开。</td></tr><tr><td>Symbol.species</td><td>创建衍生对象时，会使用该属性</td></tr><tr><td>Symbol.match</td><td>当执行 str.match(myObject) 时，如果该属性存在，会调用它，返回该方法的返回值。</td></tr><tr><td>Symbol.replace</td><td>当该对象被 str.replace(myObject)方法调用时，会返回该方法的返回值。</td></tr><tr><td>Symbol.search</td><td>当该对象被 str. search (myObject)方法调用时，会返回该方法的返回值。</td></tr><tr><td>Symbol.split</td><td>当该对象被 str. split (myObject)方法调用时，会返回该方法的返回值。</td></tr><tr><td>Symbol.iterator</td><td>对象进行 for…of 循环时，会调用 Symbol.iterator 方法，返回该对象的默认遍历器</td></tr><tr><td>Symbol.toPrimitive</td><td>该对象被转为原始类型的值时，会调用这个方法，返回该对象对应的原始类型值。</td></tr><tr><td>Symbol. toStringTag</td><td>在该对象上面调用 toString 方法时，返回该方法的返回值</td></tr><tr><td>Symbol. unscopables</td><td>该对象指定了使用 with 关键字时，哪些属性会被 with环境排除。</td></tr></tbody></table><p><strong>特别的： Symbol内置值的使用，都是作为某个对象类型的属性去使用；</strong></p><h4 id="演示">演示</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="keyword">static</span> [<span class="title class_">Symbol</span>.<span class="property">hasInstance</span>](param)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(param);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我被用来检测类型了&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> o = &#123;&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o <span class="keyword">instanceof</span> <span class="title class_">Person</span>);</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"><span class="comment">// 合并数组：false数组不可展开，true可展开</span></span><br><span class="line">arr2[<span class="title class_">Symbol</span>.<span class="property">isConcatSpreadable</span>] = <span class="literal">false</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">concat</span>(arr2));</span><br></pre></td></tr></table></figure><h3 id="迭代器">迭代器</h3><h4 id="概述-7">概述</h4><p>遍历器（Iterator）就是一种机制。它是一种接口，为各种不同的数据结构提供统一的访问机制。任何数 据结构只要部署 Iterator 接口，就可以完成遍历操作；</p><h4 id="特性-3">特性</h4><p>ES6 创造了一种新的遍历命令 for…of 循环，Iterator 接口主要供 for…of 消费；</p><p>原生具备 iterator 接口的数据(可用 for of 遍历)：</p><ul><li>Array；</li><li>Arguments；</li><li>Set；</li><li>Map；</li><li>String；</li><li>TypedArray；</li><li>NodeList；</li></ul><h4 id="工作原理">工作原理</h4><ul><li>创建一个指针对象，指向当前数据结构的起始位置；</li><li>第一次调用对象的 next 方法，指针自动指向数据结构的第一个成员；</li><li>接下来不断调用 next 方法，指针一直往后移动，直到指向最后一个成员；</li><li>每调用 next 方法返回一个包含 value 和 done 属性的对象；</li><li><strong>注：需要自定义遍历数据的时候，要想到迭代器；</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个数组</span></span><br><span class="line"><span class="keyword">const</span> xiyou = [<span class="string">&#x27;唐僧&#x27;</span>, <span class="string">&#x27;孙悟空&#x27;</span>, <span class="string">&#x27;猪八戒&#x27;</span>, <span class="string">&#x27;沙僧&#x27;</span>];</span><br><span class="line"><span class="comment">// 使用 for...of 遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> xiyou)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> iterator = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="comment">// 调用对象的next方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="comment">// 重新初始化对象，指针也会重新回到最前面</span></span><br><span class="line"><span class="keyword">let</span> iterator1 = xiyou[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator1.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure><h4 id="迭代器自定义遍历对象">迭代器自定义遍历对象</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明一个对象</span></span><br><span class="line"><span class="keyword">const</span> banji = &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;终极一班&quot;</span>,</span><br><span class="line">        <span class="attr">stus</span>: [</span><br><span class="line">            <span class="string">&#x27;xiaoming&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;xiaoning&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;xiaotian&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;knight&#x27;</span></span><br><span class="line">        ],</span><br><span class="line">        [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">            <span class="comment">// 索引变量</span></span><br><span class="line">            <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 保存this</span></span><br><span class="line">            <span class="keyword">let</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (index &lt; _this.<span class="property">stus</span>.<span class="property">length</span>) &#123;</span><br><span class="line">                        <span class="keyword">const</span> result = &#123;</span><br><span class="line">                            <span class="attr">value</span>: _this.<span class="property">stus</span>[index],</span><br><span class="line">                            <span class="attr">done</span>: <span class="literal">false</span></span><br><span class="line">                        &#125;;</span><br><span class="line">                        <span class="comment">// 下标自增</span></span><br><span class="line">                        index++;</span><br><span class="line">                        <span class="comment">// 返回结果</span></span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> &#123;</span><br><span class="line">                            <span class="attr">value</span>: <span class="literal">undefined</span>,</span><br><span class="line">                            <span class="attr">done</span>: <span class="literal">true</span></span><br><span class="line">                        &#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历这个对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> banji) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成器">生成器</h3><h4 id="概述-8">概述</h4><p>生成器函数是 ES6 提供的一种异步编程解决方案，语法行为与传统函数完全不同；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 生成器其实就是一个特殊的函数</span></span><br><span class="line"><span class="comment">// 异步编程 纯回调函数 node fs ajax mongodb</span></span><br><span class="line"><span class="comment">// yield：函数代码的分隔符</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;一只没有耳朵&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;一只没有尾部&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&#x27;真奇怪&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">444</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;遍历：&quot;</span>);</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> <span class="title function_">gen</span>()) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生成器函数的参数传递">生成器函数的参数传递</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arg);</span><br><span class="line">    <span class="keyword">let</span> one = <span class="keyword">yield</span> <span class="number">111</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(one);</span><br><span class="line">    <span class="keyword">let</span> two = <span class="keyword">yield</span> <span class="number">222</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(two);</span><br><span class="line">    <span class="keyword">let</span> three = <span class="keyword">yield</span> <span class="number">333</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(three);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>(<span class="string">&quot;AAA&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// 会执行yield 111;</span></span><br><span class="line"><span class="comment">// next()方法是可以传入参数的，传入的参数作为第一条(上一条)语句yield 111的返回结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;BBB&quot;</span>)); <span class="comment">// 会执行yield 222;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;CCC&quot;</span>)); <span class="comment">// 会执行yield 333;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;DDD&quot;</span>)); <span class="comment">// 继续往后走，未定义;</span></span><br></pre></td></tr></table></figure><h4 id="个人理解（生成器）">个人理解（生成器）</h4><p>上面代码执行过程</p><blockquote><p><code>let iterator = gen(&quot;AAA&quot;);</code> 定义一个迭代器iterator，并传参<strong>AAA</strong>给<strong>args</strong></p><p>第一个next()执行log(args)和打印111，然后进入<strong>等待</strong></p><p>第二个next(‘BBB’)传参给one，然后往下执行。</p></blockquote><ul><li><p>生成器中如果有n个 <code>yield</code> ，就需要n+1个 <code>next()</code></p></li><li><p>每个next()作用区域是上一个 yield 前面 到 下一个 yield 后面</p></li><li><p>没有执行完时会进入等待，直到next()出现</p></li></ul><h4 id="生成器实例">生成器实例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步编程 文件操作 网络操作（ajax，request） 数据库操作</span></span><br><span class="line"><span class="comment">// 需求：1s后控制台输出111 再过1s后控制台输出222 再过1s后控制台输出333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一种做法：回调地狱</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种做法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">111</span>);</span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">222</span>);</span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">333</span>);</span><br><span class="line">        iterator.<span class="title function_">next</span>();</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line">        <span class="keyword">yield</span> <span class="title function_">two</span>();</span><br><span class="line">        <span class="keyword">yield</span> <span class="title function_">three</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 调用生成器函数</span></span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><h4 id="实例2">实例2</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟获取: 用户数据 订单数据 商品数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&quot;用户数据&quot;</span>;</span><br><span class="line">        <span class="comment">// 第二次调用next，传入参数，作为第一个的返回值</span></span><br><span class="line">        iterator.<span class="title function_">next</span>(data); <span class="comment">// 这里将data传入</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getOrders</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&quot;订单数据&quot;</span>;</span><br><span class="line">        iterator.<span class="title function_">next</span>(data); <span class="comment">// 这里将data传入</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGoods</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> data = <span class="string">&quot;商品数据&quot;</span>;</span><br><span class="line">        iterator.<span class="title function_">next</span>(data); <span class="comment">// 这里将data传入</span></span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">gen</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> users = <span class="keyword">yield</span> <span class="title function_">getUsers</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(users);</span><br><span class="line">    <span class="keyword">let</span> orders = <span class="keyword">yield</span> <span class="title function_">getOrders</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(orders);</span><br><span class="line">    <span class="keyword">let</span> goods = <span class="keyword">yield</span> <span class="title function_">getGoods</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(goods); <span class="comment">// 这种操作有点秀啊！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><h3 id="Promise">Promise</h3><h4 id="概述-9">概述</h4><p>Promise 是 ES6 引入的异步编程的新解决方案。语法上 Promise 是一个构造函数，用来封装异步操作 并可以获取其成功或失败的结果；</p><ul><li>Promise 构造函数: Promise (excutor) {}；</li><li>Promise.prototype.then 方法；</li><li>Promise.prototype.catch 方法；</li></ul><h4 id="基本使用">基本使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实例化 Promise 对象</span></span><br><span class="line"><span class="comment">// Promise 对象三种状态：初始化、成功、失败</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 成功</span></span><br><span class="line">        <span class="comment">// let data = &quot;数据&quot;;</span></span><br><span class="line">        <span class="comment">// 调用resolve，这个Promise 对象的状态就会变成成功</span></span><br><span class="line">        <span class="comment">// resolve(data);</span></span><br><span class="line">        <span class="comment">// 失败</span></span><br><span class="line">        <span class="keyword">let</span> err = <span class="string">&quot;失败了！&quot;</span>;</span><br><span class="line">        <span class="title function_">reject</span>(err);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 成功</span></span><br><span class="line"><span class="comment">// 调用 Promise 对象的then方法，两个参数为函数</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123; <span class="comment">// 成功</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">season</span>) &#123; <span class="comment">// 失败</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(season);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Promise封装读取文件">Promise封装读取文件</h4><h5 id="一般写法">一般写法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 2、调用方法，读取文件</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/text.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果失败则抛出错误</span></span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="comment">// 如果没有出错，则输出内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="title function_">toString</span>());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="promise封装">promise封装</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 使用Promise封装</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, data</span>) &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/text.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 判断如果失败</span></span><br><span class="line">        <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">        <span class="comment">// 如果成功</span></span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// 读取失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Promise封装Ajax请求">Promise封装Ajax请求</h4><h5 id="原生请求">原生请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求地址：https://api.apiopen.top/getJoke</span></span><br><span class="line"><span class="comment">// 原生请求</span></span><br><span class="line"><span class="comment">// 1、创建对象</span></span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line"><span class="comment">// 2、初始化</span></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line"><span class="comment">// 3、发送</span></span><br><span class="line">xhr.<span class="title function_">send</span>();</span><br><span class="line"><span class="comment">// 4、绑定事件，处理响应结果</span></span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 判断状态</span></span><br><span class="line">    <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断响应状态码 200-299</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt;= <span class="number">299</span>) &#123;</span><br><span class="line">            <span class="comment">// 成功</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(xhr.<span class="property">response</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 失败</span></span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(xhr.<span class="property">status</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="promise封装请求">promise封装请求</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 请求地址：https://api.apiopen.top/getJoke</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve, reason</span>) &#123;</span><br><span class="line">    <span class="comment">// 原生请求</span></span><br><span class="line">    <span class="comment">// 1、创建对象</span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">    <span class="comment">// 2、初始化</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line">    <span class="comment">// 3、发送</span></span><br><span class="line">    xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">// 4、绑定事件，处理响应结果</span></span><br><span class="line">    xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 判断状态</span></span><br><span class="line">        <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断响应状态码 200-299</span></span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt;= <span class="number">299</span>) &#123;</span><br><span class="line">                <span class="comment">// 成功</span></span><br><span class="line">                <span class="title function_">resolve</span>(xhr.<span class="property">response</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 失败</span></span><br><span class="line">                <span class="title function_">reason</span>(xhr.<span class="property">status</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">p.<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">toString</span>());</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">reason</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(reason); <span class="comment">// 读取失败</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Promise-prototype-then">Promise.prototype.then</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建 Promise 对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;用户数据&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 调用then方法，then方法的返回结果是promise对象，</span></span><br><span class="line"><span class="comment">// 对象的状态有回调函数的结果决定;</span></span><br><span class="line"><span class="keyword">const</span> result = p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">    <span class="comment">// 1、如果回调函数中返回的结果是 非promise 类型的数据，</span></span><br><span class="line">    <span class="comment">// 状态为成功，返回值为对象的成功值resolved</span></span><br><span class="line">    <span class="comment">// [[PromiseStatus]]:&quot;resolved&quot;</span></span><br><span class="line">    <span class="comment">// [[PromiseValue]]:123</span></span><br><span class="line">    <span class="comment">// return 123;</span></span><br><span class="line">    <span class="comment">// 2、如果...是promise类型的数据</span></span><br><span class="line">    <span class="comment">// 此Promise对象的状态决定上面Promise对象p的状态</span></span><br><span class="line">    <span class="comment">// return new Promise((resolve,reject)=&gt;&#123;</span></span><br><span class="line">    <span class="comment">// // resolve(&quot;ok&quot;); // resolved</span></span><br><span class="line">    <span class="comment">// reject(&quot;ok&quot;); // rejected</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">    <span class="comment">// 3、抛出错误</span></span><br><span class="line">    <span class="comment">// throw new Error(&quot;失败啦！&quot;);</span></span><br><span class="line">    <span class="comment">// 状态：rejected</span></span><br><span class="line">    <span class="comment">// value：失败啦！</span></span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(reason);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 链式调用</span></span><br><span class="line"><span class="comment">// then里面两个函数参数，可以只写一个</span></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure><h4 id="Promise实践练习">Promise实践练习</h4><p><strong>“回调地狱”方式写法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 2、调用方法，读取文件</span></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/text.txt&quot;</span>, <span class="function">(<span class="params">err, data1</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/test1.txt&quot;</span>, <span class="function">(<span class="params">err, data2</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/test2.txt&quot;</span>, <span class="function">(<span class="params">err, data3</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> result = data1 + data2 + data3;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>promise实现</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、引入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 3、使用Promise实现</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/text.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(data);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/test1.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">resolve</span>([value, data]);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;resources/test2.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 存入数组</span></span><br><span class="line">            <span class="comment">// value.push(data);</span></span><br><span class="line">            <span class="title function_">resolve</span>(...value，data);<span class="comment">// 用到扩展运算符展开数组</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value.<span class="title function_">join</span>(<span class="string">&quot;\r\n&quot;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="Promise对象catch方法">Promise对象catch方法</h4><p>捕获错误</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise对象catch方法</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 设置p对象的状态为失败，并设置失败的值</span></span><br><span class="line">            <span class="title function_">reject</span>(<span class="string">&quot;失败啦~！&quot;</span>);</span><br><span class="line">        &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// p.then(value=&gt;&#123;</span></span><br><span class="line">    <span class="comment">// console.log(value);</span></span><br><span class="line">    <span class="comment">// &#125;,reason=&gt;&#123;</span></span><br><span class="line">    <span class="comment">// console.warn(reason);</span></span><br><span class="line">    <span class="comment">// &#125;);</span></span><br><span class="line">p.<span class="title function_">catch</span>(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="扩展知识">扩展知识</h4><p><strong>promise有三个状态：</strong></p><ul><li><code>pending</code> [待定]初始状态</li><li><code>fulfilled</code> [实现]操作成功</li><li><code>rejected</code> [被否决]操作失败</li></ul><blockquote><p>当promise状态发生改变，就会触发then()里的响应函数处理后续步骤；<br>promise状态一经改变，不会再变。</p></blockquote><blockquote><p>Promise对象的状态改变，只有两种可能：<br>从pending变为fulfilled<br>从pending变为rejected。</p></blockquote><h3 id="Set集合">Set集合</h3><h4 id="概述-10">概述</h4><p>ES6 提供了新的数据结构 Set（集合）。<strong>它类似于数组，但成员的值都是唯一的</strong>，集合实现了 iterator 接口，所以可以使用『扩展运算符』和『for…of…』进行遍历，集合的属性和方法：</p><ul><li>size 返回集合的元素个数；</li><li>add 增加一个新元素，返回当前集合；</li><li>delete 删除元素，返回 boolean 值；</li><li>has 检测集合中是否包含某个元素，返回 boolean 值；</li><li>clear 清空集合，返回 undefined；</li></ul><h4 id="基本使用-2">基本使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set集合</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s,<span class="keyword">typeof</span> s);</span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;大哥&quot;</span>,<span class="string">&quot;二哥&quot;</span>,<span class="string">&quot;三哥&quot;</span>,<span class="string">&quot;四哥&quot;</span>,<span class="string">&quot;三哥&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1); <span class="comment">// 自动去重</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. size 返回集合的元素个数；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">size</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. add 增加一个新元素，返回当前集合；</span></span><br><span class="line">s1.<span class="title function_">add</span>(<span class="string">&quot;大姐&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. delete 删除元素，返回 boolean 值；</span></span><br><span class="line"><span class="keyword">let</span> result = s1.<span class="title function_">delete</span>(<span class="string">&quot;三哥&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. has 检测集合中是否包含某个元素，返回 boolean 值；</span></span><br><span class="line"><span class="keyword">let</span> r1 = s1.<span class="title function_">has</span>(<span class="string">&quot;二姐&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. clear 清空集合，返回 undefined；</span></span><br><span class="line">s1.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br></pre></td></tr></table></figure><h4 id="Set集合实践">Set集合实践</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Set集合实践</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 交集</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> result = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 并集</span></span><br><span class="line"><span class="comment">// ... 为扩展运算符，将数组转化为逗号分隔的序列</span></span><br><span class="line"><span class="keyword">let</span> union = [...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr, ...arr2])];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(union);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 差集：比如集合1和集合2求差集，就是1里面有的，2里面没的</span></span><br><span class="line"><span class="keyword">let</span> result1 = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> !(<span class="keyword">new</span> <span class="title class_">Set</span>(arr2).<span class="title function_">has</span>(item)));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1)</span><br></pre></td></tr></table></figure><h4 id="总结">总结</h4><p>和python的集合类似</p><h3 id="Map集合">Map集合</h3><h4 id="概述-11">概述</h4><p>ES6 提供了 Map 数据结构。它类似于对象，也是键值对的集合。但是“键”的范围不限于字符串，<strong>各种类型的值（包括对象）都可以当作键</strong>。Map 也实现了iterator 接口，所以可以使用『扩展运算符』和 『for…of…』进行遍历；</p><h4 id="Map-的属性和方法">Map 的属性和方法</h4><ul><li>size 返回 Map 的元素个数；</li><li>set 增加一个新元素，返回当前 Map；</li><li>get 返回键名对象的键值；</li><li>has 检测 Map 中是否包含某个元素，返回 boolean 值；</li><li>clear 清空集合，返回 undefined；</li></ul><h4 id="简单使用">简单使用</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Map集合</span></span><br><span class="line"><span class="comment">// 创建一个空 map</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个非空 map</span></span><br><span class="line"><span class="keyword">let</span> m2 = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;111&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;slogon&#x27;</span>, <span class="string">&#x27;222222222&#x27;</span>]</span><br><span class="line">]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. size 返回 Map 的元素个数；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m2.<span class="property">size</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. set 增加一个新元素，返回当前 Map；</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;皇帝&quot;</span>, <span class="string">&quot;大哥&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;丞相&quot;</span>, <span class="string">&quot;二哥&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. get 返回键名对象的键值；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">get</span>(<span class="string">&quot;皇帝&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. has 检测 Map 中是否包含某个元素，返回 boolean 值；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="title function_">has</span>(<span class="string">&quot;皇帝&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. clear 清空集合，返回 undefined；</span></span><br><span class="line">m.<span class="title function_">clear</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br></pre></td></tr></table></figure><h3 id="class类">class类</h3><h4 id="概述-12">概述</h4><p>ES6 提供了更接近传统语言的写法，引入了 Class（类）这个概念，作为对象的模板。通过 class 关键字，可以定义类。</p><p>基本上，ES6 的 class 可以看作只是一个语法糖，它的绝大部分功能，ES5 都可以做 到，<strong>新的 class 写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已</strong>；</p><h4 id="知识点">知识点</h4><ol><li>class 声明类；</li><li>constructor 定义构造函数初始化；</li><li>extends 继承父类；</li><li>super 调用父级构造方法；</li><li>static 定义静态方法和属性；</li><li>父类方法可以重写；</li></ol><h4 id="class初体验">class初体验</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 手机 ES5写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 添加方法</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话！&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">HuaWei</span> = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;华为&quot;</span>, <span class="number">5999</span>);</span><br><span class="line"><span class="title class_">HuaWei</span>.<span class="title function_">call</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">HuaWei</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">// 构造方法，名字是固定的</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 打电话，方法必须使用该方式写</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="title class_">HuaWei</span> = <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;华为&quot;</span>, <span class="number">5999</span>);</span><br><span class="line"><span class="title class_">HuaWei</span>.<span class="title function_">call</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">HuaWei</span>);</span><br></pre></td></tr></table></figure><h4 id="class静态成员">class静态成员</h4><p>实例对象和构造函数（类）的属性不相通</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class静态成员</span></span><br><span class="line"><span class="comment">// ES5写法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">name</span> = <span class="string">&quot;手机&quot;</span>;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property">change</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以改变世界！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">name</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// nokia.change();</span></span><br><span class="line"><span class="comment">// 报错：Uncaught TypeError: nokia.change is not a function</span></span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">color</span> = <span class="string">&quot;黑色&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">color</span>); <span class="comment">// 黑色</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Phone</span>.<span class="property">name</span>);</span><br><span class="line"><span class="title class_">Phone</span>.<span class="title function_">change</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：实例对象和函数对象的属性是不相通的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6写法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="comment">// 静态属性</span></span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&quot;手机&quot;</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">change</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以改变世界！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> nokia = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nokia.<span class="property">name</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Phone</span>.<span class="property">name</span>);</span><br><span class="line"><span class="title class_">Phone</span>.<span class="title function_">change</span>();</span><br></pre></td></tr></table></figure><h4 id="ES5-构造函数实现继承">ES5 构造函数实现继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5构造函数继承</span></span><br><span class="line"><span class="comment">// 手机</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Phone</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Phone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">call</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 智能手机</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SmartPhone</span>(<span class="params">brand, price, color, size</span>) &#123;</span><br><span class="line">    <span class="title class_">Phone</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, brand, price);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置子级构造函数的原型</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Phone</span>;</span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SmartPhone</span>;</span><br><span class="line"><span class="comment">// 声明子类的方法</span></span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">photo</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以拍照！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SmartPhone</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">game</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以玩游戏！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&quot;锤子&quot;</span>, <span class="number">2499</span>, <span class="string">&quot;黑色&quot;</span>, <span class="string">&quot;5.5inch&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chuizi);</span><br><span class="line">chuizi.<span class="title function_">call</span>();</span><br><span class="line">chuizi.<span class="title function_">photo</span>();</span><br><span class="line">chuizi.<span class="title function_">game</span>();</span><br></pre></td></tr></table></figure><h4 id="ES6-class类继承">ES6 class类继承</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6class类继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(brand, price); <span class="comment">// 调用父类构造函数</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">photo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以拍照！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">game</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以玩游戏！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&quot;小米&quot;</span>, <span class="number">1999</span>, <span class="string">&quot;黑色&quot;</span>, <span class="string">&quot;5.15inch&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chuizi);</span><br><span class="line">chuizi.<span class="title function_">call</span>();</span><br><span class="line">chuizi.<span class="title function_">photo</span>();</span><br><span class="line">chuizi.<span class="title function_">game</span>();</span><br></pre></td></tr></table></figure><h4 id="子类对父类方法重写">子类对父类方法重写</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6class类继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">brand</span> = brand;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">price</span> = price;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以打电话！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SmartPhone</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Phone</span> &#123;</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">brand, price, color, size</span>) &#123;</span><br><span class="line">            <span class="variable language_">super</span>(brand, price); <span class="comment">// 调用父类构造函数</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">size</span> = size;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 子类对父类方法重写</span></span><br><span class="line">        <span class="comment">// 直接写，直接覆盖</span></span><br><span class="line">        <span class="comment">// 注意：子类无法调用父类同名方法</span></span><br><span class="line">    <span class="title function_">call</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以进行视频通话！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">photo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以拍照！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">game</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;我可以玩游戏！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> chuizi = <span class="keyword">new</span> <span class="title class_">SmartPhone</span>(<span class="string">&quot;小米&quot;</span>, <span class="number">1999</span>, <span class="string">&quot;黑色&quot;</span>, <span class="string">&quot;5.15inch&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(chuizi);</span><br><span class="line">chuizi.<span class="title function_">call</span>();</span><br><span class="line">chuizi.<span class="title function_">photo</span>();</span><br><span class="line">chuizi.<span class="title function_">game</span>();</span><br></pre></td></tr></table></figure><h4 id="class中的getter和setter设置">class中的getter和setter设置</h4><p>类似于监控事件，调用和修改的时候执行对应函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// class中的getter和setter设置</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">price</span>() &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;价格属性被读取了！&quot;</span>);</span><br><span class="line">        <span class="comment">// 返回值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">price</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;价格属性被修改了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化对象</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Phone</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">price</span>); <span class="comment">// 返回值</span></span><br><span class="line">s.<span class="property">price</span> = <span class="number">2999</span>;</span><br></pre></td></tr></table></figure><h3 id="数值扩展">数值扩展</h3><h4 id="Number-EPSILON">Number.EPSILON</h4><p>Number.EPSILON 是 JavaScript 表示的最小精度；</p><p>EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16；</p><h4 id="二进制和八进制">二进制和八进制</h4><p>ES6 提供了二进制和八进制数值的新的写法，分别用前缀 0b 和 0o 表示；</p><h4 id="Number-isFinite-与-Number-isNaN">Number.isFinite() 与 Number.isNaN()</h4><p>Number.isFinite() 用来检查一个数值是否为有限的；</p><p>Number.isNaN() 用来检查一个值是否为 NaN；</p><h4 id="Number-parseInt-与-Number-parseFloat">Number.parseInt() 与 Number.parseFloat()</h4><p>ES6 将全局方法 parseInt 和 parseFloat，移植到 Number 对象上面，使用不变；</p><h4 id="Math-trunc">Math.trunc</h4><p>用于去除一个数的小数部分，返回整数部分；</p><h4 id="Number-isInteger">Number.isInteger</h4><p>Number.isInteger() 用来判断一个数值是否为整数；</p><h4 id="代码实现和相关说明">代码实现和相关说明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数值扩展</span></span><br><span class="line"><span class="comment">// 0. Number.EPSILON 是 JavaScript 表示的最小精度</span></span><br><span class="line"><span class="comment">// EPSILON 属性的值接近于 2.2204460492503130808472633361816E-16</span></span><br><span class="line"><span class="comment">// function equal(a, b)&#123;</span></span><br><span class="line"><span class="comment">// return Math.abs(a-b) &lt; Number.EPSILON;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;0、Number.EPSILON 是 JavaScript 表示的最小精度&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数简化写法</span></span><br><span class="line">equal = <span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="title class_">Math</span>.<span class="title function_">abs</span>(a - b) &lt; <span class="title class_">Number</span>.<span class="property">EPSILON</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span> + <span class="number">0.2</span> === <span class="number">0.3</span>); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">equal</span>(<span class="number">0.1</span> + <span class="number">0.2</span>, <span class="number">0.3</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 二进制和八进制</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1、二进制和八进制&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> o = <span class="number">0o777</span>;</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">0xff</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Number.isFinite 检测一个数值是否为有限数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2、Number.isFinite 检测一个数值是否为有限数&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">100</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="number">100</span> / <span class="number">0</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isFinite</span>(<span class="title class_">Infinity</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. Number.isNaN 检测一个数值是否为 NaN</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3. Number.isNaN 检测一个数值是否为 NaN&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">isNaN</span>(<span class="number">123</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. Number.parseInt Number.parseFloat字符串转整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4. Number.parseInt Number.parseFloat字符串转整数&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseInt</span>(<span class="string">&#x27;5211314love&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(<span class="string">&#x27;3.1415926神奇&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. Number.isInteger 判断一个数是否为整数</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5. Number.isInteger 判断一个数是否为整数&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">5</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="title function_">isInteger</span>(<span class="number">2.5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 6. Math.trunc 将数字的小数部分抹掉</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;6. Math.trunc 将数字的小数部分抹掉 &quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">trunc</span>(<span class="number">3.5</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 7. Math.sign 判断一个数到底为正数 负数 还是零</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;7. Math.sign 判断一个数到底为正数 负数 还是零&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">100</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(<span class="number">0</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">sign</span>(-<span class="number">20000</span>));</span><br></pre></td></tr></table></figure><h3 id="对象扩展">对象扩展</h3><h4 id="概述-13">概述</h4><p>ES6 新增了一些 Object 对象的方法：</p><ul><li><a href="http://Object.is">Object.is</a> 比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN）；</li><li>Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象；</li><li><strong>proto</strong>、setPrototypeOf、 setPrototypeOf 可以直接设置对象的原型；</li></ul><h4 id="代码实现及相关说明">代码实现及相关说明</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象扩展</span></span><br><span class="line"><span class="comment">// 1. Object.is 比较两个值是否严格相等，与『===』行为基本一致（+0 与 NaN）；</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">120</span>, <span class="number">120</span>)); <span class="comment">// ===</span></span><br><span class="line"><span class="comment">// 注意下面的区别</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="title class_">NaN</span>, <span class="title class_">NaN</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">NaN</span> === <span class="title class_">NaN</span>); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// NaN与任何数值做===比较都是false，跟他自己也如此！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. Object.assign 对象的合并，将源对象的所有可枚举属性，复制到目标对象；</span></span><br><span class="line"><span class="keyword">const</span> config1 = &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;localhost&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    <span class="attr">test</span>: <span class="string">&quot;test&quot;</span> <span class="comment">// 唯一存在</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> config2 = &#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&quot;http://zibo.com&quot;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">300300600</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;root4444&quot;</span>,</span><br><span class="line">    <span class="attr">pass</span>: <span class="string">&quot;root4444&quot;</span>,</span><br><span class="line">    <span class="attr">test2</span>: <span class="string">&quot;test2&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 如果前边有后边没有会添加，如果前后都有，后面的会覆盖前面的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">assign</span>(config1, config2));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. __proto__、setPrototypeOf、 getPrototypeOf 可以直接设置对象的原型；</span></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;111&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> cities = &#123;</span><br><span class="line">    <span class="attr">xiaoqu</span>: [<span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;33&#x27;</span>, <span class="string">&#x27;44&#x27;</span>]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 并不建议这么做</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(school, cities);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(school));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(school);</span><br></pre></td></tr></table></figure><h3 id="模块化">模块化</h3><h4 id="概述-14">概述</h4><p>模块化是指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来；</p><h4 id="模块化的好处">模块化的好处</h4><p>模块化的优势有以下几点：</p><ol><li>防止命名冲突；</li><li>代码复用；</li><li>高维护性；</li></ol><h4 id="模块化规范产品">模块化规范产品</h4><p>ES6 之前的模块化规范有：</p><ol><li>CommonJS =&gt; NodeJS、Browserify；</li><li>AMD =&gt; requireJS；</li><li>CMD =&gt; seaJS；</li></ol><h4 id="ES6-模块化语法">ES6 模块化语法</h4><p>模块功能主要由两个命令构成：export 和 import；</p><ul><li>export 命令用于规定模块的对外接口（导出模块）；</li><li>import 命令用于输入其他模块提供的功能（导入模块）；</li></ul><h4 id="简单使用-2">简单使用</h4><h4 id="两种使用方式">两种使用方式</h4><ol><li><p>在html内使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 代码区域</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引用外部js文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/app.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h5 id="m-js（导出模块）">m.js（导出模块）</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> school = <span class="string">&quot;111&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">teach</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2222222&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="模块化-html（导入和使用模块）">模块化.html（导入和使用模块）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入m.js模块内容</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&quot;./js/m.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">school</span>);</span><br><span class="line">m.<span class="title function_">teach</span>();</span><br></pre></td></tr></table></figure><h4 id="ES6暴露数据语法汇总">ES6暴露数据语法汇总</h4><h5 id="逐个导出模块">逐个导出模块</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分别暴露（导出）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> school = <span class="string">&quot;111&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">teach</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;222222&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="统一导出模块">统一导出模块</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统一暴露（导出）</span></span><br><span class="line"><span class="keyword">let</span> school = <span class="string">&quot;333&quot;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">findJob</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4444444&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123;school,findJob&#125;</span><br></pre></td></tr></table></figure><h5 id="默认导出模块">默认导出模块</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认暴露（导出）</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">school : <span class="string">&quot;555&quot;</span>,</span><br><span class="line">change : <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;666666！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="引入和使用模块">引入和使用模块</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入分别暴露模块内容</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&quot;./js/m.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m.<span class="property">school</span>);</span><br><span class="line">m.<span class="title function_">teach</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入统一暴露模块内容</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> n <span class="keyword">from</span> <span class="string">&quot;./js/n.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n.<span class="property">school</span>);</span><br><span class="line">n.<span class="title function_">findJob</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入默认暴露模块内容</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> o <span class="keyword">from</span> <span class="string">&quot;./js/o.js&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意这里调用方法的时候需要加上default</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">default</span>.<span class="property">school</span>);</span><br><span class="line">o.<span class="property">default</span>.<span class="title function_">change</span>();</span><br></pre></td></tr></table></figure><h5 id="ES6导入模块语法汇总">ES6导入模块语法汇总</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通用方式</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m <span class="keyword">from</span> <span class="string">&quot;./js/m.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解构赋值形式</span></span><br><span class="line"><span class="keyword">import</span> &#123; school, teach &#125; <span class="keyword">from</span> <span class="string">&quot;./js/m.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重名的可以使用别名</span></span><br><span class="line"><span class="keyword">import</span> &#123; school <span class="keyword">as</span> xuexiao, findJob &#125; <span class="keyword">from</span> <span class="string">&quot;./js/n.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入默认导出的模块，必须使用别名</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">default</span> <span class="keyword">as</span> one &#125; <span class="keyword">from</span> <span class="string">&quot;./js/o.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简便形式，只支持默认导出</span></span><br><span class="line"><span class="keyword">import</span> oh <span class="keyword">from</span> <span class="string">&quot;./js/o.js&quot;</span>;</span><br></pre></td></tr></table></figure><h3 id="ES6模块化引入NPM包">ES6模块化引入NPM包</h3><h4 id="演示-2">演示</h4><h5 id="第一步：安装jquery">第一步：安装jquery</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jquery</span><br></pre></td></tr></table></figure><h5 id="第二步：在app-js使用jquery">第二步：在app.js使用jquery</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入口文件</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&#x27;jquery&#x27;</span>; </span><br><span class="line"><span class="comment">// 相当于const $ = require(&quot;jquery&quot;);</span></span><br><span class="line"><span class="comment">//修改背景颜色为粉色</span></span><br><span class="line">$(<span class="string">&#x27;body&#x27;</span>).<span class="title function_">css</span>(<span class="string">&#x27;background&#x27;</span>,<span class="string">&#x27;pink&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="ES7-新特性">ES7 新特性</h2><h3 id="Array-prototype-includes">Array.prototype.includes</h3><h4 id="概述-15">概述</h4><p>Includes 方法用来检测数组中是否包含某个元素，<strong>返回布尔类型值</strong>；</p><p>判断数组中是否包含某元素，语法：arr.includes(元素值)；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// includes</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">includes</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure><h3 id="指数操作符">指数操作符</h3><h4 id="概述-16">概述</h4><p>在 ES7 中引入指数运算符「**」，用来实现幂运算，功能与 Math.pow 结果相同；</p><p>幂运算的简化写法，例如：2的10次方：2**10；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指数操作符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Math</span>.<span class="title function_">pow</span>(<span class="number">2</span>,<span class="number">10</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>**<span class="number">10</span>);</span><br></pre></td></tr></table></figure><h2 id="ES8-新特性">ES8 新特性</h2><h3 id="async-和-await">async 和 await</h3><h4 id="概述-17">概述</h4><p>async 和 await 两种语法结合可以让异步代码看起来像同步代码一样；</p><p>简化异步函数的写法；</p><h4 id="async-函数">async 函数</h4><h5 id="概述-18">概述</h5><ol><li>async 函数的返回值为 promise 对象；</li><li>promise 对象的结果由 async 函数执行的返回值决定；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async函数：异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// return 123; // 返回普通数据</span></span><br><span class="line">    <span class="comment">// 若报错，则返回的Promise对象也是错误的</span></span><br><span class="line">    <span class="comment">// throw new Error(&quot;出错啦！&quot;);</span></span><br><span class="line">    <span class="comment">// 若返回的是Promise对象，那么返回的结果就是Promise对象的结果</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve(&quot;成功啦！&quot;);</span></span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;失败啦！&quot;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">fn</span>();</span><br><span class="line"><span class="comment">// console.log(result); // 返回的结果是一个Promise对象</span></span><br><span class="line"><span class="comment">// 调用then方法</span></span><br><span class="line">result.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="await-表达式">await 表达式</h4><h5 id="概述-19">概述</h5><ol><li>await 必须写在 async 函数中；</li><li>await 右侧的表达式一般为 promise 对象；</li><li>await 返回的是 promise 成功的值；</li><li>await 的 promise 失败了, 就会抛出异常, 需要通过 try…catch 捕获处理；</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async函数 + await表达式：异步函数</span></span><br><span class="line"><span class="comment">// 创建Prmise对象</span></span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;成功啦！&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// await 返回的是 promise 成功的值</span></span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> p;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 成功啦！</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>();</span><br></pre></td></tr></table></figure><h4 id="async-和-await-读取文件案例">async 和 await 读取文件案例</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 读取</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readText</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;1.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 如果失败</span></span><br><span class="line">            <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="comment">// 如果成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readTest1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;2.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 如果失败</span></span><br><span class="line">            <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="comment">// 如果成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">readTest2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        fs.<span class="title function_">readFile</span>(<span class="string">&quot;3.txt&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 如果失败</span></span><br><span class="line">            <span class="keyword">if</span> (err) <span class="title function_">reject</span>(err);</span><br><span class="line">            <span class="comment">// 如果成功</span></span><br><span class="line">            <span class="title function_">resolve</span>(data);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//声明一个 async 函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 获取 1.txt</span></span><br><span class="line">    <span class="keyword">let</span> t0 = <span class="keyword">await</span> <span class="title function_">readText</span>();</span><br><span class="line">    <span class="comment">// 获取 2.txt</span></span><br><span class="line">    <span class="keyword">let</span> t1 = <span class="keyword">await</span> <span class="title function_">readTest1</span>();</span><br><span class="line">    <span class="comment">// 获取 3.txt</span></span><br><span class="line">    <span class="keyword">let</span> t2 = <span class="keyword">await</span> <span class="title function_">readTest2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t0.<span class="title function_">toString</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t1.<span class="title function_">toString</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(t2.<span class="title function_">toString</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h4 id="async-和-await-结合发送ajax请求">async 和 await 结合发送ajax请求</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// async 和 await 结合发送ajax请求</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendAjax</span>(<span class="params">url</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 1、创建对象</span></span><br><span class="line">        <span class="keyword">const</span> x = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        <span class="comment">// 2、初始化</span></span><br><span class="line">        x.<span class="title function_">open</span>(<span class="string">&quot;GET&quot;</span>, url);</span><br><span class="line">        <span class="comment">// 3、发送</span></span><br><span class="line">        x.<span class="title function_">send</span>();</span><br><span class="line">        <span class="comment">// 4、事件绑定</span></span><br><span class="line">        x.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x.<span class="property">readyState</span> == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (x.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; x.<span class="property">status</span> &lt;= <span class="number">299</span>) &#123;</span><br><span class="line">                    <span class="comment">// 成功</span></span><br><span class="line">                    <span class="title function_">resolve</span>(x.<span class="property">response</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">// 失败</span></span><br><span class="line">                    <span class="title function_">reject</span>(x.<span class="property">status</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用then方法</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">sendAjax</span>(<span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line">result.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(value);</span><br><span class="line">&#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(reason);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用async和await</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">main</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> <span class="title function_">sendAjax</span>(<span class="string">&quot;https://api.apiopen.top/getJoke&quot;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>();</span><br></pre></td></tr></table></figure><h3 id="对象方法扩展">对象方法扩展</h3><h4 id="Object-values、Object-entries和-Object-getOwnPropertyDescriptors">Object.values、Object.entries和 Object.getOwnPropertyDescriptors</h4><ol><li>Object.values()方法：返回一个给定对象的所有可枚举属性值的数组；</li><li>Object.entries()方法：返回一个给定对象自身可遍历属性 [key,value] 的数组；</li><li>Object.getOwnPropertyDescriptors()该方法：返回指定对象所有自身属性的描述对象；</li></ol><h4 id="代码实现">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象方法扩展</span></span><br><span class="line"><span class="keyword">let</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;訾博&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">24</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&quot;男&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 获取对象所有的键</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(school));</span><br><span class="line"><span class="comment">// 获取对象所有的值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">values</span>(school));</span><br><span class="line"><span class="comment">// 获取对象的entries</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(school));</span><br><span class="line"><span class="comment">// 创建map</span></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(school));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"><span class="comment">// 返回指定对象所有自身属性的描述对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertyDescriptors</span>(school));</span><br><span class="line"><span class="comment">// 参考内容：</span></span><br><span class="line"><span class="keyword">const</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>, &#123;</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="comment">// 设置值</span></span><br><span class="line">        <span class="attr">value</span>: <span class="string">&quot;訾博&quot;</span>,</span><br><span class="line">        <span class="comment">// 属性特性</span></span><br><span class="line">        <span class="attr">writable</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">configuration</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">enumerable</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="ES9-新特性">ES9 新特性</h2><h3 id="Rest-参数与-spread-扩展运算符">Rest 参数与 spread 扩展运算符</h3><h4 id="概述-20">概述</h4><p>Rest 参数与 spread 扩展运算符在 ES6 中已经引入，不过 ES6 中只针对于数组，在 ES9 中为对象提供了 像数组一样的 rest 参数和扩展运算符；</p><h4 id="代码实现-2">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Rest参数与spread扩展运算符</span></span><br><span class="line"><span class="comment">// Rest 参数与 spread 扩展运算符在 ES6 中已经引入，</span></span><br><span class="line"><span class="comment">// 不过 ES6 中只针对于数组，在 ES9 中为对象提供了像数组一样的 rest 参数和扩展运算符；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//rest 参数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">connect</span>(<span class="params">&#123;</span></span><br><span class="line"><span class="params">    host,</span></span><br><span class="line"><span class="params">    port,</span></span><br><span class="line"><span class="params">    ...user</span></span><br><span class="line"><span class="params">&#125;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(host);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(port);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(user);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">connect</span>(&#123;</span><br><span class="line">    <span class="attr">host</span>: <span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="attr">port</span>: <span class="number">3306</span>,</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&#x27;root&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;master&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象合并</span></span><br><span class="line"><span class="keyword">const</span> skillOne = &#123;</span><br><span class="line">    <span class="attr">q</span>: <span class="string">&#x27;天音波&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> skillTwo = &#123;</span><br><span class="line">    <span class="attr">w</span>: <span class="string">&#x27;金钟罩&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> skillThree = &#123;</span><br><span class="line">    <span class="attr">e</span>: <span class="string">&#x27;天雷破&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> skillFour = &#123;</span><br><span class="line">    <span class="attr">r</span>: <span class="string">&#x27;猛龙摆尾&#x27;</span>,</span><br><span class="line">    <span class="comment">// 自己测试，可用</span></span><br><span class="line">    <span class="attr">z</span>: <span class="string">&#x27;胡说八道&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mangseng = &#123;</span><br><span class="line">    ...skillOne,</span><br><span class="line">    ...skillTwo,</span><br><span class="line">    ...skillThree,</span><br><span class="line">    ...skillFour</span><br><span class="line">&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mangseng)</span><br></pre></td></tr></table></figure><h3 id="正则扩展：命名捕获分组">正则扩展：命名捕获分组</h3><h4 id="概述-21">概述</h4><p>ES9 允许命名捕获组使用符号『?』,这样获取捕获结果可读性更强；</p><h4 id="代码实现-3">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正则扩展：命名捕获分组</span></span><br><span class="line"><span class="comment">// 声明一个字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;&lt;a href=&quot;http://www.baidu.com&quot;&gt;訾博&lt;/a&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">// 需求：提取url和标签内文本</span></span><br><span class="line"><span class="comment">// 之前的写法</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;a href=&quot;(.*)&quot;&gt;(.*)&lt;\/a&gt;/</span>;</span><br><span class="line"><span class="comment">// 执行</span></span><br><span class="line"><span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// 结果是一个数组，第一个元素是所匹配的所有字符串</span></span><br><span class="line"><span class="comment">// 第二个元素是第一个(.*)匹配到的字符串</span></span><br><span class="line"><span class="comment">// 第三个元素是第二个(.*)匹配到的字符串</span></span><br><span class="line"><span class="comment">// 我们将此称之为捕获</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">1</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result[<span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 命名捕获分组</span></span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span>;</span><br><span class="line"><span class="keyword">const</span> result1 = reg1.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br><span class="line"><span class="comment">// 这里的结果多了一个groups</span></span><br><span class="line"><span class="comment">// groups:</span></span><br><span class="line"><span class="comment">// text:&quot;訾博&quot;</span></span><br><span class="line"><span class="comment">// url:&quot;http://www.baidu.com&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1.<span class="property">groups</span>.<span class="property">url</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1.<span class="property">groups</span>.<span class="property">text</span>);</span><br></pre></td></tr></table></figure><h3 id="正则扩展：反向断言">正则扩展：反向断言</h3><h4 id="概述-22">概述</h4><p>ES9 支持反向断言，通过对匹配结果前面的内容进行判断，对匹配进行筛选；</p><h4 id="代码实现-4">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正则扩展：反向断言</span></span><br><span class="line"><span class="comment">// 字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;JS5201314你知道么555啦啦啦&quot;</span>;</span><br><span class="line"><span class="comment">// 需求：我们只想匹配到555</span></span><br><span class="line"><span class="comment">// 正向断言</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/\d+(?=啦)/</span>; <span class="comment">// 前面是数字后面是啦</span></span><br><span class="line"><span class="keyword">const</span> result = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="comment">// 反向断言</span></span><br><span class="line"><span class="keyword">const</span> reg1 = <span class="regexp">/(?&lt;=么)\d+/</span>; <span class="comment">// 后面是数字前面是么</span></span><br><span class="line"><span class="keyword">const</span> result1 = reg.<span class="title function_">exec</span>(str);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br></pre></td></tr></table></figure><h4 id="4、正则扩展：dotAll-模式">4、正则扩展：dotAll 模式</h4><h4 id="概述-23">概述</h4><p>正则表达式中点 <code>.</code> 匹配除回车外的任何单字符，标记『s』改变这种行为，允许行终止符出现；</p><h4 id="代码实现-5">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正则扩展：dotAll 模式</span></span><br><span class="line"><span class="comment">// dot就是 . 元字符，表示除换行符之外的任意单个字符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;肖生克的救赎&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;阿甘正传&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="comment">// 需求：我们想要将其中的电影名称和对应上映时间提取出来，存到对象</span></span><br><span class="line"><span class="comment">// 之前的写法</span></span><br><span class="line"><span class="comment">// const reg = /&lt;li&gt;\s+&lt;a&gt;(.*?)&lt;\/a&gt;\s+&lt;p&gt;(.*?)&lt;\/p&gt;/;</span></span><br><span class="line"><span class="comment">// dotAll 模式</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/g</span>s;</span><br><span class="line"><span class="comment">// const result = reg.exec(str);</span></span><br><span class="line"><span class="comment">// console.log(result);</span></span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"><span class="keyword">let</span> data = [];</span><br><span class="line"><span class="keyword">while</span> (result = reg.<span class="title function_">exec</span>(str)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">    data.<span class="title function_">push</span>(&#123; <span class="attr">title</span>: result[<span class="number">1</span>], <span class="attr">time</span>: result[<span class="number">2</span>] &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><h2 id="ES10-新特性">ES10 新特性</h2><h3 id="Object-fromEntries">Object.fromEntries</h3><h4 id="概述-24">概述</h4><p>将二维数组或者map转换成对象； 之前学的Object.entries是将对象转换成二维数组；</p><h4 id="代码实现-6">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Object.fromEntries：将二维数组或者map转换成对象</span></span><br><span class="line"><span class="comment">// 之前学的Object.entries是将对象转换成二维数组</span></span><br><span class="line"><span class="comment">// 此方法接收的是一个二维数组，或者是一个map集合</span></span><br><span class="line"><span class="comment">// 二维数组</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>([</span><br><span class="line">    [<span class="string">&quot;name&quot;</span>, <span class="string">&quot;訾博&quot;</span>],</span><br><span class="line">    [<span class="string">&quot;age&quot;</span>, <span class="number">24</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="keyword">const</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;訾博&quot;</span>);</span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;age&quot;</span>, <span class="number">24</span>);</span><br><span class="line"><span class="keyword">const</span> result1 = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(m);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br></pre></td></tr></table></figure><h3 id="trimStart-和-trimEnd">trimStart 和 trimEnd</h3><h4 id="概述-25">概述</h4><p>去掉字符串前后的空白字符；</p><h4 id="代码实现-7">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// trimStart 和 trimEnd</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot; zibo &quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimLeft</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimRight</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimStart</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">trimEnd</span>());</span><br></pre></td></tr></table></figure><h3 id="Array-prototype-flat-与-flatMap">Array.prototype.flat 与 flatMap</h3><h4 id="概述-26">概述</h4><p>将多维数组转换成低维数组；</p><h4 id="代码实现-8">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.flat 与 flatMap</span></span><br><span class="line"><span class="comment">// flat(x)  参数 x 代表深度，三维转一维 x 为 2</span></span><br><span class="line"><span class="comment">// 将多维数组转换成低维数组</span></span><br><span class="line"><span class="comment">// 将二维数组转换成一维数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>], <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">flat</span>());</span><br><span class="line"><span class="comment">// 将三维数组转换成二维数组</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, [<span class="number">6</span>, <span class="number">7</span>]], <span class="number">8</span>, <span class="number">9</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">flat</span>());</span><br><span class="line"><span class="comment">// 将三维数组转换成一维数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2.<span class="title function_">flat</span>(<span class="number">2</span>));</span><br><span class="line"><span class="comment">// flatMap</span></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> result = arr3.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item * <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [ 10, 20, 30, 40, 50 ]</span></span><br><span class="line"><span class="keyword">const</span> result1 = arr3.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">// [ [ 10 ], [ 20 ], [ 30 ], [ 40 ], [ 50 ] ]</span></span><br><span class="line"><span class="keyword">const</span> result2 = arr3.<span class="title function_">flatMap</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]);  <span class="comment">// 相当于 flat 和 map 一起使用，如下</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">// [ 10, 20, 30, 40, 50 ]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result3 = arr3.<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> [item * <span class="number">10</span>]).<span class="title function_">flat</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3); <span class="comment">// [ 10, 20, 30, 40, 50 ]</span></span><br></pre></td></tr></table></figure><h3 id="Symbol-prototype-description">Symbol.prototype.description</h3><h4 id="概述-27">概述</h4><p>获取Symbol的描述字符串；</p><h4 id="代码实现-9">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Symbol.prototype.description</span></span><br><span class="line"><span class="comment">// 获取Symbol的描述字符串</span></span><br><span class="line"><span class="comment">// 创建Symbol</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="title class_">Symbol</span>(<span class="string">&quot;訾博&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="property">description</span>)</span><br></pre></td></tr></table></figure><h2 id="ES11-新特性">ES11 新特性</h2><h3 id="String-prototype-matchAll">String.prototype.matchAll</h3><h4 id="概述-28">概述</h4><p>用来得到正则批量匹配的结果；</p><h4 id="代码实现-10">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String.prototype.matchAll</span></span><br><span class="line"><span class="comment">// 用来得到正则批量匹配的结果</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;肖生克的救赎&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-09-10&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;</span></span><br><span class="line"><span class="string">&lt;a&gt;阿甘正传&lt;/a&gt;</span></span><br><span class="line"><span class="string">&lt;p&gt;上映日期: 1994-07-06&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;/ul&gt;</span></span><br><span class="line"><span class="string">`</span>;</span><br><span class="line"><span class="comment">// 正则</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/</span>sg;</span><br><span class="line"><span class="keyword">const</span> result = str.<span class="title function_">matchAll</span>(reg);</span><br><span class="line"><span class="comment">// 返回的是可迭代对象，可用扩展运算符展开</span></span><br><span class="line"><span class="comment">// console.log(...result);</span></span><br><span class="line"><span class="comment">// 使用for...of...遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> result) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v[<span class="number">1</span>], v[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类的私有属性">类的私有属性</h3><h4 id="概述-29">概述</h4><p>私有属性外部不可访问直接；</p><h4 id="代码实现-11">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类的私有属性</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="comment">// 公有属性</span></span><br><span class="line">    name;</span><br><span class="line">    <span class="comment">// 私有属性</span></span><br><span class="line">    #age;</span><br><span class="line">    #weight;</span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name, age, weight</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.#age = age;</span><br><span class="line">        <span class="variable language_">this</span>.#weight = weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">intro</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#age);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.#weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line"><span class="keyword">const</span> girl = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;小兰&quot;</span>, <span class="number">18</span>, <span class="string">&quot;90kg&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl);</span><br><span class="line"><span class="comment">// 公有属性的访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl.<span class="property">name</span>);</span><br><span class="line"><span class="comment">// 私有属性的访问</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(girl.<span class="property">age</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="comment">// 报错Private field &#x27;#age&#x27; must be declared in an enclosing class</span></span><br><span class="line"><span class="comment">// console.log(girl.#age);</span></span><br><span class="line">girl.<span class="title function_">intro</span>();</span><br></pre></td></tr></table></figure><h3 id="Promise-allSettled">Promise.allSettled</h3><h4 id="概述-30">概述</h4><p>获取多个promise执行的结果集；</p><h4 id="代码实现-12">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise.allSettled</span></span><br><span class="line"><span class="comment">// 获取多个promise执行的结果集</span></span><br><span class="line"><span class="comment">// 声明两个promise对象</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(<span class="string">&quot;商品数据——1&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;失败啦&quot;</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 调用Promise.allSettled方法</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2]); <span class="comment">// 无论怎样都正确</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line"><span class="keyword">const</span> result1 = <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2]); <span class="comment">// 有一个错误就出错</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br></pre></td></tr></table></figure><h3 id="可选链操作符">可选链操作符</h3><h4 id="概述-31">概述</h4><p>如果存在则往下走，省略对对象是否传入的层层判断；</p><h4 id="代码实现-13">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可选链操作符</span></span><br><span class="line"><span class="comment">// ?.</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">main</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 传统写法</span></span><br><span class="line">    <span class="comment">// const dbHost = config &amp;&amp; config.db &amp;&amp; config.db.host;</span></span><br><span class="line">    <span class="comment">// 可选链操作符写法</span></span><br><span class="line">    <span class="keyword">const</span> dbHost = config?.<span class="property">db</span>?.<span class="property">host</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(dbHost);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">main</span>(&#123;</span><br><span class="line">    <span class="attr">db</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&quot;192.168.1.100&quot;</span>,</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;root&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">cache</span>: &#123;</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&quot;192.168.1.200&quot;</span>,</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;admin&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="动态-import-导入">动态 import 导入</h3><h4 id="概述-32">概述</h4><p>动态导入模块，什么时候使用时候导入；</p><h4 id="代码实现-14">代码实现</h4><h5 id="hello-js">hello.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">hello</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="title function_">alert</span>(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="app-js">app.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import * as m1 from &quot;./hello.js&quot;; // 传统静态导入</span></span><br><span class="line"><span class="comment">//获取元素</span></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;btn&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">import</span> (<span class="string">&#x27;./hello.js&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">module</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">module</span>.<span class="title function_">hello</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="BigInt">BigInt</h3><h4 id="概述-33">概述</h4><p>更大的整数；</p><h4 id="代码实现-15">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// BigInt</span></span><br><span class="line"><span class="comment">// 大整型</span></span><br><span class="line"><span class="keyword">let</span> n = <span class="number">100</span> n;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n, <span class="title function_">typeof</span>(n));</span><br><span class="line"><span class="comment">// 函数：普通整型转大整型</span></span><br><span class="line"><span class="keyword">let</span> m = <span class="number">123</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(m));</span><br><span class="line"><span class="comment">// 用于更大数值的运算</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max + <span class="number">1</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(max + <span class="number">2</span>); <span class="comment">// 出错了</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max) + <span class="title class_">BigInt</span>(<span class="number">1</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">BigInt</span>(max) + <span class="title class_">BigInt</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure><h3 id="globalThis-对象">globalThis 对象</h3><h4 id="概述-34">概述</h4><p><code>globalThis</code>旨在通过定义一个标准的全局属性来整合日益分散的访问全局对象的方法。</p><h4 id="代码实现-16">代码实现</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 浏览器环境</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis);    <span class="comment">// =&gt; Window &#123;...&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// node.js 环境</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis);    <span class="comment">// =&gt; Object [global] &#123;...&#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// web worker 环境</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(globalThis);    <span class="comment">// =&gt; DedicatedWorkerGlobalScope &#123;...&#125;</span></span><br></pre></td></tr></table></figure><p>更多：<a href="https://blog.csdn.net/qq449245884/article/details/104322516">https://blog.csdn.net/qq449245884/article/details/104322516</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6语法</title>
      <link href="/posts/312.html"/>
      <url>/posts/312.html</url>
      
        <content type="html"><![CDATA[<h1>ES6语法</h1><p>在ES6中，提供了let关键字和const关键字，都具有块级作用域</p><h2 id="let关键字的使用let关键字">let关键字的使用let关键字</h2><ol><li>仅仅在自己的块级作用域内起作用</li><li>不存在变量提升，必须先进行变量的声明（否则会报错）</li><li>在同一个块级作用域内，不允许声明同名的变量</li><li>在函数内不能使用let关键字重新声明函数的参数</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params">ts</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> ts = <span class="string">&quot;哈哈&quot;</span>;</span><br><span class="line"><span class="title function_">alert</span>(ts)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">demo</span>(<span class="title class_">Hi</span>); <span class="comment">//报错</span></span><br><span class="line"><span class="comment">// 报错原因是使用了let关键字重新声明了函数的参数ts</span></span><br></pre></td></tr></table></figure><ol start="5"><li>在for循环中使用let关键字可以解决闭包问题</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dv&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> node = <span class="variable language_">document</span>.<span class="title function_">getElementByTagName</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>;i&lt;node.<span class="property">length</span>;i++)&#123;</span><br><span class="line">node[i].<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">node[i].<span class="property">innerHTML</span> = <span class="string">&quot;成功了&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="6"><li>不影响作用域链</li></ol><p>总结：使用let关键字声明的变量只在跨级作用域中起作用，比较适合for循环中，同时不会出现变量提升的现象；且同一个代码块内，不可以重复声明相同的变量，也不可以重复声明函数内的参数。</p><h2 id="const关键字的使用">const关键字的使用</h2><ol><li>只在块级作用域内起作用</li><li>声明后的值不可以被修改</li><li>不存在变量提升，必须先声明后才能使用</li><li>不可以重复声明同一个变量，<strong>且声明后必须赋值</strong></li><li>const常量可以是一个对象类型或数组，内部的数据是可以修改的</li></ol><h4 id="总结：-var-let-const关键字之间的差异">总结：==var &amp; let &amp; const关键字之间的差异==</h4><ol><li>var 是在全局起作用的，而const和let关键字都是只在自己的块级作用域起作用的</li><li>const和let关键字都是不存在变量提升的，必须先进行声明；且不可以重复声明同一个变量</li><li>使用const关键字在声明时必须同时赋值，而var和let关键字可以将声明和赋值分开进行</li><li>const关键字声明后的值不可以被修改，而var和let却可以</li><li>let关键字不能在函数内重新声明函数的参数</li></ol><h2 id="解构赋值">解构赋值</h2><ol><li>数组的解构赋值</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span>[a,b,c] = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]; <span class="comment">// 完全解构</span></span><br><span class="line"><span class="keyword">var</span>[a,,c] = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>]; <span class="comment">// 不完全解构</span></span><br></pre></td></tr></table></figure><ol start="2"><li>对象的解构赋值，<strong>用到谁就解构谁</strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象的属性没有次序，变量必须与属性同名，才能取到正确的值</span></span><br><span class="line"><span class="keyword">var</span> &#123;foo,bar&#125; = &#123;<span class="attr">bar</span>:<span class="string">&quot;aaa&quot;</span>,<span class="attr">foo</span>:<span class="string">&quot;bbb&quot;</span>&#125;;</span><br></pre></td></tr></table></figure><ol start="3"><li>复杂结构的解构</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&quot;超哥&quot;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">28</span>,</span><br><span class="line"><span class="attr">dog</span>: &#123;</span><br><span class="line"><span class="title class_">Dname</span>: <span class="string">&quot;Bruce&quot;</span>,</span><br><span class="line"><span class="title class_">Dage</span>: <span class="number">10</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">sayHi</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hi, I am chao&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> &#123;name,age,<span class="attr">dog</span>:&#123;<span class="title class_">Dname</span>,<span class="title class_">Dage</span>&#125;,sayHi&#125; = person;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Dname</span>,<span class="title class_">Dage</span>); <span class="comment">// Bruce 10</span></span><br><span class="line"><span class="title function_">sayHi</span>(); <span class="comment">// Hi,I am chao</span></span><br></pre></td></tr></table></figure><h2 id="对象的简化写法">对象的简化写法</h2><ol><li>对象的属性和方法都可以使用外部定义的属性或者函数</li><li>对象中的方法，可以不使用function关键字来定义，直接书写最简单的方式</li></ol><h2 id="箭头函数">箭头函数</h2><ol><li>基本语法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES6允许使用箭头(=&gt;)来定义函数</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">f</span> = (<span class="params">a,b</span>)=&gt;&#123;</span><br><span class="line"><span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 箭头函数就相当于</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果箭头函数不需要参数或者多个参数时，要将参数放入一对括号中;如果只有一个参数时，则可以不用括号</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">f</span> = (<span class="params"></span>)=&gt; <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">sum</span> = (<span class="params">a,b</span>)=&gt;a+b;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">f</span> = a=&gt; a;</span><br><span class="line"><span class="comment">// 箭头函数的代码块多于一条语句时，要使用大括号将其包裹起来</span></span><br><span class="line"><span class="comment">// 如果箭头函数直接返回的是一个对象，必须在对象外面加上一个括号</span></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">getItem</span> = id=&gt;(&#123; <span class="attr">id</span>:id,<span class="attr">name</span>:<span class="string">&quot;item&quot;</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 也可以和变量解构结合使用</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">full</span> =(<span class="params">&#123;first,last&#125;</span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> first + <span class="string">&quot;&quot;</span> +last;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用场景（定时器，数组中常用的方法，事件的回调函数。。。）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item,index</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li><p>不能作为构造函数去使用</p></li><li><p>==箭头函数的this是不能改变的==，与this有关的操作都不适合用箭头函数。（例如：对象里面的方法）</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this对象的指向是可变的，但是在箭头函数中，它是固定的</span></span><br><span class="line"><span class="comment">// 箭头函数导致this总是指向函数定义生效时所在的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;id:&quot;</span>,<span class="variable language_">this</span>.<span class="property">id</span>)</span><br><span class="line">    &#125;,<span class="number">1000</span>) </span><br><span class="line"><span class="comment">// setTimeout的参数是一个箭头函数，因此这个箭头函数定义生效是在foo函数生成时，且this指向函数定义生效时所在的对象，也就是42；</span></span><br><span class="line"><span class="comment">// 如果是普通的函数，this就是指向的是全局对象window；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> id = <span class="number">21</span>;</span><br><span class="line">foo.<span class="title function_">call</span>(&#123;<span class="attr">id</span>:<span class="number">42</span>&#125;);<span class="comment">// 输出结果为： id：42</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 箭头函数可以让setTimeout里面的this，绑定定义时所在的作用域，而不是指向运行时所在的作用域</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">s1</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">s2</span> = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">// 箭头函数 this绑定定义时所在的作用域（即Timer函数）</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">s1</span>++, <span class="number">1000</span>);</span><br><span class="line">  <span class="comment">// 普通函数 this指向运行时所在的作用域（即全局对象）</span></span><br><span class="line">  <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">s2</span>++;</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timer = <span class="keyword">new</span> <span class="title class_">Timer</span>();</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;s1: &#x27;</span>, timer.<span class="property">s1</span>), <span class="number">3100</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;s2: &#x27;</span>, timer.<span class="property">s2</span>), <span class="number">3100</span>);</span><br><span class="line"><span class="comment">// s1: 3</span></span><br><span class="line"><span class="comment">// s2: 0</span></span><br></pre></td></tr></table></figure><p>this指向的固定化，是因为箭头函数没有自己的this，导致内部的this就是外层代码的this；</p><p><strong>this 的应用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="variable language_">this</span>; <span class="comment">// 此时function中的this指向事件源，也就是被点击的box；将this保留下来；</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">// 这里的回调函数就可以将this指向改成事件源了</span></span><br><span class="line">        _this.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">        _this.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//********************************************************************</span></span><br><span class="line"><span class="keyword">var</span> box = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;box&quot;</span>);</span><br><span class="line">box.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>,<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"> <span class="comment">// 如果回调函数使用的是箭头函数，就不用保存this了，因为箭头函数会直接去找绑定定义时所在的作用域中的this指向</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">height</span> = <span class="string">&quot;300px&quot;</span>;</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><ol start="5"><li>箭头函数中的arguments是不能使用的，用rest参数代替（args）</li></ol><h2 id="函数参数的默认值设置">函数参数的默认值设置</h2><p>ES6允许给函数形参赋值初始值；形参可以有默认值，==一般默认值靠后==；与解构赋值结合使用，解构赋值的形式先后顺序不影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数或方法调用的时候，传递的参数容易丢失，或者不想传递那么多参数，且结果能正常执行时。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">&#123;name=<span class="string">&quot;超哥&quot;</span>,age&#125;</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name,age) <span class="comment">//输出  强哥 18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;强哥&quot;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>(obj);</span><br><span class="line"><span class="comment">// 如果在obj本身有属性name时，再利用解构赋值给name设置值时，不会起作用。</span></span><br><span class="line"><span class="comment">// 但是如果obj本身没有name属性时，利用解构赋值给name设置属性值时，可以起作用</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">&#123;name=<span class="string">&quot;超哥&quot;</span>,age&#125;</span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name,age) <span class="comment">//输出  超哥 18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>(obj);</span><br></pre></td></tr></table></figure><h2 id="rest参数">rest参数</h2><p>ES6中引入rest参数（真数组），代替arguments；arguments是对象（伪数组）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">f1</span>(<span class="params">...args</span>)&#123;</span><br><span class="line"><span class="comment">// 这里的args是真数组，且rest参数必须放在最后    </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">f1</span>(<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>); <span class="comment">// [100,200,300]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... 延展运算符(可以拆包，也可以打包)</span></span><br><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;小猪佩琪&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>:<span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">    <span class="attr">gender</span>:<span class="string">&quot;男&quot;</span>,</span><br><span class="line">    <span class="attr">height</span>:<span class="number">180</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="comment">// 拆包过程</span></span><br><span class="line">    ...obj1,</span><br><span class="line">    ...obj2</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打包过程</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [...arr]; <span class="comment">// 内部拆包，外部打包</span></span><br></pre></td></tr></table></figure><p><strong>扩展运算符（spread）的应用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将两个数组合并</span></span><br><span class="line"><span class="keyword">var</span> arr = [...arr1,...arr2];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 将两个对象合并</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    ...obj1,</span><br><span class="line">    ...obj2</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的克隆</span></span><br><span class="line"><span class="keyword">var</span> newCars = [...cars];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 伪数组转真数组</span></span><br><span class="line"><span class="keyword">var</span> btnObjs = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;btn&quot;</span>); <span class="comment">// 伪数组</span></span><br><span class="line"><span class="keyword">var</span> btnObjs2 = [...btnObjs]; <span class="comment">// btnObjs2 是真数组</span></span><br></pre></td></tr></table></figure><h2 id="Symbol数据类型">Symbol数据类型</h2><p>Symbol是为了防止属性名的冲突，保证每一个属性名都是独一无二的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Symbol类型定义出来的数据，是唯一的；即使在创建时这种数据类型的时候传入的数据是相同的，但是得到的结果进行比较，也是不同的数据；如果非要使用Symbol创建相同的数据，那么要使用Symbol.for()的方式(几乎不用)</span></span><br><span class="line"><span class="keyword">let</span> s1 = <span class="title class_">Symbol</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">s1 === s2 <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;bar&quot;</span>) === <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;bar&quot;</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ol><li>创建方式</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种创建方式</span></span><br><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1); <span class="comment">// Symbol()</span></span><br><span class="line"><span class="comment">// 第二种创建方式</span></span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>(<span class="string">&quot;强哥&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2); <span class="comment">// Symbo(强哥)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>应用1（通过Symbol向对象中添加方法）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;今晚吃什么&quot;</span>)</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;赶紧去&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 这样做的话，person对象中的eat方法和run方法会被覆盖掉</span></span><br><span class="line">person.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;没想好&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="property">run</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;跑不动&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">person.<span class="title function_">eat</span>(); <span class="comment">// 没想好</span></span><br><span class="line">person.<span class="title function_">run</span>(); <span class="comment">// 跑不动</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 利用Symbol来解决这个问题</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">eat</span>: <span class="title class_">Symbol</span>(<span class="string">&quot;eat&quot;</span>),</span><br><span class="line">    <span class="attr">run</span>: <span class="title class_">Symbol</span>(<span class="string">&quot;run&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 向person对象中添加eat方法和run方法</span></span><br><span class="line">person[obj.<span class="property">eat</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新的eat方法&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">person[obj.<span class="property">run</span>] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;新的run方法&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用方法时，</span></span><br><span class="line">person.<span class="title function_">eat</span>(); <span class="comment">// 今晚吃什么</span></span><br><span class="line">person.<span class="title function_">run</span>(); <span class="comment">// 赶紧去</span></span><br><span class="line">person[obj.<span class="property">eat</span>](); <span class="comment">// 新的eat方法</span></span><br><span class="line">person[obj.<span class="property">run</span>](); <span class="comment">// 新的run方法</span></span><br></pre></td></tr></table></figure><ol start="3"><li>应用2（通过Symbol创建对象属性）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">[<span class="title class_">Symbol</span>(<span class="string">&quot;name&quot;</span>)]:<span class="string">&quot;小强&quot;</span>，</span><br><span class="line">    [<span class="title class_">Symbol</span>(<span class="string">&quot;look&quot;</span>)]()&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;快看&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 使用for-in或者for-of是无法遍历到用Symbol创建的对象属性</span></span><br><span class="line"><span class="comment">// 只能利用下面的方法遍历</span></span><br><span class="line"><span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// [&quot;age&quot;,Symbol(name),Symbol(look)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;result.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result[i]); <span class="comment">// age Symbol(name) Symbol(look)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;result.<span class="property">length</span>;i++)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[result[i]]); </span><br><span class="line">    <span class="comment">// 20 小强 f [Symbol(&quot;look&quot;)]()&#123;console.log(&quot;快看&quot;)&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> result)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key); <span class="comment">// 0 1 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Symbol 内置的属性值</li></ol><h2 id="ES6中新引入的遍历命令，for-of循环">ES6中新引入的遍历命令，for-of循环</h2><p>Iterator接口主要提供for-of消费，数组可以使用for-of遍历，是因为内部实现了iterator接口</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前数组中的Symbol.iterator的函数，并直接调用</span></span><br><span class="line"><span class="comment">// 返回的结果是一个对象，指针对象</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = arr[<span class="title class_">Symbol</span>.<span class="title function_">iterator</span>()];</span><br></pre></td></tr></table></figure><p>for-of不能遍历对象，因为for-of无法遍历自己定义的属性，这是因为它的内部没有实现迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&quot;强哥&quot;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">47</span>,</span><br><span class="line"><span class="attr">cars</span>:[<span class="string">&quot;奔驰&quot;</span>,<span class="string">&quot;宝马&quot;</span>,<span class="string">&quot;奥迪&quot;</span>,<span class="string">&quot;捷达&quot;</span>],</span><br><span class="line">[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> that = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>&#123;</span><br><span class="line"><span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(index&gt;=that.<span class="property">cars</span>.<span class="property">length</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span>&#123;</span><br><span class="line">                        <span class="attr">value</span>:<span class="string">&quot;undefined&quot;</span>,</span><br><span class="line">                        <span class="attr">done</span>:<span class="literal">true</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   <span class="keyword">return</span>&#123;</span><br><span class="line">                       <span class="attr">value</span>: that.<span class="property">cars</span>[index++],</span><br><span class="line">                       <span class="attr">done</span>:<span class="literal">false</span></span><br><span class="line">                   &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这时再使用for-of遍历就可以实现了</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">of</span> obj)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Generator生成器函数">Generator生成器函数</h2><p>ES6提供的解决异步编程的方案之一，Generator函数是一个状态，内部封装了不同状态数据，用来生成遍历对象。</p><ol><li>声明的语法特殊</li><li>调用时返回的结果是指针对象</li><li>允许出现yield语句，相当于代码的分隔符，后面的代码不会执行</li><li>每执行一次next方法，执行一段js代码，并返回yield语句的结果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;强哥好可爱&quot;</span>);</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;AAA&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;超哥好帅哦&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> iterator = <span class="title function_">gen</span>(); <span class="comment">// 不会执行的，返回来的是一个指针对象</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// “强哥好可爱” &#123;value:&quot;AAA&quot;, done:false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// “超哥好帅哦” &#123;value:&quot;undefiend&quot;, done:true&#125;</span></span><br></pre></td></tr></table></figure><p><strong>生成器函数的参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params">args</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(args);</span><br><span class="line">    <span class="keyword">let</span> result1 = <span class="keyword">yield</span> <span class="string">&quot;AAA&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result1);</span><br><span class="line">    <span class="keyword">let</span> result2 = <span class="keyword">yield</span> <span class="string">&quot;BBB&quot;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result2);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> iterator = <span class="title function_">gen</span>(<span class="string">&quot;000&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>()); <span class="comment">// 000 &#123;value:&quot;AAA&quot;, done:false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;111&quot;</span>)); <span class="comment">// 111 &#123;value:&quot;BBB&quot;, done:false&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>(<span class="string">&quot;222&quot;</span>)); <span class="comment">// 222 &#123;value:&quot;undefined&quot;, done:true&#125;</span></span><br></pre></td></tr></table></figure><p><strong>生成器函数的实践1</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解决回调地狱的问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">one</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;111&quot;</span>);</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">two</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;222&quot;</span>);</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">three</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;333&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>());</span><br><span class="line">&#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line"><span class="keyword">yield</span> <span class="title function_">one</span>();</span><br><span class="line">    <span class="keyword">yield</span> <span class="title function_">three</span>();</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;终于结束了&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><p><strong>生成器函数的实践2</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getLogin</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> user = <span class="string">&quot;用户信息&quot;</span>;</span><br><span class="line">        iterator.<span class="title function_">next</span>(user);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getProduct</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> product = <span class="string">&quot;商品信息&quot;</span>;</span><br><span class="line">        iterator.<span class="title function_">next</span>(product);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getOrder</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">const</span> order = <span class="string">&quot;订单信息&quot;</span>;</span><br><span class="line">        iterator.<span class="title function_">next</span>(order);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> * <span class="title function_">gen</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> login = <span class="keyword">yield</span> <span class="title function_">getLogin</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(login);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> product = <span class="keyword">yield</span> <span class="title function_">getProduct</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(product);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> order = <span class="keyword">yield</span> <span class="title function_">getOrder</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(order);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iterator = <span class="title function_">gen</span>();</span><br><span class="line">iterator.<span class="title function_">next</span>();</span><br></pre></td></tr></table></figure><h3 id="for-in-与-for-of循环的区别">for-in 与 for-of循环的区别</h3><p>一般来说，for-in遍历对象（Object），for-of遍历数组会比较方便。</p><p>但是，for-of不能循环出自定义的属性。这是因为for-of循环的是可迭代的对象的的value，而for-in循环的是可迭代的对象的key值。</p><p>for-of不可以循环普通的对象，对于普通对象的属性遍历推荐使用for-in循环。</p><h2 id="Set集合的属性和方法">Set集合的属性和方法</h2><p>Set对象是值的集合，可以按照插入的顺序迭代它的元素，<strong>且Set集合中的数据是唯一的</strong>，重复元素在set中自动被过滤掉。</p><p>==Set()中放入的内容是可以通过for-of进行遍历的数据==：数组、字符串都可以，自定义的对象不行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]);</span><br><span class="line"><span class="keyword">const</span> name = <span class="keyword">new</span> <span class="title class_">Set</span>(<span class="string">&quot;abcdef&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向Set集合中添加一个数据</span></span><br><span class="line">num.<span class="title function_">add</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 删除某个数据</span></span><br><span class="line">num.<span class="title function_">delete</span>(<span class="number">10</span>);</span><br><span class="line"><span class="comment">// 判断集合中是否含有某个数据</span></span><br><span class="line">num.<span class="title function_">has</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 清空集合</span></span><br><span class="line">num.<span class="title function_">clear</span>();</span><br></pre></td></tr></table></figure><p><strong>Set集合的应用</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组去重</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">&quot;强哥&quot;</span>,<span class="string">&quot;小强&quot;</span>,<span class="string">&quot;小强&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr1)];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2);</span><br><span class="line"><span class="comment">// 获取数组中的相同数据----交集操作</span></span><br><span class="line"><span class="keyword">var</span> arr3 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line"><span class="keyword">var</span> arr4 = [<span class="number">20</span>,<span class="number">30</span>,<span class="number">50</span>,<span class="number">60</span>,<span class="number">70</span>];</span><br><span class="line"><span class="keyword">var</span> arr5 = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr3)];</span><br><span class="line"><span class="keyword">var</span> arr6 = arr5.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>(arr4);</span><br><span class="line">    <span class="keyword">return</span> s.<span class="title function_">has</span>(item)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr6);</span><br><span class="line"><span class="comment">// 简化形式就是</span></span><br><span class="line"><span class="keyword">var</span> arr5 = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr3)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span><span class="keyword">new</span> <span class="title class_">Set</span>(arr4).<span class="title function_">has</span>(item));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr5);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组中的不同数据----并集操作</span></span><br><span class="line"><span class="keyword">var</span> arr7 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>];</span><br><span class="line"><span class="keyword">var</span> arr8 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">60</span>];</span><br><span class="line"><span class="keyword">var</span> arr9 = [...<span class="keyword">new</span> <span class="title class_">Set</span>([...arr7,...arr8])];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr9);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组的差集----我有的你没有，你有的我没有</span></span><br><span class="line"><span class="keyword">var</span> arr10 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>];</span><br><span class="line"><span class="keyword">var</span> arr11 = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">40</span>,<span class="number">60</span>];</span><br><span class="line"><span class="keyword">var</span> arr12 = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr10)].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span>=&gt;</span>!(<span class="keyword">new</span> <span class="title class_">Set</span>(arr11).<span class="title function_">has</span>(item)));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr12); <span class="comment">// [30]</span></span><br></pre></td></tr></table></figure><h2 id="Map集合的属性和方法">Map集合的属性和方法</h2><p>Map容器：无序的key，不重复的多个key-value的集合体，放入的内容是可以通过for-of进行遍历的数据</p><p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值覆盖掉</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> m = <span class="keyword">new</span> <span class="title class_">Map</span>([[<span class="string">&quot;Bruce&quot;</span>,<span class="number">18</span>],[<span class="string">&quot;Michael&quot;</span>,<span class="number">25</span>]]);</span><br><span class="line"><span class="comment">// 添加数据,以键值对的方式</span></span><br><span class="line">m.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;强哥&quot;</span>);</span><br><span class="line"><span class="comment">// 获取数据</span></span><br><span class="line">m.<span class="title function_">get</span>(key);</span><br><span class="line"><span class="comment">// 删除某个数据</span></span><br><span class="line">m.<span class="title function_">delete</span>(key);</span><br><span class="line"><span class="comment">// 检查是否存在某个值</span></span><br><span class="line">m.<span class="title function_">has</span>(key);</span><br><span class="line"><span class="comment">// 清空数据</span></span><br><span class="line">m.<span class="title function_">clear</span>();</span><br><span class="line"><span class="comment">// 检查map中的内容大小</span></span><br><span class="line">m.<span class="property">size</span>;</span><br></pre></td></tr></table></figure><h2 id="Class实例化对象">Class实例化对象</h2><p>ES5中创建对象的方式：new Object() / 构造函数 / {}</p><p>ES6中可以直接通过class定义类（代替了ES5中的构造函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">   <span class="comment">// 构造器函数</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 实例方法1（不允许使用ES5中的方法,必须使用ES6中的写法,即省略function的写法）</span></span><br><span class="line">    <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;今晚吃什么？&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 实例方法2</span></span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;怎么去？&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;强哥&quot;</span>，<span class="number">18</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">name</span>,per.<span class="property">age</span>);</span><br><span class="line">per.<span class="title function_">eat</span>();</span><br><span class="line">per.<span class="title function_">run</span>();</span><br></pre></td></tr></table></figure><p><strong>class实例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SellBrother</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name,age,gender,phone</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">phone</span> = phone;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">cook</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;红烧肉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">gave</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;送饭来了，请接收&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ge = <span class="keyword">new</span> <span class="title class_">SellBrother</span>(<span class="string">&quot;小黄&quot;</span>,<span class="number">35</span>,<span class="string">&quot;男&quot;</span>,<span class="number">151</span>);</span><br><span class="line">ge.<span class="title function_">cook</span>();</span><br><span class="line">ge.<span class="title function_">gave</span>();</span><br></pre></td></tr></table></figure><h2 id="ES6实现静态成员">ES6实现静态成员</h2><p>属性------静态属性和实例属性</p><p>方法------静态方法和实例方法</p><p>静态成员是构造函数对象的（函数对象上的，直接通过==函数名字点属性名==出来的，</p><p>调用时，静态成员是通过类来调用的，而不是通过实例对象调用的。</p><p><strong>ES5中添加静态成员的方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">age</span>)&#123;</span><br><span class="line">  <span class="comment">// 这个age属于当前的Person的实例对象的属性  </span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;下雨了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 静态属性------通过Person来调用的</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">age</span> = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 静态方法-------也是通过Person来调用的</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property">run</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;快跑啊&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="number">20</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">age</span>); <span class="comment">// 20</span></span><br><span class="line"><span class="comment">// 静态属性调用</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">age</span>); <span class="comment">// 100</span></span><br><span class="line">per.<span class="title function_">eat</span>(); <span class="comment">//下雨了</span></span><br><span class="line"><span class="comment">// 静态方法调用</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">eat</span>(); <span class="comment">// 快跑啊</span></span><br></pre></td></tr></table></figure><p><strong>ES6中添加静态成员的方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">age</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 添加静态属性或方法</span></span><br><span class="line">    <span class="keyword">static</span> name = <span class="string">&quot;人类&quot;</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="title function_">eat</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;人都要吃饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用静态成员的方法</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name</span>);</span><br><span class="line"><span class="title class_">Person</span>.<span class="title function_">eat</span>();</span><br></pre></td></tr></table></figure><h2 id="ES6中实现继承的方法">ES6中实现继承的方法</h2><p><strong>ES5中实现继承的方式（==借用构造函数==实现继承和==改变原型指向==实现继承）</strong></p><p>对象中—proto—,</p><p>函数中prototype</p><p>—proto—的指向必然是所在的实例对象使用的构造函数中的prototype，</p><p>函数也是对象，函数都是Function的实例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通过原型添加方法----实例对象来调用</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;吃饭了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name,age,gender,score</span>)&#123;</span><br><span class="line"> <span class="comment">// 通过借用构造函数的方式来实现继承----属性的阶乘</span></span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>,name,age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">gender</span> = gender;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 改变原型的指向，实现了实例方法的继承</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="comment">// 通过原型添加方法----实例对象来调用</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;好长一段话啊&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;强哥&quot;</span>，<span class="number">18</span>，<span class="string">&quot;男&quot;</span>,<span class="number">100</span>);</span><br><span class="line">stu.<span class="title function_">eat</span>();</span><br><span class="line">stu.<span class="title function_">sayHi</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>ES6中实现继承的方式</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name,age</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name,age,score</span>)&#123;</span><br><span class="line">      <span class="comment">// 这里的super相当于ES5中的Person.call(this,name,age);</span></span><br><span class="line">      <span class="comment">// 继承了Person这个类中的属性，而且是实例属性</span></span><br><span class="line">        <span class="variable language_">super</span>(name,age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">score</span> = score;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stu = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;强哥&quot;</span>,<span class="number">20</span>,<span class="number">50</span>);</span><br><span class="line"><span class="comment">// 实例方法也同样被继承了</span></span><br><span class="line">stu.<span class="title function_">sayHi</span>();</span><br></pre></td></tr></table></figure><h2 id="getter-和-setter方法的设置">getter 和 setter方法的设置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"> <span class="comment">// 当前的这个name属性是使用get进行设置的，也就意味着这个name属性外部通过实例对象仅仅是调用获取该属性  的值而已</span></span><br><span class="line"> <span class="comment">// 只有get，没有set时，外部只能读取   </span></span><br><span class="line"><span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">myName</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">val</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">myName</span> = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">per.<span class="property">name</span> = <span class="string">&quot;强哥&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(per.<span class="property">name</span>);</span><br></pre></td></tr></table></figure><h2 id="数值的扩展">数值的扩展</h2><p><strong>进制数（二进制、八进制、十进制、十六进制）</strong></p><h2 id="对象扩展">对象扩展</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 判断两个值是否完全相等</span></span><br><span class="line"><span class="comment">// 几乎和===一样，但是有些区别：NaN和NaN的问题</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">is</span>(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 对象的合并(不定个数)</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">assign</span>(obj1,obj2,obj3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 直接修改__proto__设置原型对象</span></span><br></pre></td></tr></table></figure><h2 id="深拷贝和浅拷贝">深拷贝和浅拷贝</h2><p>复制对象（数组），依据就是创建的新对象修改是否会影响原来的数组。</p><p>会产生影响的是浅拷贝，不会产生影响的是深拷贝</p><h3 id="浅拷贝">浅拷贝</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// concat 浅拷贝</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;];</span><br><span class="line"><span class="keyword">var</span> newArr = arr.<span class="title function_">concat</span>();</span><br><span class="line">newArr[<span class="number">3</span>].<span class="property">a</span> = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// a:5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// a:5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// slice 浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;];</span><br><span class="line"><span class="keyword">const</span> newArr = arr.<span class="title function_">slice</span>(<span class="number">0</span>);</span><br><span class="line">newArr[<span class="number">3</span>].<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// a:5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr); <span class="comment">// a:5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 扩展运算符 浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,&#123;<span class="attr">a</span>:<span class="number">4</span>&#125;];</span><br><span class="line"><span class="keyword">const</span> newArr = [...arr];</span><br><span class="line">newArr[<span class="number">3</span>].<span class="property">a</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newArr);</span><br></pre></td></tr></table></figure><p>复制对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// assign 浅拷贝</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;guigu&quot;</span>,</span><br><span class="line">    <span class="attr">xueke</span>:[<span class="string">&quot;java&quot;</span>,<span class="string">&quot;大数据&quot;</span>,<span class="string">&quot;前端&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> newObj = &#123;&#125;</span><br><span class="line"><span class="title class_">Object</span>.<span class="property">assign</span> = (newObj,obj);</span><br><span class="line">newObj.<span class="property">xueke</span>[<span class="number">0</span>] = <span class="string">&quot;H5&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newObj);</span><br></pre></td></tr></table></figure><h3 id="深拷贝">深拷贝</h3><h4 id="JSON">JSON</h4><p>JSON.stringify( ) 将js对象转换成字符串，<strong>为了保存和传递</strong>。</p><p>JSON.parse( ) 将JSON格式的字符串，转换为JS对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;guigu&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 将对象转换成字符串</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(school);</span><br><span class="line"><span class="comment">// 将字符串转换成对象</span></span><br><span class="line"><span class="keyword">let</span> newSchool = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时再进行修改，就不会影响原来的对象了</span></span><br><span class="line">newSchool.<span class="property">name</span> = <span class="string">&quot;新对象&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="递归实现深拷贝">递归实现深拷贝</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;guigu&quot;</span>,</span><br><span class="line">    <span class="attr">xueke</span>:[<span class="string">&quot;前端&quot;</span>,<span class="string">&quot;JAVA&quot;</span>,<span class="string">&quot;大数据&quot;</span>,<span class="string">&quot;云计算&quot;</span>],</span><br><span class="line">    <span class="attr">founder</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;刚哥&quot;</span>，</span><br><span class="line">        <span class="attr">age</span>: <span class="number">42</span></span><br><span class="line">    &#125;，</span><br><span class="line">    <span class="attr">improve</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;提高技能&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 思路</span></span><br><span class="line"><span class="keyword">const</span> newSchool = &#123;&#125;;</span><br><span class="line">newSchool.<span class="property">name</span> = school.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line">newSchool.<span class="property">xueke</span> = [];</span><br><span class="line">newSchool.<span class="property">xueke</span>[<span class="number">0</span>] = school.<span class="property">xueke</span>[<span class="number">0</span>];</span><br><span class="line">newSchool.<span class="property">xueke</span>[<span class="number">1</span>] = school.<span class="property">xueke</span>[<span class="number">1</span>];</span><br><span class="line">newSchool.<span class="property">xueke</span>[<span class="number">2</span>] = school.<span class="property">xueke</span>[<span class="number">2</span>];</span><br><span class="line">newSchool.<span class="property">xueke</span>[<span class="number">3</span>] = school.<span class="property">xueke</span>[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">newSchool.<span class="property">founder</span> = &#123;&#125;;</span><br><span class="line">newSchool.<span class="property">founder</span>.<span class="property">name</span> = school.<span class="property">founder</span>.<span class="property">name</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getDataType</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(data).<span class="title function_">slice</span>(<span class="number">8</span>,-<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">data</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> type = <span class="title function_">getDataType</span>(data);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(type);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> container;</span><br><span class="line">    <span class="keyword">if</span>(type === <span class="string">&quot;Array&quot;</span>)&#123;</span><br><span class="line">        container = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(type === <span class="string">&quot;Object&quot;</span>)&#123;</span><br><span class="line">        container = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> data)&#123;</span><br><span class="line">        <span class="keyword">let</span> t = <span class="title function_">getDataType</span>(data[i]);</span><br><span class="line">        <span class="keyword">if</span>(t === <span class="string">&quot;Array&quot;</span> || t === <span class="string">&quot;Object&quot;</span>)&#123;</span><br><span class="line">            container[i] = <span class="title function_">deepClone</span>(data[i]);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(t === <span class="string">&quot;Function&quot;</span>)&#123;</span><br><span class="line">            container[i] = data[i].<span class="title function_">bind</span>(container);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            container[i] = data[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> container;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Less">Less</h2><h4 id="嵌套">嵌套</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 嵌套</span></span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">min-height</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="comment">// 嵌套</span></span><br><span class="line">    <span class="selector-tag">header</span>&#123;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//直接子元素</span></span><br><span class="line">    &gt; <span class="selector-tag">section</span>&#123;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">position</span>: relative;</span><br><span class="line">        <span class="comment">// 伪元素</span></span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">            <span class="attribute">content</span>:<span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="attribute">position</span>:absolute;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">5px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="selector-class">.left</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">70%</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">            <span class="attribute">background</span>:<span class="number">#789</span>;</span><br><span class="line">            <span class="comment">// 设置hover样式</span></span><br><span class="line">            <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">                <span class="attribute">background</span>:yellow;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//媒体查询</span></span><br><span class="line">            <span class="comment">// &gt;=1200px</span></span><br><span class="line">            <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">1200px</span>)&#123;</span><br><span class="line">                 <span class="attribute">background</span>: yellowgreen;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// &gt;=992px &amp;&amp; &lt;=1200px</span></span><br><span class="line">            <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1200px</span>) <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">992</span>)&#123;</span><br><span class="line">                 <span class="attribute">background</span>: skyblue;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// &lt;=992px</span></span><br><span class="line">            <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">992px</span>)&#123;</span><br><span class="line">                 <span class="attribute">background</span>: orange;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="混合">混合</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用混合</span></span><br><span class="line"><span class="selector-class">.header</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span>&#123;</span><br><span class="line">    <span class="comment">// 调用了header里面的宽高</span></span><br><span class="line">    <span class="selector-class">.header</span>();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不带输出的混合</span></span><br><span class="line"><span class="selector-class">.center</span>()&#123; <span class="comment">// 谁用谁就调用它</span></span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 带参数混合</span></span><br><span class="line"><span class="selector-class">.bg</span>(<span class="variable">@color</span>)&#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.h</span>(<span class="variable">@height</span>)&#123;</span><br><span class="line">    <span class="attribute">height</span>:<span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">footer</span>&#123;</span><br><span class="line">    <span class="selector-class">.bg</span>(<span class="number">#798</span>);</span><br><span class="line">    <span class="selector-class">.h</span>(<span class="number">100px</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 条件混合</span></span><br><span class="line"><span class="variable">@flag</span> = <span class="number">1</span>;</span><br><span class="line"><span class="selector-class">.border</span>(<span class="variable">@border</span>)<span class="keyword">when</span>(<span class="variable">@flag</span> = <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">2px</span> solid <span class="variable">@color</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#test</span>&#123;</span><br><span class="line">    <span class="selector-class">.h</span>(<span class="number">100px</span>);</span><br><span class="line">    <span class="selector-class">.bg</span>(<span class="number">#aef</span>);</span><br><span class="line">    <span class="selector-class">.border</span>(<span class="number">#145</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="变量">变量</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以使用变量</span></span><br><span class="line"><span class="comment">// 变量声明</span></span><br><span class="line"><span class="variable">@color:</span> <span class="number">#aef</span>；</span><br><span class="line"><span class="variable">@height</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="selector-tag">header</span>&#123;</span><br><span class="line">   <span class="attribute">background</span>: <span class="variable">@color</span>;</span><br><span class="line">   <span class="attribute">height</span>: <span class="variable">@height</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量插值</span></span><br><span class="line"><span class="variable">@selector:</span> #section;</span><br><span class="line"><span class="variable">@&#123;selector&#125;</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">400px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#899</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 变量拼接</span></span><br><span class="line"><span class="comment">// section,footer&#123; &#125;</span></span><br><span class="line"><span class="variable">@one:</span>section;</span><br><span class="line"><span class="variable">@two:</span>footer;</span><br><span class="line"><span class="variable">@s:</span><span class="string">~&#x27;@&#123;one&#125;,@&#123;two&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">@&#123;s&#125;</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 四则运算(单位以前面的一个为准)</span></span><br><span class="line"><span class="selector-tag">header</span>&#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span> + <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件导入">文件导入</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;button&quot;</span>;<span class="comment">// 直接写文件名就可以，不用家后缀.css</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">button</span>&#123;</span><br><span class="line">    <span class="selector-class">.btn</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在button.css文件中，</span></span><br><span class="line"><span class="selector-class">.btn</span>()&#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">12px</span>;</span><br><span class="line">    <span class="attribute">border</span>: none;</span><br><span class="line">    <span class="attribute">outline</span>:none;</span><br><span class="line">    <span class="attribute">border-radius</span>:<span class="number">5px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Less的内置函数">Less的内置函数</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ceil向上取整, floor 向下取整</span></span><br><span class="line"><span class="selector-tag">header</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">ceil</span>(<span class="number">100px</span>/<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="built_in">floor</span>(<span class="number">100</span>/<span class="number">6px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// percentage将结果转成百分比</span></span><br><span class="line"><span class="variable">@color:</span><span class="number">#980</span>;</span><br><span class="line"><span class="selector-tag">section</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="built_in">percentage</span>(<span class="number">1</span>/<span class="number">3</span>);</span><br><span class="line"><span class="comment">// 颜色操作函数</span></span><br><span class="line"><span class="comment">// lighten 颜色变浅，darken 颜色变深</span></span><br><span class="line"><span class="comment">//    background: lighten(@color,10%);</span></span><br><span class="line"><span class="comment">//    background: darken(rgb(90,80,70),20%);</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">// fadein 改变颜色的透明度（逐渐加深），fadeout（逐渐变透明）</span></span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">fadein</span>(<span class="built_in">rgba</span>(<span class="number">100</span>,<span class="number">200</span>,<span class="number">120</span>,<span class="number">0.4</span>),<span class="number">10%</span>)； <span class="comment">// rgba(100200,120,0.5)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Map">Map</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@color:</span> <span class="number">#379</span>;</span><br><span class="line"><span class="selector-id">#color</span>()&#123;</span><br><span class="line">    base: @<span class="attribute">color;</span></span><br><span class="line"><span class="attribute">    abc</span>:<span class="built_in">darken</span>(<span class="variable">@color</span>,<span class="number">10%</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="封装（Bootstrap）">封装（Bootstrap）</h4><h4 id="栅格系统容器的实现">栅格系统容器的实现</h4><h2 id="JavaScript中的错误对象">JavaScript中的错误对象</h2><p>JavaScript定义了7种错误类型：</p><ol><li>Error错误</li><li>EvalError全局错误</li><li>RangeError范围错误</li><li>ReferenceError引用错误</li><li>SyntaxError语法错误</li><li>TypeError类型错误</li><li>URIError编码错误</li></ol><p><strong>Error</strong></p><p>基础类，其他错误类型都继承自该类型。很少见，如果有也是浏览器抛出的。</p><p><strong>EvalError</strong>全局错误</p><p>在使用eval()函数时发生异常时抛出的错误。</p><p><strong>TypeError</strong></p><p>类型错误，对象表示值的类型非预期类型时发生的错误。</p><p>当传入函数的操作数或参数的类型并非操作符或函数所预期的类型时，会抛出这个错误</p><p><strong>ReferenceError</strong></p><p>引用错误，对象表明一个不存在的变量被引用。当你尝试引用一个未被定义的变量时，将会抛出这个错误</p><p><strong>RangeError</strong></p><p>试图传递一个number参数给一个范围内不包含该number的函数时会引发这个错误</p><p><strong>SyntaxError</strong></p><p>对象尝试解析语法上不合法的代码时引发的错误，可能是丢失运算符或者转译字符等。</p>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端300+实用工具分享【转载】</title>
      <link href="/posts/201.html"/>
      <url>/posts/201.html</url>
      
        <content type="html"><![CDATA[<div class="note success modern"><p>本文内容来自B站UP主@技术胖的视频：<a href="https://www.bilibili.com/video/BV1ke4y1v7Xd/?vd_source=796b2f6a87caf85c1a60db9e777441a2">前端老司机 300+实用工具分享</a></p></div><div class="note info flat"><p>仅用于个人交流与学习，如涉及侵权请联系站长删除！</p></div><h2 id="Javascript">Javascript</h2><h3 id="工具">工具</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>Underscore.js<br>一套完善的函数式编程的接口，更方便地在JavaScript中实现函数式编程<br><a href="https://underscorejs.org/">https://underscorejs.org/</a></li><li>fastclick<br>用于消除物理点击和click移动浏览器上事件触发之间的 300 毫秒延迟<br><a href="https://github.com/ftlabs/fastclick">https://github.com/ftlabs/fastclick</a></li><li>Lodash<br>一致性、模块化、高性能的 JavaScript 实用工具库<br><a href="https://lodash.com/">https://lodash.com/</a></li><li>crypto-js<br>加密标准的 JavaScript 库。<br><a href="https://github.com/brix/crypto-js">https://github.com/brix/crypto-js</a></li><li>zxcvbn<br>JavaScript密码强度估算库<br><a href="https://github.com/dropbox/zxcvbn">https://github.com/dropbox/zxcvbn</a></li><li>zxcvbn-ts<br>支持Typescript的密码强度估算库<br><a href="https://github.com/zxcvbn-ts/zxcvbn">https://github.com/zxcvbn-ts/zxcvbn</a></li><li>clipboard.js<br>将文本复制到剪贴板的轻量级JS 库<br><a href="https://clipboardjs.com/">https://clipboardjs.com/</a></li><li>tesseract.js<br>Javascript的OCR引擎，在浏览器离线识别图片中的文字<br><a href="https://tesseract.projectnaptha.com/">https://tesseract.projectnaptha.com/</a></li><li>number-precision<br>小而快的库，用于精确地进行加法、减法、乘法和除法运算<br><a href="https://github.com/nefe/number-precision">https://github.com/nefe/number-precision</a></li><li>fingerprintjs<br>具有高准确度和稳定性的浏览器指纹库<br><a href="https://fingerprint.com/">https://fingerprint.com/</a></li><li>ViteShot<br>基于Vite的快速简单的截图工具。<br><a href="https://viteshot.com/">https://viteshot.com/</a></li><li>Valine<br>快速、简洁且高效的无后端评论系统<br><a href="https://valine.js.org/">https://valine.js.org/</a></li><li>cnpm<br>淘宝提供的一个完整 <a href="http://npmjs.org">npmjs.org</a> 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步<br><a href="https://npmmirror.com/">https://npmmirror.com/</a></li><li>yarn<br>快速、可靠和安全的依赖管理<br><a href="https://yarnpkg.com/">https://yarnpkg.com/</a></li><li>responsively-app<br>一种改进的 Web 浏览器，有助于响应式 Web 开发。Web 开发人员必须拥有开发工具<br><a href="https://responsively.app/">https://responsively.app/</a></li><li>javascript-obfuscator<br>功能强大的免费 JavaScript 混淆器，包含多种功能，可为源代码提供保护<br><a href="https://obfuscator.io/">https://obfuscator.io/</a></li><li>Nano ID<br>小巧的、安全的、URL 友好的、独特的 JavaScript 字符串 唯一 ID 生成器<br><a href="https://zelark.github.io/nano-id-cc/">https://zelark.github.io/nano-id-cc/</a></li><li>spy-debugger<br>一站式页面调试、抓包工具。远程调试任何手机浏览器页面，任何手机移动端webview（如：微信，HybridApp等）。支持HTTP/HTTPS，无需USB连接设备<br><a href="https://responsively.app/">https://responsively.app/</a></li><li>fuite<br>用于查找 Web 应用程序中的内存泄漏的工具<br><a href="https://github.com/nolanlawson/fuite">https://github.com/nolanlawson/fuite</a></li><li>qs<br>查询字符串解析和字符串化库<br><a href="https://github.com/ljharb/qs">https://github.com/ljharb/qs</a></li><li>js-cookie<br>用于处理 cookie 的简单、轻量级 JavaScript API<br><a href="https://github.com/js-cookie/js-cookie">https://github.com/js-cookie/js-cookie</a></li><li>tinymce<br>排名第一的可定制、可扩展和灵活的富文本编辑器<br><a href="https://www.tiny.cloud/">https://www.tiny.cloud/</a></li><li>html2canvas<br>允许在用户浏览器上对网页或其部分进行“截图”<br><a href="https://html2canvas.hertzen.com/">https://html2canvas.hertzen.com/</a></li><li>shepherd<br>引导用户浏览您的应用<br><a href="https://shepherdjs.dev/">https://shepherdjs.dev/</a></li><li>tinykeys<br>极小的键盘事件监听库<br><a href="https://jamiebuilds.github.io/tinykeys/">https://jamiebuilds.github.io/tinykeys/</a></li><li>ag-grid<br>用于构建企业应用程序的最佳 JavaScript 数据表<br><a href="https://www.ag-grid.com/">https://www.ag-grid.com/</a></li><li>tui.calendar<br>功能齐全的 JavaScript 日程表<br><a href="https://ui.toast.com/tui-calendar">https://ui.toast.com/tui-calendar</a></li><li>screenfull<br>用于跨浏览器使用 JavaScript Fullscreen API 的简单包装器<br><a href="https://sindresorhus.com/screenfull/">https://sindresorhus.com/screenfull/</a></li><li>Fuse.js<br>JavaScript 中的轻量级模糊搜索<br><a href="https://fusejs.io/">https://fusejs.io/</a></li><li>i18next<br>用于浏览器或任何其他 javascript 环境（例如 Node.js、Deno）的国际化框架<br><a href="https://www.i18next.com/">https://www.i18next.com/</a></li><li>JsBarcode<br>适用于 Web 和 Node.js 的易于使用但功能强大的条形码生成器<br><a href="https://lindell.me/JsBarcode/">https://lindell.me/JsBarcode/</a></li><li>path-to-regexp<br>将 <code>/user/:name</code> 等路径字符串转换为正则表达式<br><a href="https://github.com/pillarjs/path-to-regexp">https://github.com/pillarjs/path-to-regexp</a></li><li>await-to-js<br>异步等待包装器，无需 try-catch 即可轻松处理错误<br><a href="https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/">https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/</a></li><li>md5<br>用 MD5 散列消息的 JavaScript 函数<br><a href="https://github.com/pvorb/node-md5">https://github.com/pvorb/node-md5</a></li><li>mitt.js<br>它足够小，仅有200bytes，其次支持全部事件的监听和批量移除，替代EventBus<br><a href="https://npm.im/mitt">https://npm.im/mitt</a></li><li>js-spark-md5<br>MD5 算法的快速 md5 实现<br><a href="https://github.com/satazor/js-spark-md5">https://github.com/satazor/js-spark-md5</a></li><li>nano<br>小型（130 字节）、安全、URL 友好、唯一的 JavaScript 字符串 ID 生成器<br><a href="https://zelark.github.io/nano-id-cc/">https://zelark.github.io/nano-id-cc/</a></li><li>jsPDF<br>用 JavaScript 生成 PDF<br><a href="https://parall.ax/products/jspdf">https://parall.ax/products/jspdf</a></li><li>ua-parser-js<br>从User-Agen中检测浏览器、引擎、操作系统、CPU 和设备类型/型号，占用空间相对较小（压缩后约 17KB，压缩后约 6KB），支持浏览器和 node.js 环境<br><a href="http://faisalman.github.io/ua-parser-js/">http://faisalman.github.io/ua-parser-js/</a></li><li>togetherjs<br>网站添加实时协作功能的JavaScript库，两个人可以在同一页面上进行交互，查看彼此的光标、编辑并一起浏览网站<br><a href="https://togetherjs.com/">https://togetherjs.com/</a></li><li>Clusterize.js<br>开源的长列表渲染库，轻量级的原生大数据量展示<br><a href="https://clusterize.js.org/">https://clusterize.js.org/</a></li><li>crypto-js-wasm<br>加密标准的 javascript 库，比 crypto-js快16 倍<br><a href="https://github.com/originjs/crypto-js-wasm">https://github.com/originjs/crypto-js-wasm</a></li><li>pdfkit<br>用于 Node 和浏览器的 JavaScript PDF 生成库<br><a href="http://pdfkit.org/">http://pdfkit.org/</a></li><li>zx<br>使用js编写更便捷shell脚本<br><a href="https://www.npmjs.com/package/zx">https://www.npmjs.com/package/zx</a></li><li>NProgress.js<br>适用于应用程序的进度条，受 Google、YouTube 和 Medium 的启发<br><a href="https://ricostacruz.com/nprogress/">https://ricostacruz.com/nprogress/</a></li></ul>              </div>            </details><h3 id="可视化">可视化</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>highlight.js<br>JavaScript 语法高亮器，具有语言自动检测和零依赖项<br><a href="https://highlightjs.org/">https://highlightjs.org/</a></li><li>Drawflow<br>创建简单的流程库<br><a href="https://jerosoler.github.io/Drawflow/">https://jerosoler.github.io/Drawflow/</a></li><li>tui.image-editor<br>HTML5 Canvas 的全功能图像编辑器。它易于使用并提供强大的过滤器<br><a href="https://ui.toast.com/tui-image-editor">https://ui.toast.com/tui-image-editor</a></li><li>viewerjs<br>JavaScript 图像查看器<br><a href="https://fengyuanchen.github.io/viewerjs/">https://fengyuanchen.github.io/viewerjs/</a></li><li>prism.js<br>轻量级、健壮、优雅的语法高亮库<br><a href="https://prismjs.com/">https://prismjs.com/</a></li><li>fabric.js<br>功能强大且简单的 Canvas库，轻松处理 HTML5 画布元素。是画布元素之上的交互式对象模型，也是一个SVG-to-canvas 解析器<br><a href="http://fabricjs.com/">http://fabricjs.com/</a></li><li>fullPage.js<br>用于创建全屏滚动网站（也称为单页网站或一页网站），并在该网站的各个部分内添加横向滑块<br><a href="https://alvarotrigo.com/fullPage/">https://alvarotrigo.com/fullPage/</a></li><li>opentype.js<br>OpenType 和 TrueType 字体解析器和编写器。它允许您从浏览器或 node.js访问文本的字母形式<br><a href="https://opentype.js.org/">https://opentype.js.org/</a></li><li>icones.js<br>具有即时搜索功能的图标资源管理器，由 Iconify 提供支持<br><a href="https://icones.js.org/">https://icones.js.org/</a></li><li>reveal.js<br>创建功能齐全且精美的演示文稿<br><a href="https://revealjs.com/">https://revealjs.com/</a></li><li>carbon<br>创建和共享源代码的精美图像<br><a href="https://carbon.now.sh/">https://carbon.now.sh/</a></li><li>lucky-canvas<br>基于 TS + Canvas 开发的【大转盘 / 九宫格 / 老虎机】抽奖插件， 一套源码适配多端框架 JS / Vue / React / Taro / UniApp / 微信小程序等<br><a href="https://100px.net/">https://100px.net/</a></li><li>Darkmode.js<br>在几秒钟内为您的网站添加暗模式/夜间模式<br><a href="https://darkmodejs.learn.uno/?_360safeparam=8406218">https://darkmodejs.learn.uno/?_360safeparam=8406218</a></li><li>ECharts<br>强大的交互式图表和浏览器数据可视化库<br><a href="https://echarts.apache.org/zh/index.html">https://echarts.apache.org/zh/index.html</a></li><li>PixiJS<br>使用最快，最灵活的2D WebGL渲染器创建精美的内容<br><a href="https://pixijs.com/">https://pixijs.com/</a></li><li>AntV - G2<br>数据驱动，高度易用，可扩展的可视化图形语法。<br><a href="https://g2plot.antv.vision/zh/">https://g2plot.antv.vision/zh/</a></li><li>ApexCharts.js<br>基于SVG的JavaScript图表库，可使用简单的API构建交互式图表和可视化文件</li><li>OpenLayers<br>高性能，功能丰富的库，用于在Web上创建交互式地图。它可以显示从任何网页上的任何来源加载的地图图块，矢量数据和标记<br><a href="https://openlayers.org/">https://openlayers.org/</a></li><li>Two.js<br>面向现代Web浏览器的二维绘图api，渲染不可知实现相同的API在多种环境中得出：svg，canvas，和webgl<br><a href="https://two.js.org/">https://two.js.org/</a></li><li>Paper.js<br>基于HTML5 Canvas的矢量图形的图形库<br><a href="http://paperjs.org/">http://paperjs.org/</a></li><li>Panolens.js<br>事件驱动的基于WebGL的全景查看器。轻巧而灵活。它建立在Three.JS之上<br><a href="https://pchen66.github.io/Panolens/">https://pchen66.github.io/Panolens/</a></li><li>A-Frame<br>用于构建 3D/AR/VR 体验的 Web 框架<br><a href="https://aframe.io/">https://aframe.io/</a></li><li>mermaid-js<br>以与 Markdown 类似的方式从文本生成图表和流程图<br><a href="https://mermaid-js.github.io/mermaid/">https://mermaid-js.github.io/mermaid/</a></li><li>mo · js<br>为网站添加基于JavaScript的动态图形<br><a href="https://mojs.github.io/">https://mojs.github.io/</a></li><li>trianglify<br>Javascript 库，用于创建独特的、美观的三角形图案<br><a href="http://qrohlf.com/trianglify/">http://qrohlf.com/trianglify/</a></li><li>Babylon.js<br>能强大、美观、简单、开放的游戏和渲染引擎<br><a href="https://www.babylonjs.com/">https://www.babylonjs.com/</a></li><li>Oasis Engine<br>高性能 Web 蚂蚁图形引擎<br><a href="https://oasisengine.cn/">https://oasisengine.cn/</a></li><li>Butterfly<br>基于JS的数据驱动的节点式编排组件库<br><a href="https://butterfly-dag.gitee.io/butterfly-dag/home">https://butterfly-dag.gitee.io/butterfly-dag/home</a></li><li>image-optimizer<br>使用 Electron、Vue 和 Vite 用于优化图像和矢量图形的免费开源工具<br><a href="https://github.com/antonreshetov/image-optimizer">https://github.com/antonreshetov/image-optimizer</a></li><li>Sketchfab<br>需任何插件即可在Web页面里嵌入交互式3D模型<br><a href="https://sketchfab.com/">https://sketchfab.com/</a></li><li>vConsole<br>用于移动网页的轻量级、可扩展的前端开发工具<br><a href="https://github.com/Tencent/vConsole">https://github.com/Tencent/vConsole</a></li><li>swiper<br>免费且最现代的移动触摸滑块，具有硬件加速过渡和惊人的原生行为<br><a href="https://swiperjs.com/">https://swiperjs.com/</a></li><li>Slidev<br>面向开发人员的演示幻灯片<br><a href="https://sli.dev/">https://sli.dev/</a></li><li>konva<br>HTML5 Canvas JavaScript 框架，它支持桌面和移动应用程序的高性能动画、过渡、节点嵌套、分层、过滤、缓存、事件处理等等<br><a href="https://konvajs.org/">https://konvajs.org/</a></li><li>p5.j​​s<br>开源的JavaScript可视化库，processing的js实现版本<br><a href="https://p5js.org/zh-Hans/">https://p5js.org/zh-Hans/</a></li><li>cesium<br>用于世界级 3D 地球仪和地图的开源 JavaScript 库<br><a href="https://cesium.com/platform/cesiumjs/">https://cesium.com/platform/cesiumjs/</a></li><li>driver.js<br>一个轻量级、无依赖的用户引导组件<br><a href="https://kamranahmed.info/driver.js/">https://kamranahmed.info/driver.js/</a></li><li>vanilla-tilt.js<br>平滑的 3D 倾斜 JavaScript 库<br><a href="https://micku7zu.github.io/vanilla-tilt.js/index.html">https://micku7zu.github.io/vanilla-tilt.js/index.html</a></li><li>parallax.js<br>对智能设备的方向引擎响应的视差<br><a href="http://matthew.wagerfield.com/parallax/">http://matthew.wagerfield.com/parallax/</a></li><li>signature_pad<br>基于 HTML5 canvas 的平滑签名绘制<br><a href="http://szimek.github.io/signature_pad/">http://szimek.github.io/signature_pad/</a></li><li>compressorjs<br>JavaScript 图像压缩器<br><a href="https://fengyuanchen.github.io/compressorjs/">https://fengyuanchen.github.io/compressorjs/</a></li><li>eva.js<br>用于创建交互式游戏项目的前端游戏引擎<br><a href="https://eva.js.org/">https://eva.js.org/</a></li><li>d3<br>基于数据来操作文档的JavaScript库<br><a href="https://d3js.org/">https://d3js.org/</a></li></ul>              </div>            </details><h3 id="动画插件">动画插件</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>countUp.js<br>无依赖项的轻量级Javascript类，可用于快速创建以更有趣的方式显示数字数据的动画<br><a href="https://inorganik.github.io/countUp.js/">https://inorganik.github.io/countUp.js/</a></li><li>impress.js<br>CSS3 转换和过渡的强大功能的演示框架<br><a href="https://impress.js.org/">https://impress.js.org/</a></li><li>Anime.js<br>轻量级的 JavaScript 动画库，具有简单而强大的 API<br><a href="https://animejs.com/">https://animejs.com/</a></li><li>tween.js<br>用于简单动画的 JavaScript 补间引擎，包含优化的 Robert Penner 方程<br><a href="http://tweenjs.github.io/tween.js/">http://tweenjs.github.io/tween.js/</a></li><li>Popmotion<br>制作数字、颜色和复杂字符串的动画。该库的主要动画功能只有5kb左右，整个库的容量在12kb左右<br><a href="https://popmotion.io/">https://popmotion.io/</a></li><li>Typed.js<br>打字动画库<br><a href="https://mattboldt.com/demos/typed-js/">https://mattboldt.com/demos/typed-js/</a></li><li>vivus.js<br>在 SVG 上制作绘图动画的 JavaScript 库<br><a href="https://maxwellito.github.io/vivus/">https://maxwellito.github.io/vivus/</a></li><li>ScrollReveal<br>在元素滚入或滚出视口时为其制作动画<br><a href="https://scrollrevealjs.org/">https://scrollrevealjs.org/</a></li><li>canvas-confetti<br>按需 五彩纸屑<br><a href="https://catdad.github.io/canvas-confetti/">https://catdad.github.io/canvas-confetti/</a></li><li>GSAP<br>强大的 JavaScript 工具集，构建适用于所有主流浏览器的高性能动画。动画 CSS、SVG、画布、React、Vue、WebGL、颜色、字符串、运动路径、通用对象<br><a href="https://greensock.com/">https://greensock.com/</a></li><li>lax.js<br>轻量级（&lt;4kb gzipped）香草 JavaScript 库，可在您滚动时创建流畅美观的动画<br><a href="https://github.com/alexfoxy/lax.js">https://github.com/alexfoxy/lax.js</a></li><li>animxyz<br>AnimXYZ 可帮助您为您的网站创建、自定义和组合动画<br><a href="https://animxyz.com/">https://animxyz.com/</a></li><li>svg.js<br>用于操作和动画 SVG 的轻量级库<br><a href="https://svgjs.dev/docs/3.0/">https://svgjs.dev/docs/3.0/</a></li><li>zdog<br>用于画布和 SVG 的扁平、圆形、设计师友好的伪 3D 引擎<br><a href="https://zzz.dog/">https://zzz.dog/</a></li><li>dynamics.js<br>用于创建基于物理的动画的 JavaScript 库<br><a href="http://dynamicsjs.com/">http://dynamicsjs.com/</a></li><li>Proton<br>Javascript粒子动画库<br><a href="https://drawcall.github.io/Proton/">https://drawcall.github.io/Proton/</a></li></ul>              </div>            </details><h3 id="文件操作">文件操作</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>SheetJS<br>可读取和导出excel的工具库，功能强大，支持格式众多，支持xls、xlsx、ods(一种OpenOffice专有表格文件格式)等十几种格式<br><a href="https://sheetjs.com/">https://sheetjs.com/</a></li><li>revogrid<br>具有高级定制功能的强大虚拟数据表格<br><a href="https://revolist.github.io/revogrid/">https://revolist.github.io/revogrid/</a></li><li>FileSaver.js<br>客户端保存文件的解决方案<br><a href="https://eligrey.com/blog/saving-generated-files-on-the-client-side/">https://eligrey.com/blog/saving-generated-files-on-the-client-side/</a></li><li>jszip<br>使用 Javascript 创建、读取和编辑 .zip 文件<br><a href="https://stuk.github.io/jszip/">https://stuk.github.io/jszip/</a></li><li>Print.js<br>帮助从网络打印的小型 javascript 库<br><a href="https://printjs.crabbly.com/">https://printjs.crabbly.com/</a></li><li>mammoth.js<br>将 Word 文档（.docx 文件）转换为 HTML<br><a href="https://github.com/mwilliamson/mammoth.js">https://github.com/mwilliamson/mammoth.js</a></li><li>StreamSaver.js<br>直接异步将流写入文件系统，适合大文件下载<br><a href="https://jimmywarting.github.io/StreamSaver.js/example.html">https://jimmywarting.github.io/StreamSaver.js/example.html</a></li><li>PDF.js<br>使用 HTML5 构建的可移植文档格式 (PDF) 查看器<br><a href="https://github.com/mozilla/pdf.js">https://github.com/mozilla/pdf.js</a></li><li>pdfmake<br>用于服务器端和客户端的 PDF 文档生成库<br><a href="http://pdfmake.org/">http://pdfmake.org/</a></li><li>pdf-lib<br>在任何 JavaScript 环境中创建和修改 PDF 文档<br><a href="https://pdf-lib.js.org/">https://pdf-lib.js.org/</a></li><li>uppy<br>JavaScript 文件上传器<br><a href="https://uppy.io/">https://uppy.io/</a></li></ul>              </div>            </details><h3 id="音视频">音视频</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>moovie.js<br>专注于电影的 HTML5 播放器<br><a href="https://mooviejs.com/">https://mooviejs.com/</a></li><li>meyda.js<br>JavaScript 音频特征提取库<br><a href="https://meyda.js.org/">https://meyda.js.org/</a></li><li>howler.js<br>Javascript 音频库<br><a href="https://howlerjs.com/">https://howlerjs.com/</a></li><li>flv.js<br>HTML5 FLV 播放器<br><a href="https://github.com/Bilibili/flv.js/">https://github.com/Bilibili/flv.js/</a></li><li>plyr<br>HTML5、YouTube 和 Vimeo 播放器<br><a href="https://plyr.io/">https://plyr.io/</a></li><li>xgplayer 西瓜播放器<br>网络视频和音频播放器库<br><a href="https://h5player.bytedance.com/">https://h5player.bytedance.com/</a></li><li>hls.js<br>可在支持 MSE 的浏览器中播放 HLS<br><a href="https://hls-js.netlify.app/demo/">https://hls-js.netlify.app/demo/</a></li></ul>              </div>            </details><h3 id="智能化">智能化</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>tensorflow.js<br>用于在浏览器和 Node.js 训练和部署机器学习模型<br><a href="https://tensorflow.google.cn/">https://tensorflow.google.cn/</a></li><li>face-api.js<br>用于在浏览器和 nodejs 中使用 tensorflow.js 进行人脸检测和人脸识别的 JavaScript API<br><a href="https://github.com/justadudewhohacks/face-api.js/">https://github.com/justadudewhohacks/face-api.js/</a></li><li>tracking.js<br>将不同的计算机视觉算法和技术引入浏览器环境。通过使用现代HTML5规范，我们使您能够进行实时颜色跟踪，人脸检测等<br><a href="https://trackingjs.com/">https://trackingjs.com/</a></li><li>pose-animator<br>识别出人类的表情变化和肢体动作，并将其映射到2D矢量图型上<br><a href="https://github.com/yemount/pose-animator">https://github.com/yemount/pose-animator</a></li><li>ar-cutpaste<br>手机上预装工具，对着目标物体拍摄，即可将图像复制粘贴进 Photoshop<br><a href="https://github.com/cyrildiagne/ar-cutpaste">https://github.com/cyrildiagne/ar-cutpaste</a></li><li>imgcook<br>专注以 Sketch、PSD、静态图片等形式的视觉稿作为输入，通过智能化技术一键生成可维护的前端代码<br><a href="https://www.imgcook.com/">https://www.imgcook.com/</a></li><li>nsfwjs<br>帮助快速识别不合时宜的图像<br><a href="https://nsfwjs.com/">https://nsfwjs.com/</a></li></ul>              </div>            </details><h3 id="编辑器">编辑器</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>Vditor<br>Markdown 编辑器，支持所见即所得、即时渲染（类似 Typora）和分屏预览模式，由 TypeScript 实现，支持原生 JavaScript、Vue、React、Angular，提供桌面版<br><a href="https://b3log.org/vditor/">https://b3log.org/vditor/</a></li><li>monaco-editor<br>为VS Code提供支持的代码编辑器<br><a href="https://microsoft.github.io/monaco-editor/">https://microsoft.github.io/monaco-editor/</a></li><li>bytemd<br>用 Svelte 构建的 Markdown 编辑器组件。它也可以用于其他库/框架，例如 React、Vue 和 Angular<br><a href="https://bytemd.netlify.app/">https://bytemd.netlify.app/</a></li><li>wangEditor<br>Typescript 开发的 Web 富文本编辑器， 轻量、简洁、易用、开源免费<br><a href="https://www.wangeditor.com/">https://www.wangeditor.com/</a></li><li>mavonEditor<br>Markdown 编辑器，支持多种个性化功能<br><a href="http://www.mavoneditor.com/">http://www.mavoneditor.com/</a></li><li>quill<br>API 驱动的富文本编辑器<br><a href="https://quilljs.com/">https://quilljs.com/</a></li><li>codemirror5<br>浏览器内代码编辑器<br><a href="https://codemirror.net/">https://codemirror.net/</a></li><li>marked<br>用于解析 Markdown 的编译器<br><a href="https://marked.js.org/">https://marked.js.org/</a></li><li>tiptap<br>完全控制文本编辑器体验。它是可定制的，带有大量扩展，是开源的，并且有大量的文档<br><a href="https://tiptap.dev/">https://tiptap.dev/</a></li></ul>              </div>            </details><h3 id="2D-3D">2D 3D</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>dat.gui<br>在 JavaScript 中更改变量的轻量级图形用户界面<br><a href="https://github.com/dataarts/dat.gui">https://github.com/dataarts/dat.gui</a></li><li>Three.js<br>易于使用、轻量级、跨浏览器的通用 3D 库<br><a href="https://threejs.org/">https://threejs.org/</a></li><li>Draco 3D<br>缩和解压缩 3D 几何网格和点云。它旨在改进 3D 图形的存储和传输<br><a href="https://google.github.io/draco/">https://google.github.io/draco/</a></li><li>stats.js<br>JavaScript 性能监视器<br><a href="http://mrdoob.github.io/stats.js/">http://mrdoob.github.io/stats.js/</a></li><li>matter-js<br>一个用于 web 的 JavaScript 2D 物理引擎<br><a href="https://brm.io/matter-js/">https://brm.io/matter-js/</a></li><li>Oimo.js<br>用于 javascript 的轻量级 3d 物理引擎，是OimoPhysics<br>的完整 javascript 转换<br><a href="http://lo-th.github.io/Oimo.js/#basic">http://lo-th.github.io/Oimo.js/#basic</a></li><li>ammo.js<br>使用 Emscripten 将 Bullet 物理引擎直接移植到 JavaScript<br><a href="https://github.com/kripken/ammo.js">https://github.com/kripken/ammo.js</a></li></ul>              </div>            </details><h3 id="其他常用">其他常用</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>Auto.js Pro<br>Android上支持Node.js的JavaScript自动化和编程软件<br><a href="https://pro.autojs.org/">https://pro.autojs.org/</a></li><li>Inquirer.js<br>实现命令行交互式界面的工具集合<br><a href="https://github.com/SBoudrias/Inquirer.js/">https://github.com/SBoudrias/Inquirer.js/</a></li><li>chalk<br>命令行美化工具<br><a href="https://github.com/chalk/chalk">https://github.com/chalk/chalk</a></li><li>Timer.js<br>简单而轻量级的库，无需任何依赖项来创建和管理计时器<br><a href="https://github.com/husa/timer.js">https://github.com/husa/timer.js</a></li><li>day.js<br>极简的 JavaScript 库，它使用与 Moment.js 兼容的 API 为现代浏览器解析、验证、操作和显示日期和时间<br><a href="https://day.js.org/">https://day.js.org/</a></li><li><a href="http://Socket.io">Socket.io</a><br>支持基于事件的实时双向通信<br><a href="https://socket.io/">https://socket.io/</a></li><li>The Algorithms<br>GitHub 最大的开源算法库<br><a href="https://the-algorithms.com/">https://the-algorithms.com/</a></li><li>log-symbols<br>各种日志级别的彩色符号<br><a href="https://github.com/sindresorhus/log-symbols">https://github.com/sindresorhus/log-symbols</a></li><li>plop<br>微型生成器框架，使整个团队可以轻松地创建具有一定一致性的文件<br><a href="https://plopjs.com/">https://plopjs.com/</a></li><li>prompts<br>轻量级、美观且用户友好的交互式提示<br><a href="https://github.com/terkelg/prompts">https://github.com/terkelg/prompts</a></li><li>shelljs<br>基于 Node.js API 的 Unix shell 命令的可移植（Windows/Linux/macOS）实现<br><a href="https://www.npmjs.com/package/shelljs">https://www.npmjs.com/package/shelljs</a></li><li>figlet<br>浏览器控制台个性化输出<br><a href="https://github.com/patorjk/figlet.js">https://github.com/patorjk/figlet.js</a></li><li>picocolors<br>终端修改输出字符样式的 npm 包，比 chalk 体积小 14 倍，速度快 2 倍<br><a href="https://github.com/alexeyraspopov/picocolors">https://github.com/alexeyraspopov/picocolors</a></li><li>cac<br>用于构建 CLI 应用程序的 JavaScript 库，体积数倍小于 commander 和 yargs<br><a href="https://github.com/cacjs/cac">https://github.com/cacjs/cac</a></li><li>npm-run-all<br>用于并行或顺序运行多个 npm 脚本的 CLI 工具<br><a href="https://github.com/mysticatea/npm-run-all">https://github.com/mysticatea/npm-run-all</a></li><li>node-semver<br>语义化版本号管理的 npm 库，比如 判断一个版本是否合法，判断版本号命名是否正确，两个版本谁大谁小之类 等<br><a href="https://github.com/npm/node-semver">https://github.com/npm/node-semver</a></li><li>puppeteer<br>在浏览器中手动执行的大多数操作都可以使用 Puppeteer 完成<br>生成页面的屏幕截图和 PDF。<br>抓取 SPA（单页应用程序）并生成预渲染内容<br>自动化表单提交、UI 测试、键盘输入等。<br><a href="https://pptr.dev/">https://pptr.dev/</a></li><li>temir<br>用vue组件来编写命令行界面应用的工具<br><a href="https://github.com/webfansplz/temir">https://github.com/webfansplz/temir</a></li><li>enquirer<br>适用于 Node.js 的时尚、直观且用户友好的提示<br><a href="https://github.com/enquirer/enquirer">https://github.com/enquirer/enquirer</a></li></ul>              </div>            </details><h2 id="跨平台">跨平台</h2><h3 id="框架">框架</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>uni-app<br>使用 Vue.js 开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序等13个平台<br><a href="https://uniapp.dcloud.io/">https://uniapp.dcloud.io/</a></li><li>react-native<br>使用 React 构建移动应用程序<br><a href="https://reactnative.dev/">https://reactnative.dev/</a></li><li>Flutter<br>Google 的开源框架，用于构建美观、本机编译的多平台应用程序<br><a href="https://flutter.dev/">https://flutter.dev/</a></li><li>chameleon<br>一套代码运行多端，一端所见即多端所见<br><a href="http://cml.didi.cn/">http://cml.didi.cn/</a></li><li>Taro<br>遵循 React 语法规范的多端统一开发框架<br><a href="https://taro.zone/">https://taro.zone/</a></li><li>Electron<br>使用 JavaScript，HTML 和 CSS 构建跨平台的桌面应用程序<br><a href="https://www.electronjs.org/">https://www.electronjs.org/</a></li><li>MicroApp<br>京东零售推出的微前端框架。基于webcomponent-like渲染，从组件思维实现微前端，旨在降低上手难度，提高工作效率<br><a href="https://micro-zoe.github.io/micro-app/">https://micro-zoe.github.io/micro-app/</a></li><li>Tauri<br>使用 Web 前端构建更小、更快、更安全的桌面应用程序<br><a href="https://tauri.studio/">https://tauri.studio/</a></li><li>Hippy<br>跨平台的开发框架，旨在帮助开发者编写一次，运行在三个平台（iOS、Android 和 Web）上<br><a href="https://hippyjs.org/#/">https://hippyjs.org/#/</a></li><li>无界<br>基于 Web Components + iframe 微前端框架，具备成本低、速度快、原生隔离、功能强等一系列优点。<br><a href="https://wujie-micro.github.io/doc/">https://wujie-micro.github.io/doc/</a></li><li>qiankun<br>微前端的实现，基于single-spa。它旨在使构建生产就绪的微前端架构系统变得更加容易和轻松。<br><a href="https://qiankun.umijs.org/zh">https://qiankun.umijs.org/zh</a></li></ul>              </div>            </details><h3 id="Flutter">Flutter</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>pub.dev<br>Dart和Flutter应用程序的官方包存储库<br><a href="https://pub.dev/">https://pub.dev/</a></li><li>awesome-flutter-plugins<br>尽可能收集好用的Flutter插件以便更效率的开发<br><a href="https://github.com/jahnli/awesome-flutter-plugins">https://github.com/jahnli/awesome-flutter-plugins</a></li><li>flutter-widget.live<br>使用 Flutter for web 构建的网站，用于在线实时预览小部件示例。<br><a href="https://flutter-widget.live/basics/introduction">https://flutter-widget.live/basics/introduction</a></li><li>google Icons<br>Google Material Design 图标<br><a href="https://fonts.google.com/icons">https://fonts.google.com/icons</a></li><li>Json To Dart Model<br>Json 转 Dart Model类<br><a href="https://ashamp.github.io/jsonToDartModel/">https://ashamp.github.io/jsonToDartModel/</a></li><li>flutter  awesome<br>很棒的列表，其中包含优秀的 Flutter 库和工具<br><a href="https://flutterawesome.com/">https://flutterawesome.com/</a></li><li>LottieFiles<br>免费 Lottie 动画文件、工具和插件<br><a href="https://lottiefiles.com/">https://lottiefiles.com/</a></li></ul>              </div>            </details><h3 id="Electron">Electron</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>vue-cli-plugin-electron-builde<br>使用Electron轻松构建用于桌面的Vue.js应用<br><a href="https://nklayman.github.io/vue-cli-plugin-electron-builder/">https://nklayman.github.io/vue-cli-plugin-electron-builder/</a></li><li>electron-about-window<br>为Electron 提供 “关于此应用程序” 窗口。<br><a href="https://github.com/rhysd/electron-about-window">https://github.com/rhysd/electron-about-window</a></li><li>nativefier<br>使任何网页成为桌面应用程序<br><a href="https://github.com/nativefier/nativefier">https://github.com/nativefier/nativefier</a></li></ul>              </div>            </details><h3 id="Uniapp">Uniapp</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>Grace UI<br>兼容微信小程序及uni-app的优秀前端框架，以flex布局为基础，提供了丰富的组件及界面库GraceUI<br><a href="https://www.graceui.com/">https://www.graceui.com/</a></li><li>uView<br>全面兼容nvue的uni-app生态框架，全面的组件和便捷的工具<br><a href="https://www.uviewui.com/">https://www.uviewui.com/</a></li><li>ThorUI<br>轻量、简洁、全面的移动端组件库<br><a href="https://thorui.cn/doc/">https://thorui.cn/doc/</a></li></ul>              </div>            </details><h2 id="CSS">CSS</h2><h3 id="动画">动画</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>cssfx<br>精美简单的点击复制 CSS 效果<br><a href="https://cssfx.netlify.app/">https://cssfx.netlify.app/</a></li><li>Twitter Hashflags<br>Twitter 点赞动画<br><a href="https://hashflags.io/">https://hashflags.io/</a></li><li>UI Snippets<br>UI 片段的集合<br><a href="https://ui-snippets.dev/">https://ui-snippets.dev/</a></li><li>SpinKit<br>CSS 动画的加载指示器<br><a href="https://tobiasahlin.com/spinkit/">https://tobiasahlin.com/spinkit/</a></li><li>animate.css<br>强大的预设css3动画库<br><a href="https://animate.style/">https://animate.style/</a></li><li>犸良<br>一站式动效制作平台，通过海量的动效素材以及可视化编辑能力，帮助零基础的用户轻松完成动效制作<br><a href="https://design.alipay.com/emotion">https://design.alipay.com/emotion</a></li><li>animista<br>Css 动画<br><a href="https://animista.net/">https://animista.net/</a></li><li>lordicon<br>功能强大的精心制作的动画图标库<br><a href="https://lordicon.com/">https://lordicon.com/</a></li><li>svg-spinners<br>24 x 24 dp的svg格式loading加载器<br><a href="https://github.com/n3r4zzurr0/svg-spinners">https://github.com/n3r4zzurr0/svg-spinners</a></li><li>magic<br>具有炫酷效果的 CSS3 动画<br><a href="https://www.minimamente.com/project/magic/">https://www.minimamente.com/project/magic/</a></li><li>Hover.css<br>CSS3 驱动的悬停效果，可应用于链接、按钮、徽标、SVG、特色图像等<br><a href="http://ianlunn.github.io/Hover/">http://ianlunn.github.io/Hover/</a></li><li>eva-icons<br>超过 480 个制作精美的开源图标。SVG、Sketch、Web 字体和动画支持<br><a href="https://akveo.github.io/eva-icons/#/">https://akveo.github.io/eva-icons/#/</a></li></ul>              </div>            </details><h3 id="工具-2">工具</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>normalize.css<br>CSS 重置的现代替代方案<br><a href="http://necolas.github.io/normalize.css/">http://necolas.github.io/normalize.css/</a></li><li>Squoosh<br>对比 tinypng 有【更好的】压缩效果<br><a href="https://squoosh.app/">https://squoosh.app/</a></li></ul>              </div>            </details><h3 id="UI">UI</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>Manypixels<br>收集无版权插图的网站，提供 SVG / PNG 格式下载，并且允许更改颜色<br><a href="https://www.manypixels.co/gallery">https://www.manypixels.co/gallery</a></li><li>U钙网<br>免费的LOGO在线设计制作工具<br><a href="https://www.uugai.com/">https://www.uugai.com/</a></li><li>design-blocks<br>一组 170 多个基于 Bootstrap 的设计块，可用于创建干净的现代网站<br><a href="https://froala.com/design-blocks/">https://froala.com/design-blocks/</a></li><li>unDraw<br>精美的 SVG 插画集<br><a href="https://undraw.co/illustrations">https://undraw.co/illustrations</a></li><li>Ira Design<br>通过调配渐变色、搭配手绘组件定制插画<br><a href="https://iradesign.io/gallery/illustrations">https://iradesign.io/gallery/illustrations</a></li><li>lukasz adam<br>免费 SVG 插画<br><a href="https://lukaszadam.com/illustrations">https://lukaszadam.com/illustrations</a></li><li>pixeltrue<br>创建令人叹为观止的项目的插图<br><a href="https://www.pixeltrue.com/packs">https://www.pixeltrue.com/packs</a></li><li>3dicons<br>3d图标库<br><a href="https://3dicons.co/">https://3dicons.co/</a></li><li>css-buttons<br>100 个现代 CSS 按钮<br><a href="https://css-buttons.web.app/">https://css-buttons.web.app/</a></li><li>uiset<br>优质免费的UI设计资源<br><a href="https://uiset.com/">https://uiset.com/</a></li><li>error404<br>404插画页面<br><a href="https://error404.fun/">https://error404.fun/</a></li><li>ui8<br>5,745 个精选设计资源，为您的创意工作流程注入活力<br><a href="https://ui8.net/">https://ui8.net/</a></li></ul>              </div>            </details><h2 id="编程工具">编程工具</h2><h3 id="代码工具">代码工具</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li><a href="http://gitignore.io">gitignore.io</a><br>为项目创建有用的 .gitignore 文件<br><a href="https://www.toptal.com/developers/gitignore">https://www.toptal.com/developers/gitignore</a></li><li>any-rule<br>常用正则大全, 支持web / vscode / idea / Alfred Workflow多平台<br><a href="https://any86.github.io/any-rule/">https://any86.github.io/any-rule/</a></li><li>30-seconds-of-code<br>满足多种语言开发需求的简短代码片段<br><a href="https://www.30secondsofcode.org/">https://www.30secondsofcode.org/</a></li><li>github-readme-stats<br>为 github 自述文件动态生成的统计信息<br><a href="https://github.com/anuraghazra/github-readme-stats">https://github.com/anuraghazra/github-readme-stats</a></li><li>cz-cli<br>规范提交说明的git工具<br><a href="http://commitizen.github.io/cz-cli/">http://commitizen.github.io/cz-cli/</a></li><li>commitlint<br>git commit 校验工具<br><a href="https://commitlint.js.org/#/">https://commitlint.js.org/#/</a></li><li>husky<br>Git hooks 工具，可以防止使用 Git hooks 的一些不好的 commit 或者 push<br><a href="https://typicode.github.io/husky/#/">https://typicode.github.io/husky/#/</a></li><li>lint-staged<br>代码提交之前,进行代码规则检查并尝试修复，能够确保进入git库的代码都是符合代码规则<br><a href="https://github.com/okonet/lint-staged">https://github.com/okonet/lint-staged</a></li><li>anywhere<br>随启随用的静态文件服务器<br><a href="https://github.com/JacksonTian/anywhere">https://github.com/JacksonTian/anywhere</a></li><li>code996<br>统计 Git 项目的 commit 时间分布，进而推导出这个项目的编码工作强度<br><a href="https://hellodigua.github.io/code996/#/">https://hellodigua.github.io/code996/#/</a></li></ul>              </div>            </details><h3 id="图像工具">图像工具</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>bigjpg<br>使用度卷积神经网络。它会将噪点和锯齿的部分进行补充，实现图片的无损放大<br><a href="https://bigjpg.com/">https://bigjpg.com/</a></li><li>jpghd<br>使用人工智能 AI 超分模型和深度学习技术来将低清破损有噪点图片处理成高画质高分辨率图片同时支持破损老照片修复和老照片上色<br><a href="https://jpghd.com/">https://jpghd.com/</a></li><li>bigmp4<br>使用智能 AI 模型，能将视频无损高清放大、增强画质、智能补帧使画面丝滑流畅栩栩如生同时支持黑白视频上色和慢动作<br><a href="https://bigmp4.com/">https://bigmp4.com/</a></li><li>imglarger<br>基于强大的机器学习可在不降低质量的情况下提高图像分辨率<br><a href="https://imglarger.com/">https://imglarger.com/</a></li><li>unscreen<br>智能AI去除视频背景在线神器<br><a href="https://www.unscreen.com/">https://www.unscreen.com/</a></li><li>阿里妈妈创意中心<br>阿里智能文案，智能抠图工具<br><a href="https://chuangyi.taobao.com/">https://chuangyi.taobao.com/</a></li></ul>              </div>            </details><h3 id="文件转换">文件转换</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>ALL TO ALL<br>全类型的在线文件转换平台，免费、快速，无须下载安装任何软件<br><a href="https://www.alltoall.net/">https://www.alltoall.net/</a></li><li>Convertio<br>将文件转换成任意格式<br><a href="https://convertio.co/zh/">https://convertio.co/zh/</a></li></ul>              </div>            </details><h2 id="Vue3生态工具">Vue3生态工具</h2><h3 id="1-Web-UI库"><a href="http://1.Web">1.Web</a> UI库</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>ElementUI Plus<br>一套为开发者、设计师和产品经理准备的基于 Vue 3.0 的桌面端组件库<br><a href="https://element-plus.org/zh-CN/">https://element-plus.org/zh-CN/</a></li><li>Ant Design of Vue<br>Ant Design 的 Vue 实现，开发和服务于企业级后台产品<br><a href="https://www.antdv.com/docs/vue/introduce-cn">https://www.antdv.com/docs/vue/introduce-cn</a></li><li>BalmUI<br>基于谷歌的 Material Design，附带 Vue 插件和指令，以及从简单到复杂的高度可定制组件<br><a href="https://next-material.balmjs.com/">https://next-material.balmjs.com/</a></li><li>Naive UI<br>图森Vue3的组件库，文档完整，我项目中经常使用<br><a href="https://www.naiveui.com/zh-CN/os-theme">https://www.naiveui.com/zh-CN/os-theme</a></li><li>arco.design<br>字节跳动企业级产品设计系统，支持React和Vue双版本<br><a href="https://arco.design/">https://arco.design/</a></li><li>Quasar<br>轻松构建高性能和高质量的Vue.js 3用户界面，好用，但没有中文文档<br><a href="https://quasar.dev/">https://quasar.dev/</a></li><li>iDUX<br>Vue3.x 的 UI 组件库，完全使用 TypeScript 开发<br><a href="https://idux.site/">https://idux.site/</a></li><li>TDesign<br>腾讯业务团队在服务业务过程中沉淀的一套企业级设计体系<br><a href="https://tdesign.tencent.com/">https://tdesign.tencent.com/</a><br><a href="https://tdesign.tencent.com/vue-next/overview">https://tdesign.tencent.com/vue-next/overview</a></li><li>PrimeVue<br>易于使用、多功能、高性能的 Vue UI 组件库<br><a href="https://www.primefaces.org/primevue/">https://www.primefaces.org/primevue/</a></li><li>DevUI<br>华为基于 Vue3 和 DevUI 设计的 UI 组件<br><a href="https://vue-devui.github.io/">https://vue-devui.github.io/</a></li><li>vuestic-ui<br>Vue 3 的免费和开源 UI 库 ,UI非常好看，并且有可用后台管理界面。<br><a href="https://vuestic.dev/">https://vuestic.dev/</a></li><li>Headless UI<br>完全无样式、完全可访问的 UI 组件，旨在与 Tailwind CSS 完美集成。<br><a href="https://headlessui.com/">https://headlessui.com/</a></li><li>View UI Plus<br>基于 Vue.js 3 的企业级 UI 组件库和前端解决方案<br><a href="https://www.iviewui.com/">https://www.iviewui.com/</a></li></ul>              </div>            </details><h3 id="2-移动UI库">2.移动UI库</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>Vant<br>有赞轻量、可靠的移动端组件库<br><a href="https://vant-contrib.gitee.io/vant/#/zh-CN">https://vant-contrib.gitee.io/vant/#/zh-CN</a></li><li>NutUI<br>京东风格的轻量级移动端 Vue 组件库，非常适合移动端电商使用。<br><a href="https://nutui.jd.com/#/">https://nutui.jd.com/#/</a></li><li>Varlet<br>Material 风格移动端组件库 ，文档非常齐全。<br><a href="https://varlet.gitee.io/varlet-ui/#/zh-CN/home">https://varlet.gitee.io/varlet-ui/#/zh-CN/home</a></li><li>nutui-bingo<br>京东基于 NutUI 的抽奖组件库，助力营销活动和小游戏场景。<br><a href="https://nutui.jd.com/bingo/#/">https://nutui.jd.com/bingo/#/</a></li></ul>              </div>            </details><h3 id="3-相关工具">3.相关工具</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>unplugin-vue-components<br>antfu 按需组件自动导入，开箱即用地支持 Vue 2 和 Vue 3，Tree-shakable，只注册你使用的组件，附有流行UI 库的内置解析器。<br><a href="https://www.npmjs.com/package/unplugin-vue-components">https://www.npmjs.com/package/unplugin-vue-components</a></li><li>vuex-persistedstate<br>在页面重新加载之间保持并重载您的 Vuex 状态<br><a href="https://github.com/robinvdvleuten/vuex-persistedstate">https://github.com/robinvdvleuten/vuex-persistedstate</a></li><li>vuex-persist<br>支持 Typescript 的Vuex插件，它能够将应用程序的状态保存到持久存储中，例如 Cookies 或 localStorage<br><a href="https://championswimmer.in/vuex-persist/">https://championswimmer.in/vuex-persist/</a></li><li>@vueuse/gesture<br>手势库，使应用程序具有交互性<br><a href="https://gesture.vueuse.org/">https://gesture.vueuse.org/</a></li><li>unplugin-auto-import<br>antfu 自动导入 Vite、Webpack、Rollup 和 esbuild 的 API。支持 TypeScript。<br><a href="https://github.com/antfu/unplugin-auto-import">https://github.com/antfu/unplugin-auto-import</a></li><li>pinia-plugin-persistedstate<br>Pinia 商店的可配置持久性<br><a href="https://github.com/prazdevs/pinia-plugin-persistedstate">https://github.com/prazdevs/pinia-plugin-persistedstate</a></li><li><a href="https://vue-termui.dev/">https://vue-termui.dev/</a><br>一个基于 Vue.js 的终端 UI 框架，可让您轻松构建现代终端应用程序<br><a href="https://vue-termui.dev/">https://vue-termui.dev/</a></li></ul>              </div>            </details><h3 id="4-可视化">4.可视化</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>Pdfvuer<br>DF 查看器，使用 Mozilla 的 PDF.js，支持 Vue2 和 Vue3<br><a href="https://arkokoley.github.io/pdfvuer/">https://arkokoley.github.io/pdfvuer/</a></li><li>vue3-marquee<br>无缝滚动组件<br><a href="https://vue3-marquee.vercel.app/">https://vue3-marquee.vercel.app/</a></li><li>Vue-ECharts<br>百度ECharts 的 Vue.js 组件。 配置参考Echarts官方 基于 ECharts v5+ 开发，适用于Vue.js 2/3。<br><a href="https://vue-echarts.dev/">https://vue-echarts.dev/</a></li><li>iconpark<br>字节跳动出品，将一个SVG图标转化为多个主题，并生成React图标，Vue图标，svg图标<br><a href="https://iconpark.oceanengine.com/home">https://iconpark.oceanengine.com/home</a></li></ul>              </div>            </details><h3 id="5-插件">5.插件</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>vue-multiselect-next<br>Vue.js 的通用选择/多选/标记组件<br><a href="https://vue-multiselect.js.org/">https://vue-multiselect.js.org/</a></li><li>vue-print-nb<br>用于印刷、简单、快速、方便、轻便的指令包装器<br><a href="https://github.com/Power-kxLee/vue-print-nb">https://github.com/Power-kxLee/vue-print-nb</a></li><li>vue-i18n-next<br>Vue3的国际化插件<br><a href="https://vue-i18n.intlify.dev/">https://vue-i18n.intlify.dev/</a></li><li>vue-cropper<br>简单的vue图片裁剪插件<br><a href="http://github.xyxiao.cn/vue-cropper/example/">http://github.xyxiao.cn/vue-cropper/example/</a></li><li>Grid Layout<br>Vue.js 的网格布局系统<br><a href="https://jbaysolutions.github.io/">https://jbaysolutions.github.io/</a></li><li>Vue Qrcode Reader<br>允许在不离开浏览器的情况下检测和解码二维码<br><a href="https://gruhn.github.io/vue-qrcode-reader/">https://gruhn.github.io/vue-qrcode-reader/</a></li><li>Makeit Captcha<br>基于 Vue3 + Vite + Canvas 开发的滑块验证码，动态生成验证滑块，结合后端的二次校验，能有效的避免被抓取模拟验证https://admin.makeit.vip/components/captcha</li><li>vue3-clipboard<br>Vue 3 的 clipboard.js<br><a href="https://github.com/soerenmartius/vue3-clipboard">https://github.com/soerenmartius/vue3-clipboard</a></li><li>vue.draggable<br>基于Sortable.js的Vue 3拖放组件<br><a href="https://sortablejs.github.io/vue.draggable.next/#/simple">https://sortablejs.github.io/vue.draggable.next/#/simple</a></li><li>BetterScroll<br>解决移动端（已支持 PC）各种滚动场景需求的插件。<br><a href="https://better-scroll.github.io/docs/zh-CN/">https://better-scroll.github.io/docs/zh-CN/</a></li></ul>              </div>            </details><h3 id="6-相关生态">6.相关生态</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>Vue 插件库<br><a href="https://www.vue365.cn/">https://www.vue365.cn/</a></li><li>Pinia<br>轻量级状态管理库，API 设计更接近Vuex 5的提案<br><a href="https://pinia.vuejs.org/">https://pinia.vuejs.org/</a></li><li>Nuxt Modules<br>Nuxt 发现我们的模块列表以增强您的Nuxt 项目<br><a href="https://modules.nuxtjs.org/">https://modules.nuxtjs.org/</a></li><li>Nuxt 3<br>轻量级应用框架,可用来创建服务端渲染 (SSR) 应用<br><a href="https://v3.nuxtjs.org/">https://v3.nuxtjs.org/</a></li><li>vuepress<br>Vue 驱动的静态网站生成器<br><a href="https://v2.vuepress.vuejs.org/zh/">https://v2.vuepress.vuejs.org/zh/</a></li><li>VueUse<br>强大的 Vue 组合实用程序集合<br><a href="https://vueuse.org/">https://vueuse.org/</a></li></ul>              </div>            </details><h3 id="7-动画">7.动画</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>vue-starport<br>带有动画的跨路由共享组件<br><a href="https://vue-starport.netlify.app/">https://vue-starport.netlify.app/</a></li><li>@vueuse/motion<br>Vue Composables 让你的组件动起来<br><a href="https://motion.vueuse.org/">https://motion.vueuse.org/</a></li></ul>              </div>            </details><h3 id="8-音视频">8.音视频</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>@vueuse/sound<br>用于播放音效的 Vue 组合<br><a href="https://sound.vueuse.org/">https://sound.vueuse.org/</a></li></ul>              </div>            </details><h2 id="全栈-后端">全栈-后端</h2><h3 id="插件">插件</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>isomorphic-git<br>用于节点和浏览器的 git 纯 JavaScript 实现<br><a href="https://isomorphic-git.org/">https://isomorphic-git.org/</a></li><li>jsonwebtoken<br>node.js 的 JsonWebToken 实现<br><a href="https://github.com/auth0/node-jsonwebtoken">https://github.com/auth0/node-jsonwebtoken</a></li><li>Qiniu SDK<br>七牛资源（云）存储 SDK for Node.js<br><a href="https://developer.qiniu.com/kodo/sdk/nodejs">https://developer.qiniu.com/kodo/sdk/nodejs</a></li><li>koa-body<br>功能齐全的koa正文解析器中间件，支持multipart、urlencoded和json请求正文，提供与 Express 的 bodyParser 相同的功能<br><a href="https://github.com/koajs/koa-body">https://github.com/koajs/koa-body</a></li><li>koa-json-error<br>纯Koa JSON 应用程序的错误处理程序，显示堆栈跟踪<br><a href="https://github.com/koajs/json-error">https://github.com/koajs/json-error</a></li><li>koa-jwt<br>用于验证 JSON Web 令牌的 Koa 中间件<br><a href="https://github.com/koajs/jwt">https://github.com/koajs/jwt</a></li><li>koa-router<br>Koa 的路由器中间件<br><a href="https://github.com/koajs/router">https://github.com/koajs/router</a></li><li>koa2-cors<br>koa2 的 CORS 中间件<br><a href="https://github.com/zadzbw/koa2-cors">https://github.com/zadzbw/koa2-cors</a></li><li>koa-sslify<br>为 Koa.js 实施 HTTPS 中间件<br><a href="https://github.com/turboMaCk/koa-sslify">https://github.com/turboMaCk/koa-sslify</a></li><li>superagent-proxy<br>允许您通过某种代理来代理 HTTP 请求<br><a href="https://github.com/TooTallNate/superagent-proxy">https://github.com/TooTallNate/superagent-proxy</a></li><li>node-http-proxy-agen<br>HTTP 端点的 HTTP(s) 代理“http.Agent”实现<br><a href="https://github.com/TooTallNate/node-http-proxy-agent">https://github.com/TooTallNate/node-http-proxy-agent</a></li><li>https-proxy-agent<br>HTTPS 端点的 HTTP(s) 代理“http.Agent”实现<br><a href="https://github.com/TooTallNate/node-https-proxy-agent">https://github.com/TooTallNate/node-https-proxy-agent</a></li><li>socks-proxy-agent<br>用于 HTTP 和 HTTPS 的 SOCKS (v4/v5) 代理“http.Agent”实现<br><a href="https://github.com/TooTallNate/node-socks-proxy-agent">https://github.com/TooTallNate/node-socks-proxy-agent</a></li><li>simple-get<br>发出 http get 请求的最简单方法。支持 HTTPS、重定向、gzip/deflate、小于 100 行的流<br><a href="https://github.com/feross/simple-get">https://github.com/feross/simple-get</a></li><li>commander.js<br>node.js命令行界面的完整解决方案<br><a href="https://github.com/tj/commander.js">https://github.com/tj/commander.js</a></li><li>ora<br>命令行 loading 动效<br><a href="https://github.com/sindresorhus/ora">https://github.com/sindresorhus/ora</a></li><li>dotenv<br>从 .env 为 nodejs 项目加载环境变量<br><a href="https://github.com/motdotla/dotenv">https://github.com/motdotla/dotenv</a></li><li>FFCreator<br>基于node.js的高速视频制作库<br><a href="https://tnfe.github.io/FFCreator/#/">https://tnfe.github.io/FFCreator/#/</a></li><li>sharp<br>高性能 Node.js 图像处理，调整 JPEG、PNG、WebP、AVIF 和 TIFF 图像大小的最快模块<br><a href="https://sharp.pixelplumbing.com/">https://sharp.pixelplumbing.com/</a></li><li>node-fs-extra<br>强大的文件操作库， 是 Nodejs fs 模块 的增强版<br><a href="https://github.com/jprichardson/node-fs-extra">https://github.com/jprichardson/node-fs-extra</a></li><li>chokidar<br>用于文件监控的库，解决兼容性不好、无法监听、监听多次 等大量影响性能的问题<br><a href="https://paulmillr.com/">https://paulmillr.com/</a></li><li>fast-glob<br>快速批量导入、读取文件的库<br><a href="https://github.com/mrmlnc/fast-glob">https://github.com/mrmlnc/fast-glob</a></li><li>peerflix<br>node.js 的流式 torrent 客户端<br><a href="https://github.com/mafintosh/peerflix">https://github.com/mafintosh/peerflix</a></li></ul>              </div>            </details><h3 id="工具-3">工具</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>Nginx<br>高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务<br><a href="https://blog.redis.com.cn/doc/">https://blog.redis.com.cn/doc/</a></li><li>PM2<br>Node进程管理工具，如性能监控、自动重启、负载均衡等<br><a href="https://pm2.keymetrics.io/docs/usage/process-management/">https://pm2.keymetrics.io/docs/usage/process-management/</a></li><li>nodemon<br>监视 node.js 应用程序中的任何更改并自动重新启动服务器<br><a href="https://nodemon.io/">https://nodemon.io/</a></li><li>RobotJS<br>Node.js 桌面自动化，控制鼠标、键盘和阅读屏幕等<br><a href="http://robotjs.io/">http://robotjs.io/</a></li><li>Jenkins<br>领先的开源自动化服务器，Jenkins 提供了数百个插件来支持构建、部署和自动化任何项目<br><a href="https://www.jenkins.io/">https://www.jenkins.io/</a></li><li>nexe<br>将 node.js 应用程序中创建一个可执行文件<br><a href="https://github.com/nexe/nexe">https://github.com/nexe/nexe</a></li><li>debug<br>模仿 Node.js 核心调试技术的小型 JavaScript 调试实用程序。适用于 Node.js 和 Web 浏览器<br><a href="https://github.com/debug-js/debug">https://github.com/debug-js/debug</a></li></ul>              </div>            </details><h3 id="数据库">数据库</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>mongoose<br>旨在在异步环境中工作的 MongoDB 对象建模<br><a href="https://mongoosejs.com/">https://mongoosejs.com/</a></li><li>GraphQL<br>用于 API 的查询语言也是一个满足你数据查询的运行时<br><a href="https://graphql.cn/">https://graphql.cn/</a></li><li>lowdb数据库<br>适用于Node，Electron和浏览器的小型JSON数据库。由Lodash驱动<br><a href="https://github.com/typicode/lowdb">https://github.com/typicode/lowdb</a></li><li>nedb<br>适用于Node.js，nw.js，Electron和浏览器的嵌入式持久性数据库或内存数据库,API是MongoDB的子集<br><a href="https://github.com/louischatriot/nedb">https://github.com/louischatriot/nedb</a></li></ul>              </div>            </details><h3 id="API">API</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>网易云音乐 API<br>全部接口已升级到最新，具备登录接口,多达200多个接口<br><a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/">https://binaryify.github.io/NeteaseCloudMusicApi/#/</a></li><li>Node-SpliderApi<br>基于 Node+Express 网络爬虫 API 接口 包括前端开发日报、kugou 音乐、前端 top 框架排行、妹纸福利、搞笑视频、段子笑话、各类视频新闻资讯 热点详情接口数据,接口数据更新目标<br><a href="https://ecitlm.github.io/Node-SpliderApi/">https://ecitlm.github.io/Node-SpliderApi/</a></li><li>聚合数据<br>免费向开发者提供全国车辆违章查询API,天气API,基站数据,移动联通基站,电信基站,覆盖国内外1000多个主要城市公共交通信息数据<br><a href="https://www.juhe.cn/">https://www.juhe.cn/</a></li><li>极速数据<br>提供各类生活数据API,方便开发者快速简单的开发APP、软件及其他服务平台<br><a href="https://www.jisuapi.com/">https://www.jisuapi.com/</a></li><li>京东万象<br>供金融、电商、运营商数据,免费数据,热门数据,学籍数据,企业诉讼数据,实名认证,征信数据,质检等多种数据<br><a href="https://wx.jdcloud.com/api">https://wx.jdcloud.com/api</a></li><li>QQ音乐API<br>通过Web网页版请求QQ音乐接口数据<br><a href="https://rain120.github.io/qq-music-api/#/">https://rain120.github.io/qq-music-api/#/</a></li><li>万维易源<br>一站式全网API调用平台<br><a href="https://www.showapi.com/">https://www.showapi.com/</a></li><li>TP5 Splider Api<br>基于Thinkphp5+phpQuery 网络爬虫抓取数据接口 统一输出接口数据api<br><a href="https://ecitlm.github.io/TP5_Splider/#/">https://ecitlm.github.io/TP5_Splider/#/</a></li><li>Roll API<br>提供开发中常用数据的一个稳定聚合Api接口<br><a href="https://www.mxnzp.com/doc/list">https://www.mxnzp.com/doc/list</a></li><li>Open API<br>收集可用的Open APIs<br><a href="https://www.wanandroid.com/openapis">https://www.wanandroid.com/openapis</a></li><li>天行数据<br>160多个免费接口，接口高度统一，简单易用，毫秒级响应<br><a href="https://www.tianapi.com/">https://www.tianapi.com/</a></li><li>free-api<br>免费API,收集免费的接口服务<br><a href="https://www.free-api.com/">https://www.free-api.com/</a></li><li>douban-imdb-api<br>基于豆瓣、IMDB、烂番茄评分的电影电视剧双语(中英)数据api接口<br><a href="https://www.iqi360.com/p/douban-imdb-api">https://www.iqi360.com/p/douban-imdb-api</a></li></ul>              </div>            </details><h3 id="框架-2">框架</h3><details class="folding-tag" ><summary> 查看详情 </summary>              <div class='content'>              <ul><li>Koa<br>基于 Node.js 平台的下一代 web 开发框架<br><a href="https://koajs.com/">https://koajs.com/</a></li><li>Express<br>用于Node.js 的快速、独立、简约的 Web 框架<br><a href="https://expressjs.com/">https://expressjs.com/</a></li><li>egg.js<br>为企业级框架和应用而生<br><a href="https://www.eggjs.org/">https://www.eggjs.org/</a></li><li>Nest.js<br>构建高效且可扩展的服务器端应用程序的渐进式Node.js框架<br><a href="https://nestjs.com/">https://nestjs.com/</a></li></ul>              </div>            </details>]]></content>
      
      
      <categories>
          
          <category> 工具分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 实用工具分享</title>
      <link href="/posts/200.html"/>
      <url>/posts/200.html</url>
      
        <content type="html"><![CDATA[<h1>Vue3</h1><div class="note info flat"><p>UI库/相关工具/可视化/生态全分享</p></div><h2 id="1-Web-UI库"><a href="http://1.Web">1.Web</a> UI库</h2><h3 id="1-ElementUI-Plus">1.   ElementUI Plus</h3><p>一套为开发者、设计师和产品经理准备的基于 Vue 3.0 的桌面端组件库<br><a href="https://element-plus.org/zh-CN/">https://element-plus.org/zh-CN/</a></p><h3 id="2-Ant-Design-of-Vue">2.    Ant Design of Vue</h3><p>Ant Design 的 Vue 实现，开发和服务于企业级后台产品<br><a href="https://www.antdv.com/docs/vue/introduce-cn">https://www.antdv.com/docs/vue/introduce-cn</a></p><h3 id="3-BalmUI">3.    BalmUI</h3><p>基于谷歌的 Material Design，附带 Vue 插件和指令，以及从简单到复杂的高度可定制组件<br><a href="https://next-material.balmjs.com/">https://next-material.balmjs.com/</a></p><h3 id="4-Naive-UI">4.    Naive UI</h3><p>图森Vue3的组件库，文档完整，我项目中经常使用<br><a href="https://www.naiveui.com/zh-CN/os-theme">https://www.naiveui.com/zh-CN/os-theme</a></p><h3 id="5-arco-design">5.    arco.design</h3><p>字节跳动企业级产品设计系统，支持React和Vue双版本<br><a href="https://arco.design/">https://arco.design/</a></p><h3 id="6-Quasar">6,     Quasar</h3><p>轻松构建高性能和高质量的Vue.js 3用户界面，好用，但没有中文文档<br><a href="https://quasar.dev/">https://quasar.dev/</a></p><h3 id="7-iDUX">7.      iDUX</h3><p>Vue3.x 的 UI 组件库，完全使用 TypeScript 开发<br><a href="https://idux.site/">https://idux.site/</a></p><h3 id="8-TDesign">8.     TDesign</h3><p>腾讯业务团队在服务业务过程中沉淀的一套企业级设计体系<br><a href="https://tdesign.tencent.com/">https://tdesign.tencent.com/</a><br><a href="https://tdesign.tencent.com/vue-next/overview">https://tdesign.tencent.com/vue-next/overview</a></p><h3 id="9-PrimeVue">9.      PrimeVue</h3><p>易于使用、多功能、高性能的 Vue UI 组件库<br><a href="https://www.primefaces.org/primevue/">https://www.primefaces.org/primevue/</a></p><h3 id="10-DevUI">10.    DevUI</h3><p>华为基于 Vue3 和 DevUI 设计的 UI 组件<br><a href="https://vue-devui.github.io/">https://vue-devui.github.io/</a></p><h3 id="11-vuestic-ui">11.     vuestic-ui</h3><p>Vue 3 的免费和开源 UI 库 ,UI非常好看，并且有可用后台管理界面。<br><a href="https://vuestic.dev/">https://vuestic.dev/</a></p><h3 id="12-Headless-UI">12.     Headless UI</h3><p>完全无样式、完全可访问的 UI 组件，旨在与 Tailwind CSS 完美集成。<br><a href="https://headlessui.com/">https://headlessui.com/</a></p><h3 id="13-View-UI-Plus">13.      View UI Plus</h3><p>基于 Vue.js 3 的企业级 UI 组件库和前端解决方案<br><a href="https://www.iviewui.com/">https://www.iviewui.com/</a></p><h2 id="2-移动UI库">2.移动UI库</h2><h3 id="14-Vant">14.       Vant</h3><p>有赞轻量、可靠的移动端组件库<br><a href="https://vant-contrib.gitee.io/vant/#/zh-CN">https://vant-contrib.gitee.io/vant/#/zh-CN</a></p><h3 id="15-NutUI">15.      NutUI</h3><p>京东风格的轻量级移动端 Vue 组件库，非常适合移动端电商使用。<br><a href="https://nutui.jd.com/#/">https://nutui.jd.com/#/</a></p><h3 id="16-Varlet">16.     Varlet</h3><p>Material 风格移动端组件库 ，文档非常齐全。<br><a href="https://varlet.gitee.io/varlet-ui/#/zh-CN/home">https://varlet.gitee.io/varlet-ui/#/zh-CN/home</a></p><h3 id="17-nutui-bingo">17.       nutui-bingo</h3><p>京东基于 NutUI 的抽奖组件库，助力营销活动和小游戏场景。<br><a href="https://nutui.jd.com/bingo/#/">https://nutui.jd.com/bingo/#/</a></p><h2 id="3-相关工具">3.相关工具</h2><h3 id="18-unplugin-vue-components">18.      unplugin-vue-components</h3><p>antfu 按需组件自动导入，开箱即用地支持 Vue 2 和 Vue 3，Tree-shakable，只注册你使用的组件，附有流行UI 库的内置解析器。<br><a href="https://www.npmjs.com/package/unplugin-vue-components">https://www.npmjs.com/package/unplugin-vue-components</a></p><h3 id="19-vuex-persistedstate">19.      vuex-persistedstate</h3><p>在页面重新加载之间保持并重载您的 Vuex 状态<br><a href="https://github.com/robinvdvleuten/vuex-persistedstate">https://github.com/robinvdvleuten/vuex-persistedstate</a></p><h3 id="20-vuex-persist">20.       vuex-persist</h3><p>支持 Typescript 的Vuex插件，它能够将应用程序的状态保存到持久存储中，例如 Cookies 或 localStorage<br><a href="https://championswimmer.in/vuex-persist/">https://championswimmer.in/vuex-persist/</a></p><h3 id="21-vueuse-gesture">21.      @vueuse/gesture</h3><p>手势库，使应用程序具有交互性<br><a href="https://gesture.vueuse.org/">https://gesture.vueuse.org/</a></p><h3 id="22-unplugin-auto-import">22.      unplugin-auto-import</h3><p>antfu 自动导入 Vite、Webpack、Rollup 和 esbuild 的 API。支持 TypeScript。<br><a href="https://github.com/antfu/unplugin-auto-import">https://github.com/antfu/unplugin-auto-import</a></p><h3 id="23-pinia-plugin-persistedstate">23.     pinia-plugin-persistedstate</h3><p>Pinia 商店的可配置持久性<br><a href="https://github.com/prazdevs/pinia-plugin-persistedstate">https://github.com/prazdevs/pinia-plugin-persistedstate</a></p><h3 id="24-https-vue-termui-dev">24.     <a href="https://vue-termui.dev/">https://vue-termui.dev/</a></h3><p>一个基于 Vue.js 的终端 UI 框架，可让您轻松构建现代终端应用程序<br><a href="https://vue-termui.dev/">https://vue-termui.dev/</a></p><h2 id="4-可视化">4.可视化</h2><h3 id="25-Pdfvuer">25.    Pdfvuer</h3><p>DF 查看器，使用 Mozilla 的 PDF.js，支持 Vue2 和 Vue3<br><a href="https://arkokoley.github.io/pdfvuer/">https://arkokoley.github.io/pdfvuer/</a></p><h3 id="26-vue3-marquee">26.      vue3-marquee</h3><p>无缝滚动组件<br><a href="https://vue3-marquee.vercel.app/">https://vue3-marquee.vercel.app/</a></p><h3 id="27-Vue-ECharts">27.     Vue-ECharts</h3><p>百度ECharts 的 Vue.js 组件。 配置参考Echarts官方 基于 ECharts v5+ 开发，适用于Vue.js 2/3。<br><a href="https://vue-echarts.dev/">https://vue-echarts.dev/</a></p><h3 id="28-iconpark">28.     iconpark</h3><p>字节跳动出品，将一个SVG图标转化为多个主题，并生成React图标，Vue图标，svg图标<br><a href="https://iconpark.oceanengine.com/home">https://iconpark.oceanengine.com/home</a></p><h2 id="5-插件">5.插件</h2><h3 id="29-vue-multiselect-next">29.    vue-multiselect-next</h3><p>Vue.js 的通用选择/多选/标记组件<br><a href="https://vue-multiselect.js.org/">https://vue-multiselect.js.org/</a></p><h3 id="30-vue-print-nb">30.     vue-print-nb</h3><p>用于印刷、简单、快速、方便、轻便的指令包装器<br><a href="https://github.com/Power-kxLee/vue-print-nb">https://github.com/Power-kxLee/vue-print-nb</a></p><h3 id="31-vue-i18n-next">31.      vue-i18n-next</h3><p>Vue3的国际化插件<br><a href="https://vue-i18n.intlify.dev/">https://vue-i18n.intlify.dev/</a></p><h3 id="32-vue-cropper">32.     vue-cropper</h3><p>简单的vue图片裁剪插件<br><a href="http://github.xyxiao.cn/vue-cropper/example/">http://github.xyxiao.cn/vue-cropper/example/</a></p><h3 id="33-Vue-Grid-Layout">33.     Vue Grid Layout</h3><p>Vue.js 的网格布局系统<br><a href="https://jbaysolutions.github.io/">https://jbaysolutions.github.io/</a></p><h3 id="34-Vue-Qrcode-Reader">34.     Vue Qrcode Reader</h3><p>允许在不离开浏览器的情况下检测和解码二维码<br><a href="https://gruhn.github.io/vue-qrcode-reader/">https://gruhn.github.io/vue-qrcode-reader/</a></p><h3 id="35-Makeit-Captcha">35.     Makeit Captcha</h3><p>基于 Vue3 + Vite + Canvas 开发的滑块验证码，动态生成验证滑块，结合后端的二次校验，能有效的避免被抓取模拟验证https://admin.makeit.vip/components/captcha</p><h3 id="36-vue3-clipboard">36.     vue3-clipboard</h3><p>Vue 3 的 clipboard.js<br><a href="https://github.com/soerenmartius/vue3-clipboard">https://github.com/soerenmartius/vue3-clipboard</a></p><h3 id="37-vue-draggable">37.       vue.draggable</h3><p>基于Sortable.js的Vue 3拖放组件<br><a href="https://sortablejs.github.io/vue.draggable.next/#/simple">https://sortablejs.github.io/vue.draggable.next/#/simple</a></p><h3 id="38-BetterScroll">38.        BetterScroll</h3><p>解决移动端（已支持 PC）各种滚动场景需求的插件。<br><a href="https://better-scroll.github.io/docs/zh-CN/">https://better-scroll.github.io/docs/zh-CN/</a></p><h2 id="6-相关生态">6.相关生态</h2><h3 id="39-Vue-插件库">39.    Vue 插件库</h3><p><a href="https://www.vue365.cn/">https://www.vue365.cn/</a></p><h3 id="40-Pinia">40.     Pinia</h3><p>轻量级状态管理库，API 设计更接近Vuex 5的提案<br><a href="https://pinia.vuejs.org/">https://pinia.vuejs.org/</a></p><h3 id="41-Nuxt-Modules">41.     Nuxt Modules</h3><p>Nuxt 发现我们的模块列表以增强您的Nuxt 项目<br><a href="https://modules.nuxtjs.org/">https://modules.nuxtjs.org/</a></p><h3 id="42-Nuxt-3">42.      Nuxt 3</h3><p>轻量级应用框架,可用来创建服务端渲染 (SSR) 应用<br><a href="https://v3.nuxtjs.org/">https://v3.nuxtjs.org/</a></p><h3 id="43-vuepress">43.      vuepress</h3><p>Vue 驱动的静态网站生成器<br><a href="https://v2.vuepress.vuejs.org/zh/">https://v2.vuepress.vuejs.org/zh/</a></p><h3 id="44-VueUse">44.      VueUse</h3><p>强大的 Vue 组合实用程序集合<br><a href="https://vueuse.org/">https://vueuse.org/</a></p><h2 id="7-动画">7.动画</h2><h3 id="45-vue-starport">45.   vue-starport</h3><p>带有动画的跨路由共享组件<br><a href="https://vue-starport.netlify.app/">https://vue-starport.netlify.app/</a></p><h3 id="46-vueuse-motion">46.     @vueuse/motion</h3><p>Vue Composables 让你的组件动起来<br><a href="https://motion.vueuse.org/">https://motion.vueuse.org/</a></p><h2 id="8-音视频">8.音视频</h2><h3 id="47-vueuse-sound">47.   @vueuse/sound</h3><p>用于播放音效的 Vue 组合<br><a href="https://sound.vueuse.org/">https://sound.vueuse.org/</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typescript学习笔记</title>
      <link href="/posts/305.html"/>
      <url>/posts/305.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一章-快速入门">第一章 快速入门</h2><h3 id="0、TypeScript简介">0、TypeScript简介</h3><ol><li>TypeScript是JavaScript的超集。</li><li>它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。</li><li>TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。</li><li>TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。</li><li>相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</li></ol><h3 id="1、TypeScript-开发环境搭建">1、TypeScript 开发环境搭建</h3><ol><li>下载Node.js<ul><li>64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a></li><li>32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></li></ul></li><li>安装Node.js</li><li>使用npm全局安装typescript<ul><li>进入命令行</li><li>输入：<code>npm i -g typescript</code></li></ul></li><li>创建一个ts文件</li><li>使用tsc对ts文件进行编译<ul><li>进入命令行</li><li>进入ts文件所在目录</li><li>执行命令：<code>tsc xxx.ts</code></li></ul></li></ol><h3 id="2、基本类型">2、基本类型</h3><h4 id="2-1、类型声明">2.1、类型声明</h4><ul><li>类型声明是TS非常重要的一个特点，通过类型声明可以指定TS中变量（参数、形参）的类型。</li><li>指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错。</li><li>简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值</li><li>语法：  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 变量: 类型;</span><br><span class="line"><span class="keyword">let</span> 变量: 类型 = 值;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">参数: 类型, 参数: 类型</span>): 类型&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-2、自动类型判断">2.2、自动类型判断</h4><ul><li>TS拥有自动的类型判断机制</li><li>当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型</li><li>所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</li></ul><h4 id="2-3、类型：">2.3、类型：</h4><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">例子</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">number</td><td style="text-align:center">1, -33, 2.5</td><td style="text-align:center">任意数字</td></tr><tr><td style="text-align:center">string</td><td style="text-align:center">‘hi’, “hi”, <code>hi</code></td><td style="text-align:center">任意字符串</td></tr><tr><td style="text-align:center">boolean</td><td style="text-align:center">true、false</td><td style="text-align:center">布尔值true或false</td></tr><tr><td style="text-align:center">字面量</td><td style="text-align:center">其本身</td><td style="text-align:center">限制变量的值就是该字面量的值</td></tr><tr><td style="text-align:center">any</td><td style="text-align:center">*</td><td style="text-align:center">任意类型</td></tr><tr><td style="text-align:center">unknown</td><td style="text-align:center">*</td><td style="text-align:center">类型安全的any</td></tr><tr><td style="text-align:center">void</td><td style="text-align:center">空值（undefined）</td><td style="text-align:center">没有值（或undefined）</td></tr><tr><td style="text-align:center">never</td><td style="text-align:center">没有值</td><td style="text-align:center">不能是任何值</td></tr><tr><td style="text-align:center">object</td><td style="text-align:center">{name:‘孙悟空’}</td><td style="text-align:center">任意的JS对象</td></tr><tr><td style="text-align:center">array</td><td style="text-align:center">[1,2,3]</td><td style="text-align:center">任意JS数组</td></tr><tr><td style="text-align:center">tuple</td><td style="text-align:center">[4,5]</td><td style="text-align:center">元素，TS新增类型，固定长度数组</td></tr><tr><td style="text-align:center">enum</td><td style="text-align:center">enum{A, B}</td><td style="text-align:center">枚举，TS中新增类型</td></tr></tbody></table><ul><li>number<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: <span class="built_in">number</span> = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">hex</span>: <span class="built_in">number</span> = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">binary</span>: <span class="built_in">number</span> = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">octal</span>: <span class="built_in">number</span> = <span class="number">0o744</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">big</span>: <span class="built_in">bigint</span> = <span class="number">100n</span>;</span><br></pre></td></tr></table></figure></li><li>boolean<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: <span class="built_in">boolean</span> = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure></li><li>string<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="built_in">string</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">color = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fullName</span>: <span class="built_in">string</span> = <span class="string">`Bob Bobbington`</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: <span class="built_in">number</span> = <span class="number">37</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>: <span class="built_in">string</span> = <span class="string">`Hello, my name is <span class="subst">$&#123;fullName&#125;</span>.</span></span><br><span class="line"><span class="string">I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br></pre></td></tr></table></figure></li><li>字面量<br>也可以使用字面量去指定变量的类型，通过字面量可以确定变量的取值范围<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> | <span class="string">&#x27;blue&#x27;</span> | <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: <span class="number">1</span> | <span class="number">2</span> | <span class="number">3</span> | <span class="number">4</span> | <span class="number">5</span>;</span><br></pre></td></tr></table></figure></li><li>any<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="built_in">any</span> = <span class="number">4</span>;</span><br><span class="line">d = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">d = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li><li>unknown<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notSure</span>: <span class="built_in">unknown</span> = <span class="number">4</span>;</span><br><span class="line">notSure = <span class="string">&#x27;hello&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li>void<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">unusable</span>: <span class="built_in">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure></li><li>never<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>object（没啥用）<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>: <span class="built_in">object</span> = &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li>array<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="built_in">number</span>[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="title class_">Array</span>&lt;<span class="built_in">number</span>&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure></li><li>tuple<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: [<span class="built_in">string</span>, <span class="built_in">number</span>];</span><br><span class="line">x = [<span class="string">&quot;hello&quot;</span>, <span class="number">10</span>]; </span><br></pre></td></tr></table></figure></li><li>enum<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span>,</span><br><span class="line">  <span class="title class_">Blue</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;</span><br><span class="line">  <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">  <span class="title class_">Green</span> = <span class="number">2</span>,</span><br><span class="line">  <span class="title class_">Blue</span> = <span class="number">4</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>: <span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br></pre></td></tr></table></figure></li><li>类型断言<br>有些情况下，变量的类型对于我们来说是很明确，但是TS编译器却并不清楚，此时，可以通过类型断言来告诉编译器变量的类型，断言有两种形式：<ul><li>第一种<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">unknown</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (someValue <span class="keyword">as</span> <span class="built_in">string</span>).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li><li>第二种<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: <span class="built_in">unknown</span> = <span class="string">&quot;this is a string&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: <span class="built_in">number</span> = (&lt;<span class="built_in">string</span>&gt;someValue).<span class="property">length</span>;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="3、编译选项">3、编译选项</h3><h4 id="3-1、自动编译文件">3.1、自动编译文件</h4><ul><li>编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。示例：<code>tsc xxx.ts -w</code></li></ul><h4 id="3-2、自动编译整个项目">3.2、自动编译整个项目</h4><ul><li>如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。</li><li>但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json</li><li>tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译</li></ul><h5 id="3-2-1、配置选择">3.2.1、配置选择</h5><ul><li><p><strong>include</strong><br>定义希望被编译文件所在的目录，默认值：<code>[&quot;\*\*/\*&quot;]</code><br><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;include&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;src/**/*&quot;</span><span class="punctuation">,</span> <span class="string">&quot;tests/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>上述示例中，所有src目录和tests目录下的文件都会被编译</p></li><li><p><strong>exclude</strong><br>定义需要排除在外的目录，默认值：<code>[&quot;node_modules&quot;, &quot;bower_components&quot;, &quot;jspm_packages&quot;]</code><br><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/hello/**/*&quot;</span><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>上述示例中，src下hello目录下的文件都不会被编译</p></li><li><p><strong>extends</strong><br>定义被继承的配置文件<br><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./configs/base&quot;</span></span><br></pre></td></tr></table></figure><p>上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</p></li><li><p><strong>files</strong><br>指定被编译文件的列表，只有需要编译的文件少时才会用到<br><strong>示例：</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;core.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;sys.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;types.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;scanner.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;parser.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;utilities.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;binder.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;checker.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;tsc.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>列表中的文件都会被TS编译器所编译</p></li><li><p><strong>compilerOptions</strong><br>编译选项是配置文件中非常重要也比较复杂的配置选项，在compilerOptions中包含多个子选项，用来完成对编译的配置。<br><strong>项目选项：</strong></p><ul><li>target<br>设置ts代码编译的目标版本可选值：<code>ES3（默认）、ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</code><br>示例：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>如上设置，我们所编写的ts代码将会被编译为ES6版本的js代码</li><li>lib<br>指定代码运行时所包含的库（宿主环境），可选值：<code>ES5、ES6/ES2015、ES7/ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ...</code><br>示例：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lib&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;ES6&quot;</span><span class="punctuation">,</span> <span class="string">&quot;DOM&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/aa.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>module<br>设置编译后代码使用的模块化系统，可选值：<code>CommonJS、UMD、AMD、System、ES2020、ESNext、None</code><br>示例：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;module&quot;</span>: <span class="string">&quot;CommonJS&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>outDir<br>编译后文件的所在目录。默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置<br>示例：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>设置后编译后的js文件将会生成到dist目录</li><li>outFile<br>将所有的文件编译为一个js文件，默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中。<br>示例：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;outFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/app.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>rootDir<br>指定代码的根目录，默认情况下编译后文件的目录结构会以最长的公共目录为根目录，通过rootDir可以手动指定根目录<br>示例：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;rootDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./src&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>allowJs<br>是否对js文件编译</li><li>checkJs<br>是否对js文件进行检查<br>示例：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;allowJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;checkJs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>removeComments<br>是否删除注释，默认值：false</li><li>noEmit<br>不对代码进行编译，默认值：false</li><li>sourceMap<br>是否生成sourceMap，默认值：false</li></ul></li><li><p><strong>严格检查</strong></p><ul><li>strict<br>启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查</li><li>alwaysStrict<br>总是以严格模式对代码进行编译</li><li>noImplicitAny<br>禁止隐式的any类型</li><li>noImplicitThis<br>禁止类型不明确的this</li><li>strictBindCallApply<br>严格检查bind、call和apply的参数列表</li><li>strictFunctionTypes<br>严格检查函数的类型</li><li>strictNullChecks<br>严格的空值检查</li><li>strictPropertyInitialization<br>严格检查属性是否初始化</li></ul></li><li><p><strong>额外检查</strong></p><ul><li>noFallthroughCasesInSwitch<br>检查switch语句包含正确的break</li><li>noImplicitReturns<br>检查函数没有隐式的返回值</li><li>noUnusedLocals<br>检查未使用的局部变量</li><li>noUnusedParameters<br>检查未使用的参数</li></ul></li><li><p><strong>高级</strong></p><ul><li>allowUnreachableCode<br>检查不可达代码<br>可选值：<ul><li>true，忽略不可达代码</li><li>false，不可达代码将引起错误</li></ul></li><li>noEmitOnError<br>有错误的情况下不进行编译，默认值：false</li></ul></li></ul><h3 id="4、webpack">4、webpack</h3><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。<br>步骤：</p><ol><li>初始化项目<br>进入项目根目录，执行命令 <code>npm init -y</code>。<br>主要作用：创建package.json文件</li><li>下载构建工具<br><code>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin</code><ul><li>共安装了7个包<ul><li>webpack<br>构建工具webpack</li><li>webpack-cli<br>webpack的命令行工具</li><li>webpack-dev-server<br>webpack的开发服务器</li><li>typescript<br>ts编译器</li><li>ts-loader<br>ts加载器，用于在webpack中编译ts文件</li><li>html-webpack-plugin<br>webpack中html插件，用来自动创建html文件</li><li>clean-webpack-plugin<br>webpack中的清除插件，每次构建都会先清除目录</li></ul></li></ul></li><li>根目录下创建webpack的配置文件webpack.config.js <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">optimization</span>:&#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">false</span> <span class="comment">// 关闭代码压缩，可选</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.ts&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;inline-source-map&quot;</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">contentBase</span>: <span class="string">&#x27;./dist&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dist&quot;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;bundle.js&quot;</span>,</span><br><span class="line">        <span class="attr">environment</span>: &#123;</span><br><span class="line">            <span class="attr">arrowFunction</span>: <span class="literal">false</span> <span class="comment">// 关闭webpack的箭头函数，可选</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">resolve</span>: &#123;</span><br><span class="line">        <span class="attr">extensions</span>: [<span class="string">&quot;.ts&quot;</span>, <span class="string">&quot;.js&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">                <span class="attr">use</span>: &#123;</span><br><span class="line">                  <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>     </span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>:<span class="string">&#x27;TS测试&#x27;</span></span><br><span class="line">        &#125;),</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>根目录下创建tsconfig.json，配置可以根据自己需要 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;target&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ES2015&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;strict&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>修改package.json添加如下配置 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  ...略...</span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack serve --open chrome.exe&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  ...略...</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li>在src下创建ts文件，并在并命令行执行<code>npm run build</code>对代码进行编译，或者执行<code>npm start</code>来启动开发服务器</li></ol><h3 id="5、Babel">5、Babel</h3><p>经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。</p><ol><li>安装依赖包：<br><code>npm i -D @babel/core @babel/preset-env babel-loader core-js</code><ul><li>共安装了4个包，分别是：<ul><li>@babel/core<br>babel的核心工具</li><li>@babel/preset-env<br>babel的预定义环境</li><li>@babel-loader<br>babel在webpack中的加载器</li><li>core-js<br>core-js用来使老版本的浏览器支持新版ES语法</li></ul></li></ul></li><li>修改webpack.config.js配置文件<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">...略...</span><br><span class="line"><span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.ts$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">                    <span class="attr">options</span>:&#123;</span><br><span class="line">                        <span class="attr">presets</span>: [</span><br><span class="line">                            [</span><br><span class="line">                                <span class="string">&quot;@babel/preset-env&quot;</span>,</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="string">&quot;targets&quot;</span>:&#123;</span><br><span class="line">                                        <span class="string">&quot;chrome&quot;</span>: <span class="string">&quot;58&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;ie&quot;</span>: <span class="string">&quot;11&quot;</span></span><br><span class="line">                                    &#125;,</span><br><span class="line">                                    <span class="string">&quot;corejs&quot;</span>:<span class="string">&quot;3&quot;</span>,</span><br><span class="line">                                    <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            ]</span><br><span class="line">                        ]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;ts-loader&quot;</span>,</span><br><span class="line">                &#125;</span><br><span class="line">            ],</span><br><span class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">...略...</span><br></pre></td></tr></table></figure>如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。</li></ol><h2 id="第二章：面向对象">第二章：面向对象</h2><p>面向对象是程序中一个非常重要的思想，它被很多同学理解成了一个比较难，比较深奥的问题，其实不然。面向对象很简单，简而言之就是程序之中所有的操作都需要通过对象来完成。<br>举例来说：</p><ul><li>操作浏览器要使用window对象</li><li>操作网页要使用document对象</li><li>操作控制台要使用console对象<br>一切操作都要通过对象，也就是所谓的面向对象，那么对象到底是什么呢？这就要先说到程序是什么，计算机程序的本质就是对现实事物的抽象，抽象的反义词是具体，比如：照片是对一个具体的人的抽象，汽车模型是对具体汽车的抽象等等。程序也是对事物的抽象，在程序中我们可以表示一个人、一条狗、一把枪、一颗子弹等等所有的事物。一个事物到了程序中就变成了一个对象。<br>在程序中所有的对象都被分成了两个部分数据和功能，以人为例，人的姓名、性别、年龄、身高、体重等属于数据，人可以说话、走路、吃饭、睡觉这些属于人的功能。数据在对象中被成为属性，而功能就被称为方法。所以简而言之，在程序中一切皆是对象。</li></ul><h3 id="1、类（class）">1、类（class）</h3><p>要想面向对象，操作对象，首先便要拥有对象，那么下一个问题就是如何创建对象。要创建对象，必须要先定义类，所谓的类可以理解为对象的模型，程序中可以根据类创建指定类型的对象，举例来说：可以通过Person类来创建人的对象，通过Dog类创建狗的对象，通过Car类来创建汽车的对象，不同的类可以用来创建不同的对象。</p><ul><li>定义类：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> 类名 &#123;</span><br><span class="line">属性名: 类型;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">参数: 类型</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.属性名 = 参数;</span><br><span class="line">&#125;</span><br><span class="line">方法名()&#123;</span><br><span class="line">....</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>示例：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用类：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="title function_">sayHello</span>();</span><br></pre></td></tr></table></figure></li></ul><h3 id="2、面向对象的特点">2、面向对象的特点</h3><h4 id="2-1、封装">2.1、封装</h4><ul><li>对象实质上就是属性和方法的容器，它的主要作用就是存储属性和方法，这就是所谓的封装</li><li>默认情况下，对象的属性是可以任意的修改的，为了确保数据的安全性，在TS中可以对属性的权限进行设置</li><li>只读属性（readonly）：<ul><li>如果在声明属性时添加一个readonly，则属性便成了只读属性无法修改</li></ul></li><li>TS中属性具有三种修饰符：<ul><li>public（默认值），可以在类、子类和对象中修改</li><li>protected ，可以在类、子类中修改</li><li>private ，可以在类中修改</li></ul></li><li>示例：<ul><li>public<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="attr">name</span>: <span class="built_in">string</span>; <span class="comment">// 写或什么都不写都是public</span></span><br><span class="line">    <span class="keyword">public</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以在类中修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 可以通过对象修改</span></span><br></pre></td></tr></table></figure></li><li>protected<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中可以修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure></li><li>private<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">// 可以修改</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`大家好，我是<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(name, age);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name; <span class="comment">//子类中不能修改</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">p.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>;<span class="comment">// 不能修改</span></span><br></pre></td></tr></table></figure></li></ul></li><li>属性存取器<ul><li>对于一些不希望被任意修改的属性，可以将其设置为private</li><li>直接将其设置为private将导致无法再通过对象修改其中的属性</li><li>我们可以在类中定义一组读取、设置属性的方法，这种对属性读取或设置的属性被称为属性的存取器</li><li>读取属性的方法叫做setter方法，设置属性的方法叫做getter方法</li><li>示例：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="attr">_name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">name</span>()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">name: <span class="built_in">string</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_name</span> = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;孙悟空&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>); <span class="comment">// 通过getter读取name属性</span></span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&#x27;猪八戒&#x27;</span>; <span class="comment">// 通过setter修改name属性</span></span><br></pre></td></tr></table></figure></li></ul></li><li>静态属性<ul><li>静态属性（方法），也称为类属性。使用静态属性无需创建实例，通过类即可直接使用</li><li>静态属性（方法）使用static开头</li><li>示例：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Tools</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="variable constant_">PI</span> = <span class="number">3.1415926</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">sum</span>(<span class="params">num1: <span class="built_in">number</span>, num2: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 + num2</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Tools</span>.<span class="property">PI</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Tools</span>.<span class="title function_">sum</span>(<span class="number">123</span>, <span class="number">456</span>));</span><br></pre></td></tr></table></figure></li></ul></li><li>this<ul><li>在类中，使用this表示当前对象</li></ul></li></ul><h4 id="2-2、继承">2.2、继承</h4><ul><li>继承时面向对象中的又一个特性</li><li>通过继承可以将其他类中的属性和方法引入到当前类中<ul><li>示例：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure></li></ul></li><li>通过继承可以在不修改类的情况下完成对类的扩展</li><li>重写<ul><li>发生继承时，如果子类中的方法会替换掉父类中的同名方法，这就称为方法的重写</li><li>示例：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="attr">age</span>: <span class="built_in">number</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: <span class="built_in">string</span>, age: <span class="built_in">number</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span>&#123;</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>在汪汪叫！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子类中的run方法，会重写父类中的run方法！`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&#x27;旺财&#x27;</span>, <span class="number">4</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure><ul><li>在子类中可以使用super来完成对父类的引用</li></ul></li></ul></li><li>抽象类（abstract class）<ul><li>抽象类是专门用来被其他类所继承的类，它只能被其他类所继承不能用来创建实例</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="title function_">run</span>(): <span class="built_in">void</span>;</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;动物在叫~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animals</span>&#123;</span><br><span class="line">    <span class="title function_">run</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;狗在跑~&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用abstract开头的方法叫做抽象方法，抽象方法没有方法体只能定义在抽象类中，继承抽象类时抽象方法必须要实现</li></ul></li></ul><h3 id="3、接口（Interface）">3、接口（Interface）</h3><p>接口的作用类似于抽象类，不同点在于接口中的所有方法和属性都是没有实值的，换句话说接口中的所有方法都是抽象方法。接口主要负责定义一个类的结构，接口可以去限制一个对象的接口，对象只有包含接口中定义的所有属性和方法时才能匹配接口。同时，可以让一个类去实现接口，实现接口时类中要保护接口中的所有属性。</p><ul><li>示例（检查对象类型）：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">sayHello</span>():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">per: Person</span>)&#123;</span><br><span class="line">    per.<span class="title function_">sayHello</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(&#123;<span class="attr">name</span>:<span class="string">&#x27;孙悟空&#x27;</span>, <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Hello, 我是 <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span>`</span>)&#125;&#125;);</span><br></pre></td></tr></table></figure></li><li>示例（实现）<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span>;</span><br><span class="line">    <span class="title function_">sayHello</span>():<span class="built_in">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"><span class="keyword">public</span> name: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">sayHello</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;大家好，我是&#x27;</span>+<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="4、泛型（Generic）">4、泛型（Generic）</h3><p>定义一个函数或类时，有些情况下无法确定其中要使用的具体类型（返回值、参数、属性的类型不能确定），此时泛型便能够发挥作用。<br>举个例子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params">arg: <span class="built_in">any</span></span>): <span class="built_in">any</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上例中，test函数有一个参数类型不确定，但是能确定的时其返回值的类型和参数的类型是相同的，由于类型不确定所以参数和返回值均使用了any，但是很明显这样做是不合适的，首先使用any会关闭TS的类型检查，其次这样设置也不能体现出参数和返回值是相同的类型</p><ul><li>使用泛型：</li></ul>  <figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> test&lt;T&gt;(<span class="attr">arg</span>: T): T&#123;</span><br><span class="line"><span class="keyword">return</span> arg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里的<code>&lt;T&gt;</code>就是泛型，T是我们给这个类型起的名字（不一定非叫T），设置泛型后即可在函数中使用T来表示该类型。所以泛型其实很好理解，就表示某个类型。</li><li>那么如何使用上边的函数呢？<ul><li>方式一（直接使用）：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">test</span>(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>使用时可以直接传递参数使用，类型会由TS自动推断出来，但有时编译器无法自动推断时还需要使用下面的方式</li></ul></li><li>方式二（指定类型）：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test&lt;<span class="built_in">number</span>&gt;(<span class="number">10</span>)</span><br></pre></td></tr></table></figure><ul><li>也可以在函数后手动指定泛型</li></ul></li></ul></li><li>可以同时指定多个泛型，泛型间使用逗号隔开：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> test&lt;T, K&gt;(<span class="attr">a</span>: T, <span class="attr">b</span>: K): K&#123;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">test&lt;<span class="built_in">number</span>, <span class="built_in">string</span>&gt;(<span class="number">10</span>, <span class="string">&quot;hello&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>使用泛型时，完全可以将泛型当成是一个普通的类去使用</li></ul></li><li>类中同样可以使用泛型：<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>&lt;T&gt;&#123;</span><br><span class="line">    <span class="attr">prop</span>: T;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">prop: T</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">prop</span> = prop;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>除此之外，也可以对泛型的范围进行约束<figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">MyInter</span>&#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="built_in">number</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> test&lt;T <span class="keyword">extends</span> <span class="title class_">MyInter</span>&gt;(<span class="attr">arg</span>: T): <span class="built_in">number</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> arg.<span class="property">length</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用T extends MyInter表示泛型T必须是MyInter的子类，不一定非要使用接口类和抽象类同样适用。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typescript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法与外挂标签写法汇总</title>
      <link href="/posts/20230301.html"/>
      <url>/posts/20230301.html</url>
      
        <content type="html"><![CDATA[<h1>1.Markdown语法自带格式</h1><div class="note info flat"><p>参考：<a href="https://blog.csdn.net/u014061630/article/details/81359144">Markdown语法图文全面详解(10分钟学会)</a></p></div><div class="note warning flat"><p>注意：此页面偶尔会存在CSS冲突问题!</p></div><h2 id="1-1-代码块">1.1 代码块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\```shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br><span class="line">\```</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">VSCode终端</span></span><br><span class="line">hexo clean; hexo s</span><br><span class="line">hexo clean; hexo g; hexo d</span><br><span class="line">git add .; git commit -m &quot;npm publish&quot;; npm version patch; </span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cmder终端</span></span><br><span class="line">hexo clean &amp;&amp; hexo s</span><br><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line">git add . &amp;&amp; git commit -m &quot;npm publish&quot; &amp;&amp; npm version patch</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-2-多级标题">1.2 多级标题</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># H1</span></span><br><span class="line"><span class="section">## H2</span></span><br><span class="line"><span class="section">### H3</span></span><br><span class="line"><span class="section">#### H4</span></span><br><span class="line"><span class="section">##### H5</span></span><br><span class="line"><span class="section">###### H6</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>见本文章标题!</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-3-文字样式">1.3 文字样式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">u</span>&gt;</span></span>下划线演示<span class="language-xml"><span class="tag">&lt;/<span class="name">u</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">文字<span class="strong">**加粗**</span>演示</span><br><span class="line"></span><br><span class="line">文字<span class="emphasis">*斜体*</span>演示</span><br><span class="line"></span><br><span class="line">文本<span class="code">`高亮`</span>演示</span><br><span class="line"></span><br><span class="line">文本~~删除~~线演示</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span> = <span class="string">5</span>&gt;</span></span>5号字<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">face</span>=<span class="string">&quot;黑体&quot;</span>&gt;</span></span>黑体<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">blue</span>&gt;</span></span>蓝色<span class="language-xml"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">td</span> <span class="attr">bgcolor</span>=<span class="string">MistyRose</span>&gt;</span></span>这里的背景色是：MistyRosen，此处输入任意想输入的内容<span class="language-xml"><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p><u>下划线演示</u></p><p>文字<strong>加粗</strong>演示</p><p>文字<em>斜体</em>演示</p><p>文本<code>高亮</code>演示</p><p>文本<s>删除</s>线演示</p><p><font size = 5>5号字</font><br><font face="黑体">黑体</font><br><font color=blue>蓝色</font></p><table><tr><td bgcolor=MistyRose>这里的背景色是：MistyRosen，此处输入任意想输入的内容</td></tr></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="note info flat"><p>上述要点可参考:<a href="https://blog.csdn.net/qq_43732429/article/details/108034518">【Markdown语法】字体颜色大小及文字底色设置</a></p></div><h2 id="1-4-引用">1.4 引用</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="quote">&gt;  Java</span></span><br><span class="line"><span class="quote">&gt; 二级引用演示</span></span><br><span class="line"><span class="quote">&gt; MySQL</span></span><br><span class="line"><span class="quote">&gt; &gt;外键</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;事务</span></span><br><span class="line"><span class="quote">&gt; &gt;</span></span><br><span class="line"><span class="quote">&gt; &gt;<span class="strong">**行级锁**</span>(引用内部一样可以用格式)</span></span><br><span class="line"><span class="quote">&gt; </span></span><br><span class="line"><span class="quote">&gt; ....</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><blockquote><p>Java<br>二级引用演示<br>MySQL</p><blockquote><p>外键</p><p>事务</p><p><strong>行级锁</strong>(引用内部一样可以用格式)</p></blockquote><p>…</p></blockquote><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-5-分割线">1.5 分割线</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="strong">**<span class="emphasis">*</span></span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><hr><hr><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-6-列表-跟空格都可以">1.6 列表(*,+,-跟空格都可以)</h2><h3 id="1-6-1-无序列表">1.6.1 无序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">*</span> Java</span><br><span class="line"><span class="bullet">*</span> Python</span><br><span class="line"><span class="bullet">*</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">+</span> Java</span><br><span class="line"><span class="bullet">+</span> Python</span><br><span class="line"><span class="bullet">+</span> ...</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> Java</span><br><span class="line"><span class="bullet">-</span> Python</span><br><span class="line"><span class="bullet">-</span> ...</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><ul><li>Java</li><li>Python</li><li>…</li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h3 id="1-6-2-有序列表">1.6.2 有序列表</h3><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 注意后面有空格</span></span><br><span class="line"><span class="bullet">1.</span> </span><br><span class="line"><span class="bullet">2.</span> </span><br><span class="line"><span class="bullet">3.</span> </span><br><span class="line"><span class="bullet">4.</span> </span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li></li><li></li><li></li><li></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-7-图片">1.7 图片</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 本地图片</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/assets/pusheencode.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:50%;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="section"># 在线图片</span></span><br><span class="line">![<span class="string">code</span>](<span class="link">https://cdn.jsdelivr.net/gh/Fomalhaut1998/markdown_pic/img/code.png</span>)</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>本地图片:<br><img src="/assets/pusheencode.webp" alt="示例图片" style="zoom:50%;" /><br>在线图片:<br><img src="https://cdn.jsdelivr.net/gh/Fomalhaut1998/markdown_pic/img/code.png" alt="code"></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-8-表格">1.8 表格</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| 项目标号 | 资金     | 备注 |</span><br><span class="line">| -------- | -------- | ---- |</span><br><span class="line">| 1        | 100，000 | 无   |</span><br><span class="line">| 2        | 200，000 | 无   |</span><br><span class="line">| 3        | 300,600  | 重要 |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th>项目标号</th><th>资金</th><th>备注</th></tr></thead><tbody><tr><td>1</td><td>100，000</td><td>无</td></tr><tr><td>2</td><td>200，000</td><td>无</td></tr><tr><td>3</td><td>300,600</td><td>重要</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="1-9-公式">1.9 公式</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\Gamma(z)=\int<span class="emphasis">_0^\infty t^&#123;z-1&#125;e^&#123;-t&#125;dt.</span></span><br><span class="line"><span class="emphasis">$$</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>$$<br>\Gamma(z)=\int_0^\infty t^{z-1}e^{-t}dt.<br>$$</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.Butterfly外挂标签</h1><div class="note info flat"><p>这部分参考安知鱼:<a href="https://anzhiy.cn/posts/7d58.html">基于Butterfly的外挂标签引入</a></p></div><h2 id="2-1-行内文本样式-text">2.1 行内文本样式 text</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% u 文本内容 %&#125;</span><br><span class="line">&#123;% emp 文本内容 %&#125;</span><br><span class="line">&#123;% wavy 文本内容 %&#125;</span><br><span class="line">&#123;% del 文本内容 %&#125;</span><br><span class="line">&#123;% kbd 文本内容 %&#125;</span><br><span class="line">&#123;% psw 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">1.</span> 带 &#123;% u 下划线 %&#125; 的文本</span><br><span class="line"><span class="bullet">2.</span> 带 &#123;% emp 着重号 %&#125; 的文本</span><br><span class="line"><span class="bullet">3.</span> 带 &#123;% wavy 波浪线 %&#125; 的文本</span><br><span class="line"><span class="bullet">4.</span> 带 &#123;% del 删除线 %&#125; 的文本</span><br><span class="line"><span class="bullet">5.</span> 键盘样式的文本 &#123;% kbd command %&#125; + &#123;% kbd D %&#125;</span><br><span class="line"><span class="bullet">6.</span> 密码样式的文本：&#123;% psw 这里没有验证码 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-2-行内文本-span">2.2 行内文本 span</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% span 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% span red, 红色 %&#125;、&#123;% span yellow, 黄色 %&#125;、&#123;% span green, 绿色 %&#125;、&#123;% span cyan, 青色 %&#125;、&#123;% span blue, 蓝色 %&#125;、&#123;% span gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% span center logo large, Volantis %&#125;</span><br><span class="line">&#123;% span center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span>、<span class='p yellow'>黄色</span>、<span class='p green'>绿色</span>、<span class='p cyan'>青色</span>、<span class='p blue'>蓝色</span>、<span class='p gray'>灰色</span>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<br><span class='p center logo large'>Volantis</span><br><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-3-段落文本-p">2.3 段落文本 p</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% p 样式参数(参数以空格划分), 文本内容 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>字体</code>: logo, code</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>大小</code>: small, h4, h3, h2, h1, large, huge, ultra</li><li><code>对齐方向</code>: left, center, right</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> 彩色文字</span><br><span class="line">在一段话中方便插入各种颜色的标签，包括：&#123;% p red, 红色 %&#125;、&#123;% p yellow, 黄色 %&#125;、&#123;% p green, 绿色 %&#125;、&#123;% p cyan, 青色 %&#125;、&#123;% p blue, 蓝色 %&#125;、&#123;% p gray, 灰色 %&#125;。</span><br><span class="line"><span class="bullet">-</span> 超大号文字</span><br><span class="line">文档「开始」页面中的标题部分就是超大号文字。</span><br><span class="line">&#123;% p center logo large, Volantis %&#125;</span><br><span class="line">&#123;% p center small, A Wonderful Theme for Hexo %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p>、<p class='p yellow'>黄色</p>、<p class='p green'>绿色</p>、<p class='p cyan'>青色</p>、<p class='p blue'>蓝色</p>、<p class='p gray'>灰色</p>。</li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。</li></ul><p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-4-引用note">2.4 引用note</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">通用配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">语法格式</button></li><li class="tab"><button type="button" data-href="#分栏-3">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-4">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-5">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line">  border<span class="emphasis">_radius: 3</span></span><br><span class="line"><span class="emphasis">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="emphasis">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line"><span class="emphasis">  light_</span>bg<span class="emphasis">_offset: 0</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 自带icon</span></span><br><span class="line">&#123;% note [class] [no-icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"><span class="section"># 外部icon</span></span><br><span class="line">&#123;% note [color] [icon] [style] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.自带icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / primary / success / info / warning / danger ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】不显示 icon</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><p>2.外部icon</p><table><thead><tr><th>参数</th><th style="text-align:center">用法</th></tr></thead><tbody><tr><td>class</td><td style="text-align:center">【可选】标识，不同的标识有不同的配色 （ default / blue / pink / red / purple / orange / green ）</td></tr><tr><td>no-icon</td><td style="text-align:center">【可选】可配置自定义 icon (只支持 fontawesome 图标, 也可以配置 no-icon )</td></tr><tr><td>style</td><td style="text-align:center">【可选】可以覆盖配置中的 style （simple/modern/flat/disabled）</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note simple %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default simple %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary simple %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success simple %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info simple %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning simple %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger simple %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note modern %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default modern %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary modern %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success modern %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info modern %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning modern %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger modern %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note flat %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default flat %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary flat %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success flat %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info flat %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning flat %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger flat %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note disabled %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default disabled %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary disabled %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success disabled %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info disabled %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning disabled %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger disabled %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;默认 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default no-icon %&#125;default 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary no-icon %&#125;primary 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success no-icon %&#125;success 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info no-icon %&#125;info 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning no-icon %&#125;warning 提示块标签&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger no-icon %&#125;danger 提示块标签&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; simple %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; simple %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; simple%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; simple %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; simple %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; simple %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>2.<code>modern</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; modern %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; modern%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; modern %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; modern %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; modern %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>3.<code>flat</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; flat %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; flat %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; flat%&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; flat %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; flat %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; flat %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>4.<code>disabled</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note &#x27;fab fa-cc-visa&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue &#x27;fas fa-bullhorn&#x27; disabled %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink &#x27;fas fa-car-crash&#x27; disabled %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red &#x27;fas fa-fan&#x27; disabled %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange &#x27;fas fa-battery-half&#x27; disabled %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple &#x27;far fa-hand-scissors&#x27; disabled %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green &#x27;fab fa-internet-explorer&#x27; disabled %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>5.<code>no-icon</code>样式</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note blue no-icon %&#125;2021年快到了....&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note pink no-icon %&#125;小心开车 安全至上&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note red no-icon %&#125;这是三片呢？还是四片？&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note orange no-icon %&#125;你是刷 Visa 还是 UnionPay&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note purple no-icon %&#125;剪刀石头布&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note green no-icon %&#125;前端最讨厌的浏览器&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-5"><details class="folding-tag" blue><summary> 1.自带icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note simple"><p>默认 提示块标签</p></div><div class="note default simple"><p>default 提示块标签</p></div><div class="note primary simple"><p>primary 提示块标签</p></div><div class="note success simple"><p>success 提示块标签</p></div><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div><div class="note danger simple"><p>danger 提示块标签</p></div>2.`modern`样式<div class="note modern"><p>默认 提示块标签</p></div><div class="note default modern"><p>default 提示块标签</p></div><div class="note primary modern"><p>primary 提示块标签</p></div><div class="note success modern"><p>success 提示块标签</p></div><div class="note info modern"><p>info 提示块标签</p></div><div class="note warning modern"><p>warning 提示块标签</p></div><div class="note danger modern"><p>danger 提示块标签</p></div><p>3.<code>flat</code>样式</p><div class="note flat"><p>默认 提示块标签</p></div><div class="note default flat"><p>default 提示块标签</p></div><div class="note primary flat"><p>primary 提示块标签</p></div><div class="note success flat"><p>success 提示块标签</p></div><div class="note info flat"><p>info 提示块标签</p></div><div class="note warning flat"><p>warning 提示块标签</p></div><div class="note danger flat"><p>danger 提示块标签</p></div><p>4.<code>disabled</code>样式</p><div class="note disabled"><p>默认 提示块标签</p></div><div class="note default disabled"><p>default 提示块标签</p></div><div class="note primary disabled"><p>primary 提示块标签</p></div><div class="note success disabled"><p>success 提示块标签</p></div><div class="note info disabled"><p>info 提示块标签</p></div><div class="note warning disabled"><p>warning 提示块标签</p></div><div class="note danger disabled"><p>danger 提示块标签</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>默认 提示块标签</p></div><div class="note default no-icon flat"><p>default 提示块标签</p></div><div class="note primary no-icon flat"><p>primary 提示块标签</p></div><div class="note success no-icon flat"><p>success 提示块标签</p></div><div class="note info no-icon flat"><p>info 提示块标签</p></div><div class="note warning no-icon flat"><p>warning 提示块标签</p></div><div class="note danger no-icon flat"><p>danger 提示块标签</p></div>              </div>            </details><details class="folding-tag" blue><summary> 2.外部icon </summary>              <div class='content'>              <p>1.<code>simple</code>样式</p><div class="note icon-padding simple"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding simple"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding simple"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding simple"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding simple"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding simple"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding simple"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>2.<code>modern</code>样式</p><div class="note icon-padding modern"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding modern"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding modern"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding modern"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding modern"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>3.<code>flat</code>样式</p><div class="note icon-padding flat"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding flat"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding flat"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding flat"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding flat"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding flat"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding flat"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>4.<code>disabled</code>样式</p><div class="note icon-padding disabled"><i class="note-icon fab fa-cc-visa"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue icon-padding disabled"><i class="note-icon fas fa-bullhorn"></i><p>2021年快到了…</p></div><div class="note pink icon-padding disabled"><i class="note-icon fas fa-car-crash"></i><p>小心开车 安全至上</p></div><div class="note red icon-padding disabled"><i class="note-icon fas fa-fan"></i><p>这是三片呢？还是四片？</p></div><div class="note orange icon-padding disabled"><i class="note-icon fas fa-battery-half"></i><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple icon-padding disabled"><i class="note-icon far fa-hand-scissors"></i><p>剪刀石头布</p></div><div class="note green icon-padding disabled"><i class="note-icon fab fa-internet-explorer"></i><p>前端最讨厌的浏览器</p></div><p>5.<code>no-icon</code>样式</p><div class="note no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note blue no-icon flat"><p>2021年快到了…</p></div><div class="note pink no-icon flat"><p>小心开车 安全至上</p></div><div class="note red no-icon flat"><p>这是三片呢？还是四片？</p></div><div class="note orange no-icon flat"><p>你是刷 Visa 还是 UnionPay</p></div><div class="note purple no-icon flat"><p>剪刀石头布</p></div><div class="note green no-icon flat"><p>前端最讨厌的浏览器</p></div>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-5-上标标签-tip">2.5 上标标签 tip</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: success,error,warning,bolt,ban,home,sync,cogs,key,bell</li><li><code>自定义图标</code>: 支持fontawesome。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip %&#125;default&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip info %&#125;info&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip success %&#125;success&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip error %&#125;error&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip warning %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bolt %&#125;bolt&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip home %&#125;home&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip sync %&#125;sync&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip cogs %&#125;cogs&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip key %&#125;key&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip bell %&#125;bell&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip fa-atom %&#125;自定义font awesome图标&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="tip "><p>default</p></div><div class="tip info"><p>info</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-6-动态标签-anima">2.6 动态标签 anima</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip [参数，可选] %&#125;文本内容&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><div class="note info flat"><ol><li>将所需的CSS类添加到图标（或DOM中的任何元素）。</li><li>对于父级悬停样式，需要给目标元素添加指定CSS类，同时还要给目标元素的父级元素添加CSS类<code>faa-parent animated-hover</code>。（详情见示例及示例源码）<br>You can regulate the speed of the animation by adding the CSS class or . faa-fastfaa-slow</li><li>可以通过给目标元素添加CSS类<code>faa-fast</code>或<code>faa-slow</code>来控制动画快慢。</li></ol></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.On DOM load（当页面加载时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>2.调整动画速度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>3.On hover（当鼠标悬停时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><p>4.On parent hover（当鼠标悬停在父级元素时显示动画）</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tip warning faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-horizontal&quot;</span>&gt;</span></span>warning<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-parent animated-hover %&#125;<span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;faa-flash&quot;</span>&gt;</span></span>ban<span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.On DOM load（当页面加载时显示动画）</p><div class="tip warning faa-horizontal animated"><p>warning</p></div><div class="tip ban faa-flash animated"><p>ban</p></div>2.调整动画速度<div class="tip warning faa-horizontal animated faa-fast"><p>warning</p></div><div class="tip ban faa-flash animated faa-slow"><p>ban</p></div>3.On hover（当鼠标悬停时显示动画）<div class="tip warning faa-horizontal animated-hover"><p>warning</p></div><div class="tip ban faa-flash animated-hover"><p>ban</p></div>4.On parent hover（当鼠标悬停在父级元素时显示动画）<div class="tip warning faa-parent animated-hover"><p class="faa-horizontal">warning</p></div><div class="tip ban faa-parent animated-hover"><p class="faa-flash">ban</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-7-复选列表-checkbox">2.7 复选列表 checkbox</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>样式</code>: plus, minus, times</li><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% checkbox 纯文本测试 %&#125;</span><br><span class="line">&#123;% checkbox checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% checkbox red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% checkbox green checked, 绿色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox yellow checked, 黄色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox cyan checked, 青色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox blue checked, 蓝色 + 默认选中 %&#125;</span><br><span class="line">&#123;% checkbox plus green checked, 增加 %&#125;</span><br><span class="line">&#123;% checkbox minus yellow checked, 减少 %&#125;</span><br><span class="line">&#123;% checkbox times red checked, 叉 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="checkbox" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="checkbox" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="checkbox" />            <p>支持自定义颜色</p>            </div><div class='checkbox green checked'><input type="checkbox" checked="checked"/>            <p>绿色 + 默认选中</p>            </div><div class='checkbox yellow checked'><input type="checkbox" checked="checked"/>            <p>黄色 + 默认选中</p>            </div><div class='checkbox cyan checked'><input type="checkbox" checked="checked"/>            <p>青色 + 默认选中</p>            </div><div class='checkbox blue checked'><input type="checkbox" checked="checked"/>            <p>蓝色 + 默认选中</p>            </div><div class='checkbox plus green checked'><input type="checkbox" checked="checked"/>            <p>增加</p>            </div><div class='checkbox minus yellow checked'><input type="checkbox" checked="checked"/>            <p>减少</p>            </div><div class='checkbox times red checked'><input type="checkbox" checked="checked"/>            <p>叉</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-8-单选列表-radio">2.8 单选列表 radio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 样式参数（可选）, 文本（支持简单md） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>颜色</code>: red,yellow,green,cyan,blue,gray</li><li><code>选中状态</code>: checked</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% radio 纯文本测试 %&#125;</span><br><span class="line">&#123;% radio checked, 支持简单的 [<span class="string">markdown</span>](<span class="link">https://guides.github.com/features/mastering-markdown/</span>) 语法 %&#125;</span><br><span class="line">&#123;% radio red, 支持自定义颜色 %&#125;</span><br><span class="line">&#123;% radio green, 绿色 %&#125;</span><br><span class="line">&#123;% radio yellow, 黄色 %&#125;</span><br><span class="line">&#123;% radio cyan, 青色 %&#125;</span><br><span class="line">&#123;% radio blue, 蓝色 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class='checkbox'><input type="radio" />            <p>纯文本测试</p>            </div><div class='checkbox checked'><input type="radio" checked="checked"/>            <p>支持简单的 <a href="https://guides.github.com/features/mastering-markdown/">markdown</a> 语法</p>            </div><div class='checkbox red'><input type="radio" />            <p>支持自定义颜色</p>            </div><div class='checkbox green'><input type="radio" />            <p>绿色</p>            </div><div class='checkbox yellow'><input type="radio" />            <p>黄色</p>            </div><div class='checkbox cyan'><input type="radio" />            <p>青色</p>            </div><div class='checkbox blue'><input type="radio" />            <p>蓝色</p>            </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-9-时间轴-timeline">2.9 时间轴 timeline</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间线标题（可选）[,color] %&#125;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&lt;!-- timeline 时间节点（标题） --&gt;</span><br><span class="line">正文内容</span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>title</code>:标题/时间线</li><li><code>color</code>:<code>timeline</code>颜色:default(留空) / blue / pink / red / purple / orange / green</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;% timeline 时间轴样式,blue %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-07-24 [<span class="string">2.6.6 -&gt; 3.0</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 如果有 <span class="code">`hexo-lazyload-image`</span> 插件，需要删除并重新安装最新版本，设置 <span class="code">`lazyload.isSPA: true`</span>。</span><br><span class="line"><span class="bullet">2.</span> 2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <span class="code">`use_cdn: true`</span> 则需要删除。</span><br><span class="line"><span class="bullet">3.</span> 2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</span><br><span class="line"><span class="bullet">4.</span> 2.x 版本的置顶 <span class="code">`top: true`</span> 改为了 <span class="code">`pin: true`</span>，并且同样适用于 <span class="code">`layout: page`</span> 的页面。</span><br><span class="line"><span class="bullet">5.</span> 如果使用了 <span class="code">`hexo-offline`</span> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-05-15 [<span class="string">2.6.3 -&gt; 2.6.6</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6</span>) --&gt;</span><br><span class="line"></span><br><span class="line">不需要额外处理。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- timeline 2020-04-20 [<span class="string">2.6.2 -&gt; 2.6.3</span>](<span class="link">https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3</span>) --&gt;</span><br><span class="line"></span><br><span class="line"><span class="bullet">1.</span> 全局搜索 <span class="code">`seotitle`</span> 并替换为 <span class="code">`seo_title`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的索引规则有变，使用 group 组件的文章内，<span class="code">`group: group_name`</span> 对应的组件名必须是 <span class="code">`group_name`</span>。</span><br><span class="line"><span class="bullet">2.</span> group 组件的列表名优先显示文章的 <span class="code">`short_title`</span> 其次是 <span class="code">`title`</span>。</span><br><span class="line"></span><br><span class="line">&lt;!-- endtimeline --&gt;</span><br><span class="line"></span><br><span class="line">&#123;% endtimeline %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'><p>时间轴样式</p></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-07-24 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases">2.6.6 -&gt; 3.0</a></p></div></div><div class='timeline-item-content'><ol><li>如果有 <code>hexo-lazyload-image</code> 插件，需要删除并重新安装最新版本，设置 <code>lazyload.isSPA: true</code>。</li><li>2.x 版本的 css 和 js 不适用于 3.x 版本，如果使用了 <code>use_cdn: true</code> 则需要删除。</li><li>2.x 版本的 fancybox 标签在 3.x 版本中被重命名为 gallery 。</li><li>2.x 版本的置顶 <code>top: true</code> 改为了 <code>pin: true</code>，并且同样适用于 <code>layout: page</code> 的页面。</li><li>如果使用了 <code>hexo-offline</code> 插件，建议卸载，3.0 版本默认开启了 pjax 服务。</li></ol></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-05-15 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.6">2.6.3 -&gt; 2.6.6</a></p></div></div><div class='timeline-item-content'><p>不需要额外处理。</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>2020-04-20 <a href="https://github.com/volantis-x/hexo-theme-volantis/releases/tag/2.6.3">2.6.2 -&gt; 2.6.3</a></p></div></div><div class='timeline-item-content'><ol><li>全局搜索 <code>seotitle</code> 并替换为 <code>seo_title</code>。</li><li>group 组件的索引规则有变，使用 group 组件的文章内，<code>group: group_name</code> 对应的组件名必须是 <code>group_name</code>。</li><li>group 组件的列表名优先显示文章的 <code>short_title</code> 其次是 <code>title</code>。</li></ol></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-10-链接卡片-link">2.10 链接卡片 link</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 标题, 链接, 图片链接（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% link 糖果屋教程贴, https://akilar.top/posts/615e2dec/, https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="tag link"><a class="link-card" title="糖果屋教程贴" href="https://akilar.top/posts/615e2dec/"><div class="left"><img src="https://cdn.cbd.int/akilar-candyassets@1.0.36/image/siteicon/favicon.ico"/></div><div class="right"><p class="text">糖果屋教程贴</p><p class="url">https://akilar.top/posts/615e2dec/</p></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-11-按钮-btns">2.11 按钮 btns</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns 样式参数 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% cell 标题, 链接, 图片或者图标 %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>圆角样式：rounded, circle</li><li>增加文字样式：可以在容器内增加 <code>&lt;b&gt;</code>标题<code>&lt;/b&gt;</code>和<code>&lt;p&gt;</code>描述文字<code>&lt;/p&gt;</code></li><li>布局方式：<br>默认为自动宽度，适合视野内只有一两个的情况。</li></ol><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>wide</td><td>宽一点的按钮</td></tr><tr><td>fill</td><td>填充布局，自动铺满至少一行，多了会换行</td></tr><tr><td>center</td><td>居中，按钮之间是固定间距</td></tr><tr><td>around</td><td>居中分散</td></tr><tr><td>grid2</td><td>等宽最多2列，屏幕变窄会适当减少列数</td></tr><tr><td>grid3</td><td>等宽最多3列，屏幕变窄会适当减少列数</td></tr><tr><td>grid4</td><td>等宽最多4列，屏幕变窄会适当减少列数</td></tr><tr><td>grid5</td><td>等宽最多5列，屏幕变窄会适当减少列数</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle grid5 %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% cell xaoxuu, https://xaoxuu.com, https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>2.或者含有图标的按钮</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns rounded grid5 %&#125;</span><br><span class="line">&#123;% cell 下载源码, /, fas fa-download %&#125;</span><br><span class="line">&#123;% cell 查看文档, /, fas fa-book-open %&#125;</span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><p>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;% btns circle center grid5 %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p red, 专业版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/Fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#x27;https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1&#x27;</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&#x27;fab fa-apple&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">b</span>&gt;</span></span>心率管家<span class="language-xml"><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span></span><br><span class="line">  &#123;% p green, 免费版 %&#125;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/Fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">&#123;% endbtns %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.如果需要显示类似「团队成员」之类的一组含有头像的链接</p><div class="btns circle grid5">            <a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a><a class="button" href='https://xaoxuu.com' title='xaoxuu'><img src='https://cdn.jsdelivr.net/gh/xaoxuu/cdn-assets/avatar/avatar.png'>xaoxuu</a>          </div>2.或者含有图标的按钮<div class="btns rounded grid5">            <a class="button" href='/' title='下载源码'><i class='fas fa-download'></i>下载源码</a><a class="button" href='/' title='查看文档'><i class='fas fa-book-open'></i>查看文档</a>          </div>3.圆形图标 + 标题 + 描述 + 图片 + 网格5列 + 居中<div class="btns circle center grid5">            <a href='https://apps.apple.com/cn/app/heart-mate-pro-hrm-utility/id1463348922?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p red'>专业版</p>  <img src='https://cdn.jsdelivr.net/gh/Fomalhaut1998/cdn-assets/qrcode/heartmate_pro.png'></a><a href='https://apps.apple.com/cn/app/heart-mate-lite-hrm-utility/id1475747930?ls=1'>  <i class='fab fa-apple'></i>  <b>心率管家</b>  <p class='p green'>免费版</p>  <img src='https://cdn.jsdelivr.net/gh/Fomalhaut1998/cdn-assets/qrcode/heartmate_lite.png'></a>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-12-github卡片-ghcard">2.12 github卡片 ghcard</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% ghcard 用户名, 其它参数（可选） %&#125;</span><br><span class="line">&#123;% ghcard 用户名/仓库, 其它参数（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><p>使用<code>,</code>分割各个参数。写法为：<code>参数名=参数值</code><br>以下只写几个常用参数值。</p><table><thead><tr><th><strong>参数名</strong></th><th>取值</th><th>释义</th></tr></thead><tbody><tr><td>hide</td><td>stars,commits,prs,issues,contribs</td><td>隐藏指定统计</td></tr><tr><td>count_private</td><td>true</td><td>将私人项目贡献添加到总提交计数中</td></tr><tr><td>show_icons</td><td>true</td><td>显示图标</td></tr><tr><td>theme</td><td>查阅:<a href="https://github.com/anuraghazra/github-readme-stats/blob/master/themes/README.md">Available Themes</a></td><td>主题</td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.用户信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard Fomalhaut1998 %&#125; | &#123;% ghcard Fomalhaut1998, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard Fomalhaut1998, theme=buefy %&#125; | &#123;% ghcard Fomalhaut1998, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard Fomalhaut1998, theme=onedark %&#125; | &#123;% ghcard Fomalhaut1998, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard Fomalhaut1998, theme=algolia %&#125; | &#123;% ghcard Fomalhaut1998, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><p>2.仓库信息卡片</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=vue %&#125; |</span><br><span class="line">| -- | -- |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=buefy %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-light %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=onedark %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=solarized-dark %&#125; |</span><br><span class="line">| &#123;% ghcard volantis-x/hexo-theme-volantis, theme=algolia %&#125; | &#123;% ghcard volantis-x/hexo-theme-volantis, theme=calm %&#125; |</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.用户信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=Fomalhaut1998&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=Fomalhaut1998&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=Fomalhaut1998&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=Fomalhaut1998&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=Fomalhaut1998&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=Fomalhaut1998&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=Fomalhaut1998&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/Fomalhaut1998"><img src="https://github-readme-stats.vercel.app/api/?username=Fomalhaut1998&theme=calm&show_owner=true"/></a></td></tr></tbody></table><p>2.仓库信息卡片</p><table><thead><tr><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&show_owner=true"/></a></th><th><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=vue&show_owner=true"/></a></th></tr></thead><tbody><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=buefy&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-light&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=onedark&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=solarized-dark&show_owner=true"/></a></td></tr><tr><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=algolia&show_owner=true"/></a></td><td><a class="ghcard" rel="external nofollow noopener noreferrer" href="https://github.com/volantis-x/hexo-theme-volantis"><img src="https://github-readme-stats.vercel.app/api/pin/?username=volantis-x&repo=hexo-theme-volantis&theme=calm&show_owner=true"/></a></td></tr></tbody></table><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-13-github徽标-ghbdage">2.13 github徽标 ghbdage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage [right],[left],[logo]||[color],[link],[title]||[option] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>left</code>：徽标左边的信息，必选参数。</li><li><code>right</code>: 徽标右边的信息，必选参数，</li><li><code>logo</code>：徽标图标，图标名称详见<a href="https://simpleicons.org/">simpleicons</a>，可选参数。</li><li><code>color</code>：徽标右边的颜色，可选参数。</li><li><code>link</code>：指向的链接，可选参数。</li><li><code>title</code>：徽标的额外信息，可选参数。主要用于优化SEO，但<code>object</code>标签不会像<code>a</code>标签一样在鼠标悬停显示<code>title</code>信息。</li><li><code>option</code>：自定义参数，支持<a href="https://shields.io/">shields.io</a>的全部API参数支持，具体参数可以参看上文中的拓展写法示例。形式为<code>name1=value2&amp;name2=value2</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.基本参数,定义徽标左右文字和图标</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Theme,Butterfly %&#125;</span><br><span class="line">&#123;% bdage Frame,Hexo,hexo %&#125;</span><br></pre></td></tr></table></figure><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage CDN,JsDelivr,jsDelivr||abcdef,https://metroui.org.ua/index.html,本站使用JsDelivr为静态资源提供CDN加速 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割</span><br><span class="line">&#123;% bdage Source,GitHub,GitHub||,https://github.com/ %&#125;</span><br></pre></td></tr></table></figure><p>3.拓展参数，支持shields的API的全部参数内容</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bdage Hosted,Vercel,Vercel||brightgreen,https://vercel.com/,本站采用双线部署，默认线路托管于Vercel||style=social&amp;logoWidth=20 %&#125;</span><br><span class="line">//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割</span><br><span class="line">&#123;% bdage Hosted,Vercel,Vercel||||style=social&amp;logoWidth=20&amp;logoColor=violet %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.基本参数,定义徽标左右文字和图标</p><p><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Butterfly-Theme-orange?logo=&color=orange&link=&"></object><br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Hexo-Frame-orange?logo=hexo&color=orange&link=&"></object></p><p>2.信息参数，定义徽标右侧内容背景色，指向链接</p><p><object class="ghbdage" style="margin-inline:5px" title="本站使用JsDelivr为静态资源提供CDN加速" standby="loading..." data="https://img.shields.io/badge/JsDelivr-CDN-orange?logo=jsDelivr&color=abcdef&link=https://metroui.org.ua/index.html&"></object><br>//如果是跨顺序省略可选参数，仍然需要写个逗号,用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/GitHub-Source-orange?logo=GitHub&color=orange&link=https://github.com/&"></object></p><p>3.拓展参数，支持shields的API的全部参数内容</p><p><object class="ghbdage" style="margin-inline:5px" title="本站采用双线部署，默认线路托管于Vercel" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=brightgreen&link=https://vercel.com/&style=social&logoWidth=20"></object><br>//如果是跨顺序省略可选参数组，仍然需要写双竖线||用作分割<br><object class="ghbdage" style="margin-inline:5px" title="" standby="loading..." data="https://img.shields.io/badge/Vercel-Hosted-orange?logo=Vercel&color=orange&link=&style=social&logoWidth=20&logoColor=violet"></object></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-14-网站卡片-sites">2.14 网站卡片 sites</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% site 标题, url=链接, screenshot=截图链接, avatar=头像链接（可选）, description=描述（可选） %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% sitegroup %&#125;</span><br><span class="line">&#123;% site xaoxuu, url=https://xaoxuu.com, screenshot=https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg, avatar=https://cdn.jsdelivr.net/gh/Fomalhaut1998/cdn-assets/avatar/avatar.png, description=简约风格 %&#125;</span><br><span class="line">&#123;% site inkss, url=https://inkss.cn, screenshot=https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg, avatar=https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site MHuiG, url=https://blog.mhuig.top, screenshot=https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png, avatar=https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Colsrch, url=https://colsrch.top, screenshot=https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png, avatar=https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% site Linhk1606, url=https://linhk1606.github.io, screenshot=https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png, avatar=https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png, description=这是一段关于这个网站的描述文字 %&#125;</span><br><span class="line">&#123;% endsitegroup %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="site-card-group"><a class="site-card" href="https://Fomalhaut1998.com"><div class="img"><img src="https://i.loli.net/2020/08/21/VuSwWZ1xAeUHEBC.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Fomalhaut1998/cdn-assets/avatar/avatar.png"/><span class="title">Fomalhaut1998</span><span class="desc">简约风格</span></div></a><a class="site-card" href="https://inkss.cn"><div class="img"><img src="https://i.loli.net/2020/08/21/Vzbu3i8fXs6Nh5Y.jpg"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/inkss/common@master/static/web/avatar.jpg"/><span class="title">inkss</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://blog.mhuig.top"><div class="img"><img src="https://i.loli.net/2020/08/22/d24zpPlhLYWX6D1.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/MHuiG/imgbed@master/data/p.png"/><span class="title">MHuiG</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://colsrch.top"><div class="img"><img src="https://i.loli.net/2020/08/22/dFRWXm52OVu8qfK.png"/></div><div class="info"><img src="https://cdn.jsdelivr.net/gh/Colsrch/images/Colsrch/avatar.jpg"/><span class="title">Colsrch</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a><a class="site-card" href="https://linhk1606.github.io"><div class="img"><img src="https://i.loli.net/2020/08/21/3PmGLCKicnfow1x.png"/></div><div class="info"><img src="https://i.loli.net/2020/02/09/PN7I5RJfFtA93r2.png"/><span class="title">Linhk1606</span><span class="desc">这是一段关于这个网站的描述文字</span></div></a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-15-行内图片-inlineimage">2.15 行内图片 inlineimage</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% inlineimage 图片链接, height=高度（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>高度</code>：height=20px</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">这是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif %&#125; 一段话。</span><br><span class="line"></span><br><span class="line">这又是 &#123;% inlineimage https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif, height=40px %&#125; 一段话。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>这是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/0000.gif" style="height:1.5em"/> 一段话。</p><p>这又是 <img no-lazy class="inline" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/aru-l/5150.gif" style="height:40px;"/> 一段话。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-16-单张图片-image">2.16 单张图片 image</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>图片宽度高度：width=300px, height=32px</li><li>图片描述：alt=图片描述（butterfly需要在主题配置文件中开启图片描述）</li><li>占位背景色：bg=#f2f2f2</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>2.指定宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px %&#125;</span><br></pre></td></tr></table></figure><p>3.指定宽度并添加描述：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, alt=每天下课回宿舍的路，没有什么故事。 %&#125;</span><br></pre></td></tr></table></figure><p>4.设置占位背景色：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% image https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg, width=400px, bg=#1D0C04, alt=优化不同宽度浏览的观感 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.添加描述：</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>2..指定宽度<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" style="width:400px;"/></div></div>3.指定宽度并添加描述：<div class="img-wrap"><div class="img-bg"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="每天下课回宿舍的路，没有什么故事。" style="width:400px;"/></div><span class="image-caption">每天下课回宿舍的路，没有什么故事。</span></div>4.设置占位背景色：<div class="img-wrap"><div class="img-bg" style="background:#1D0C04"><img class="img" src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper-minimalist/2020/025.jpg" alt="优化不同宽度浏览的观感" style="width:400px;"/></div><span class="image-caption">优化不同宽度浏览的观感</span></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-17-音频-audio">2.17 音频 audio</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio 音频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% audio https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class="audio"><audio controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/Lumia1020.mp3' type='audio/mp3'>Your browser does not support the audio tag.</audio></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-18-视频-video">2.18 视频 video</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video 视频链接 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>对齐方向</code>：left, center, right</li><li><code>列数</code>：逗号后面直接写列数，支持 1 ～ 4 列。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.100%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br></pre></td></tr></table></figure><p>2.50%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 2 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><p>3.25%宽度</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;% videos, 4 %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG<span class="emphasis">_0341.mov %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% video https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_</span>0341.mov %&#125;</span><br><span class="line">&#123;% endvideos %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.100%宽度</p><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div>2.50%宽度<div class="videos" col='2'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div>3.25%宽度<div class="videos" col='4'><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div><div class="video"><video controls preload><source src='https://github.com/volantis-x/volantis-docs/releases/download/assets/IMG_0341.mov' type='video/mp4'>Your browser does not support the video tag.</video></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-19-相册-gallery">2.19 相册 gallery</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line">&#123;% galleryGroup name description link img-url %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">markdown 圖片格式</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ul><li>gallerygroup 相册图库</li></ul><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>name</td><td>图库名字</td></tr><tr><td>description</td><td>图库描述</td></tr><tr><td>link</td><td>链接到对应相册的地址</td></tr><tr><td>img-url</td><td>图库封面</td></tr></tbody></table><ul><li><p>gallery 相册</p><p>区别于旧版的Gallery相册,新的Gallery相册会自动根据图片长度进行排版，书写也更加方便，与markdown格式一样。可根据需要插入到相应的md。无需再自己配置长宽。<strong>建议在粘贴时故意使用长短、大小、横竖不一的图片</strong>，会有更好的效果。（尺寸完全相同的图片只会平铺输出，效果很糟糕）</p></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;gallery-group-main&quot;</span>&gt;</span></span></span><br><span class="line">&#123;% galleryGroup MC 在Rikkaの六花服务器里留下的足迹 &#x27;/gallery/MC/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg %&#125;</span><br><span class="line">&#123;% galleryGroup Gundam 哦咧哇gundam哒！ &#x27;/gallery/Gundam/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png %&#125;</span><br><span class="line">&#123;% galleryGroup I-am-Akilar 某种意义上也算自拍吧 &#x27;/gallery/I-am-Akilar/&#x27; https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png %&#125;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2.gallery 相册</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% gallery %&#125;</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg</span>)</span><br><span class="line">![](<span class="link">https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg</span>)</span><br><span class="line">&#123;% endgallery %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.gallerygroup 相册图库</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/1.jpg' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">MC</div>  <p>在Rikkaの六花服务器里留下的足迹</p>  <a href='/gallery/MC/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907110508327.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">Gundam</div>  <p>哦咧哇gundam哒！</p>  <a href='/gallery/Gundam/'></a>  </figcaption>  </figure>  <figure class="gallery-group">  <img class="gallery-group-img no-lightbox" src='https://cdn.cbd.int/akilar-candyassets@1.0.36/image/20200907113116651.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">I-am-Akilar</div>  <p>某种意义上也算自拍吧</p>  <a href='/gallery/I-am-Akilar/'></a>  </figcaption>  </figure></div>2.gallery 相册<div class="fj-gallery"><p><img src="https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg" alt=""><br><img src="https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg" alt=""></p>          </div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-20-折叠框-folding">2.20 折叠框 folding</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><p>1.gallerygroup 相册图库</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 参数（可选）, 标题 %&#125;</span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><!-- tab 参数配置 --><ol><li><p><code>颜色</code>：blue, cyan, green, yellow, red</p></li><li><p><code>状态</code>：状态填写 open 代表默认打开。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;% folding 查看图片测试 %&#125;</span><br><span class="line"></span><br><span class="line">![](<span class="link">https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg</span>)</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding cyan open, 查看默认打开的折叠框 %&#125;</span><br><span class="line"></span><br><span class="line">这是一个默认打开的折叠框。</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding green, 查看代码测试 %&#125;</span><br><span class="line">假装这里有代码块（代码块没法嵌套代码块）</span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding yellow, 查看列表测试 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="bullet">-</span> haha</span><br><span class="line"><span class="bullet">-</span> hehe</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding red, 查看嵌套测试 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding blue, 查看嵌套测试2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% folding 查看嵌套测试3 %&#125;</span><br><span class="line"></span><br><span class="line">hahaha <span class="language-xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;height:24px&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endfolding %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-21-分栏-tab">2.21 分栏 tab</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">配置参数</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs Unique name, [index] %&#125;</span><br><span class="line">&lt;!-- tab [Tab caption] [@icon] --&gt;</span><br><span class="line">Any content (support inline tags too).</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>Unique name :</p><ul><li><p>选项卡块标签的唯一名称，不带逗号。</p></li><li><p>将在#id中用作每个标签及其索引号的前缀。</p></li><li><p>如果名称中包含空格，则对于生成#id，所有空格将由破折号代替。</p></li><li><p>仅当前帖子/页面的URL必须是唯一的！</p></li></ul></li><li><p>[index]:</p><ul><li><p>活动选项卡的索引号。</p></li><li><p>如果未指定，将选择第一个标签（1）。</p></li><li><p>如果index为-1，则不会选择任何选项卡。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[Tab caption]:</p><ul><li><p>当前选项卡的标题。</p></li><li><p>如果未指定标题，则带有制表符索引后缀的唯一名称将用作制表符的标题。</p></li><li><p>如果未指定标题，但指定了图标，则标题将为空。</p></li><li><p>可选参数。</p></li></ul></li><li><p>[@icon]:</p><ul><li><p>FontAwesome图标名称（全名，看起来像“ fas fa-font”）</p></li><li><p>可以指定带空格或不带空格；</p></li><li><p>例如’Tab caption @icon’ 和 ‘Tab caption@icon’.</p></li><li><p>可选参数。</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.Demo 1 - 预设选择第一个【默认】</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>2.Demo 2 - 预设选择tabs</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test2, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>3.Demo 3 - 没有预设值</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test3, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 1.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 2.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line"><span class="strong">**This is Tab 3.**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;% tabs test4 %&#125;</span><br><span class="line">&lt;!-- tab 第一个Tab --&gt;</span><br><span class="line"><span class="strong">**tab名字为第一个Tab**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @fab fa-apple-pay --&gt;</span><br><span class="line"><span class="strong">**只有图标 没有Tab名字**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab 炸弹@fas fa-bomb --&gt;</span><br><span class="line"><span class="strong">**名字+icon**</span></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.Demo 1 - 预设选择第一个【默认】</p><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>2.Demo 2 - 预设选择tabs</p><div class="tabs" id="test2"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test2-1">test2 1</button></li><li class="tab"><button type="button" data-href="#test2-2">test2 2</button></li><li class="tab active"><button type="button" data-href="#test2-3">test2 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test2-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test2-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content active" id="test2-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>3.Demo 3 - 没有预设值</p><div class="tabs" id="test3"><ul class="nav-tabs"><li class="tab"><button type="button" data-href="#test3-1">test3 1</button></li><li class="tab"><button type="button" data-href="#test3-2">test3 2</button></li><li class="tab"><button type="button" data-href="#test3-3">test3 3</button></li></ul><div class="tab-contents"><div class="tab-item-content" id="test3-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test3-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>4.Demo 4 - 自定义Tab名 + 只有icon + icon和Tab名</p><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-22-诗词标签-poem">2.22 诗词标签 poem</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-3">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><ol><li><code>title</code>：诗词标题</li><li><code>author</code>：作者，可以不写</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;% poem 水调歌头,苏轼 %&#125;</span><br><span class="line">丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。</span><br><span class="line">明月几时有？把酒问青天。</span><br><span class="line">不知天上宫阙，今夕是何年？</span><br><span class="line">我欲乘风归去，又恐琼楼玉宇，高处不胜寒。</span><br><span class="line">起舞弄清影，何似在人间？</span><br><span class="line"></span><br><span class="line">转朱阁，低绮户，照无眠。</span><br><span class="line">不应有恨，何事长向别时圆？</span><br><span class="line">人有悲欢离合，月有阴晴圆缺，此事古难全。</span><br><span class="line">但愿人长久，千里共婵娟。</span><br><span class="line">&#123;% endpoem %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><div class='poem'><div class='poem-title'>水调歌头</div><div class='poem-author'>苏轼</div><p>丙辰中秋，欢饮达旦，大醉，作此篇，兼怀子由。<br>明月几时有？把酒问青天。<br>不知天上宫阙，今夕是何年？<br>我欲乘风归去，又恐琼楼玉宇，高处不胜寒。<br>起舞弄清影，何似在人间？</p><p>转朱阁，低绮户，照无眠。<br>不应有恨，何事长向别时圆？<br>人有悲欢离合，月有阴晴圆缺，此事古难全。<br>但愿人长久，千里共婵娟。</p></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-23-阿里图标-icon">2.23 阿里图标 icon</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon [icon-xxxx],[font-size] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>icon-xxxx</code>：表示图标<code>font-class</code>,可以在自己的阿里矢量图标库项目的<code>font-class</code>引用方案内查询并复制。</li><li><code>font-size</code>：表示图标大小，直接填写数字即可，单位为<code>em</code>。图标大小默认值为<code>1em</code>。</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat<span class="emphasis">_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-ox_</span>chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-tiger<span class="emphasis">_yin,5 %&#125;&#123;% icon icon-tiger,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rabbit_</span>mao,1 %&#125;&#123;% icon icon-rabbit,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dragon<span class="emphasis">_chen,3 %&#125;&#123;% icon icon-dragon,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-snake_</span>si,5 %&#125;&#123;% icon icon-snake,6 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-horse<span class="emphasis">_wu %&#125;&#123;% icon icon-horse,2 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-goat_</span>wei,3 %&#125;&#123;% icon icon-goat,4 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-monkey<span class="emphasis">_shen,5 %&#125;&#123;% icon icon-monkey,6 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-rooster_</span>you %&#125;&#123;% icon icon-rooster,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-dog<span class="emphasis">_xu,3 %&#125;&#123;% icon icon-dog,4 %&#125;</span></span><br><span class="line"><span class="emphasis"></span></span><br><span class="line"><span class="emphasis">&#123;% icon icon-boar_</span>hai,5 %&#125;&#123;% icon icon-boar,6 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rat_zi"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rat"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-ox_chou"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-ox"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-tiger_yin"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-tiger"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rabbit_mao"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rabbit"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dragon_chen"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dragon"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-snake_si"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-snake"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-horse_wu"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-horse"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-goat_wei"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-goat"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-monkey_shen"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-monkey"></use></svg></p><p><svg class="icon" style="width:1em; height:1em" aria-hidden="true"><use xlink:href="#icon-rooster_you"></use></svg><svg class="icon" style="width:2em; height:2em" aria-hidden="true"><use xlink:href="#icon-rooster"></use></svg></p><p><svg class="icon" style="width:3em; height:3em" aria-hidden="true"><use xlink:href="#icon-dog_xu"></use></svg><svg class="icon" style="width:4em; height:4em" aria-hidden="true"><use xlink:href="#icon-dog"></use></svg></p><p><svg class="icon" style="width:5em; height:5em" aria-hidden="true"><use xlink:href="#icon-boar_hai"></use></svg><svg class="icon" style="width:6em; height:6em" aria-hidden="true"><use xlink:href="#icon-boar"></use></svg></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-24-特效标签wow">2.24 特效标签wow</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-2">渲染演示</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow [animete],[duration],[delay],[offset],[iteration] %&#125;</span><br><span class="line">内容</span><br><span class="line">&#123;% endwow %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>animate</code>: 动画样式，效果详见<a href="https://animate.style/">animate.css参考文档</a></li><li><code>duration</code>: 选填项，动画持续时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>delay</code>: 选填项，动画开始的延迟时间，单位可以是<code>ms</code>也可以是<code>s</code>。例如<code>3s</code>，<code>700ms</code>。</li><li><code>offset</code>: 选填项，开始动画的距离（相对浏览器底部）</li><li><code>iteration</code>: 选填项，动画重复的次数</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><p>1.flip动画效果。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__zoomIn,5s,5s,100,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note blue &#x27;fas fa-bullhorn&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`zoomIn`动画效果，持续`5s`，延时`5s`，离底部`100`距离时启动，重复`10`次</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>3.slideInRight动画效果，持续5s，延时5s</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__slideInRight,5s,5s %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note orange &#x27;fas fa-car&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`slideInRight`动画效果，持续`5s`，延时`5s`。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% wow animate<span class="strong">__heartBeat,,5s,,10 %&#125;</span></span><br><span class="line"><span class="strong">&#123;% note red &#x27;fas fa-battery-half&#x27; modern%&#125;</span></span><br><span class="line"><span class="strong">`heartBeat`动画效果，延时`5s`，重复`10`次。</span></span><br><span class="line"><span class="strong">&#123;% endnote %&#125;</span></span><br><span class="line"><span class="strong">&#123;% endwow %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>1.flip动画效果。</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>2.zoomIn动画效果，持续5s，延时5s，离底部100距离时启动，重复10次</p><div class='wow animate__zoomIn' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset='100'  data-wow-iteration='10' ><div class="note blue icon-padding modern"><i class="note-icon fas fa-bullhorn"></i><p><code>zoomIn</code>动画效果，持续<code>5s</code>，延时<code>5s</code>，离底部<code>100</code>距离时启动，重复<code>10</code>次</p></div></div><p>3.slideInRight动画效果，持续5s，延时5s</p><div class='wow animate__slideInRight' data-wow-duration='5s' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='' ><div class="note orange icon-padding modern"><i class="note-icon fas fa-car"></i><p><code>slideInRight</code>动画效果，持续<code>5s</code>，延时<code>5s</code>。</p></div></div><p>4.heartBeat动画效果，延时5s，重复10次。此处注意不用的参数位置要留空，用逗号间隔。</p><div class='wow animate__heartBeat' data-wow-duration='' data-wow-delay='5s' data-wow-offset=''  data-wow-iteration='10' ><div class="note red icon-padding modern"><i class="note-icon fas fa-battery-half"></i><p><code>heartBeat</code>动画效果，延时<code>5s</code>，重复<code>10</code>次。</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-25-进度条-progress">2.25  进度条 progress</h2><div class="note info flat"><p>进度条标签参考<a href="https://rongbuqiu.com/jdt.html">沂佰孜猫-给HEXO文章添加彩色进度条</a>。<br>源样式提取自<a href="https://zwying0814.gitbook.io/cuteen/">Cuteen</a>主题。</p></div><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-2">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress [width] [color] [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>width</code>: 0到100的阿拉伯数字</li><li><code>color</code>: 颜色，取值有red,yellow,green,cyan,blue,gray</li><li><code>text</code>:进度条上的文字内容</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% progress 10 red 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 30 yellow 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 50 green 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 70 cyan 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 90 blue 进度条样式预览 %&#125;</span><br><span class="line">&#123;% progress 100 gray 进度条样式预览 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-26-注释-notation">2.26 注释 notation</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota [label] , [text] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p><code>label</code>: 注释词汇</p></li><li><p><code>text</code>: 悬停显示的注解内容</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% nota 把鼠标移动到我上面试试 ,可以看到注解内容出现在顶栏 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p><span class='nota' data-nota='可以看到注解内容出现在顶栏'>把鼠标移动到我上面试试</span></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-27-气泡注释-bubble">2.27 气泡注释 bubble</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% bubble [content] , [notation] ,[background-color] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>content</code>: 注释词汇</li><li><code>notation</code>: 悬停显示的注解内容</li><li><code>background-color</code>: 可选，气泡背景色。默认为“#71a4e3”</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的&#123;% bubble 兄弟相邻选择器,&quot;例如 h1 + p &#123;margin-top:50px;&#125;&quot; %&#125;，&#123;% bubble flex布局,&quot;Flex 是 Flexible Box 的缩写，意为&quot;弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;,&quot;#ec5830&quot; %&#125;，&#123;% bubble transform变换,&quot;transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。&quot;,&quot;#1db675&quot; %&#125;，animation的&#123;% bubble 贝塞尔速度曲线,&quot;贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋&quot;,&quot;#de4489&quot; %&#125;写法，还有今天刚看到的&#123;% bubble clip-path,&quot;clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。&quot;,&quot;#868fd7&quot; %&#125;属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>最近我学到了不少新玩意儿（虽然对很多大佬来说这些已经是旧技术了），比如CSS的<span class="bubble-content">兄弟相邻选择器</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#71a4e3;">例如 h1 + p {margin-top:50px;}</span></span>，<span class="bubble-content">flex布局</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#ec5830;">Flex 是 Flexible Box 的缩写，意为弹性布局&quot;，用来为盒状模型提供最大的灵活性&quot;</span></span>，<span class="bubble-content">transform变换</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#1db675;">transform 属性向元素应用 2D 或 3D 转换。该属性允许我们对元素进行旋转、缩放、移动或倾斜。</span></span>，animation的<span class="bubble-content">贝塞尔速度曲线</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#de4489;">贝塞尔曲线(Bézier curve)，又称贝兹曲线或贝济埃曲线，是应用于二维图形应用程序的数学曲线。一般的矢量图形软件通过它来精确画出曲线，贝兹曲线由线段与节点组成，节点是可拖动的支点，线段像可伸缩的皮筋</span></span>写法，还有今天刚看到的<span class="bubble-content">clip-path</span><span class="bubble-notation"><span class="bubble-item" style="background-color:#868fd7;">clip-path属性使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏。</span></span>属性。这些对我来说很新颖的概念狠狠的冲击着我以前积累起来的设计思路。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-28-引用文献-reference">2.28 引用文献 reference</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% referto [id] , [literature] %&#125;</span><br><span class="line">&#123;% referfrom [id] , [literature] , [url] %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><p>referto 引用上标</p><ul><li><p><code>id</code>: 上标序号内容，需与referfrom标签的id对应才能实现跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li></ul></li><li><p>referfrom 引用出处</p><ul><li><p><code>id</code>: 序号内容，需与referto标签的id对应才能实现 跳转</p></li><li><p><code>literature</code>: 引用的参考文献名称</p></li><li><p><code>url</code>: 引用的参考文献链接，可省略</p></li></ul></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Akilarの糖果屋(akilar.top)是一个私人性质的博客&#123;% referto &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27; %&#125;，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架&#123;% referto &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27; %&#125;，Butterfly主题&#123;% referto &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">本项目参考了Volantis&#123;% referto &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27; %&#125;的标签样式。引入<span class="code">`[tag].js`</span>，并针对<span class="code">`butterfly`</span>主题修改了相应的<span class="code">`[tag].styl`</span>。在此鸣谢<span class="code">`Volantis`</span>主题众开发者。</span><br><span class="line">主要参考内容包括各个volantis的内置标签插件文档&#123;% referto &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27; %&#125;</span><br><span class="line">Butterfly主题的各个衍生魔改&#123;% referto &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27; %&#125;&#123;% referto &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27; %&#125;&#123;% referto &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27; %&#125;&#123;% referto &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27; %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% referfrom &#x27;[1]&#x27;,&#x27;Akilarの糖果屋群聊简介&#x27;,&#x27;https://jq.qq.com/?<span class="emphasis">_wv=1027&amp;k=pGLB2C0N&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[2]&#x27;,&#x27;Hexo中文文档&#x27;,&#x27;https://hexo.io/zh-cn/docs/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[3]&#x27;,&#x27;Butterfly 安装文档(一) 快速开始&#x27;,&#x27;https://butterfly.js.org/posts/21cfbf15/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[4]&#x27;,&#x27;hexo-theme-volantis 标签插件&#x27;,&#x27;https://volantis.js.org/v5/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[5]&#x27;,&#x27;Volantis文档:内置标签插件&#x27;,&#x27;https://volantis.js.org/tag-plugins/&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[6]&#x27;,&#x27;Butterfly 安装文档:标签外挂（Tag Plugins&#x27;,&#x27;https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[7]&#x27;,&#x27;小弋の生活馆全样式预览&#x27;,&#x27;https://lovelijunyi.gitee.io/posts/c898.html&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[8]&#x27;,&#x27;l-lin-font-awesome-animation&#x27;,&#x27;https://github.com/l-lin/font-awesome-animation&#x27; %&#125;</span></span><br><span class="line"><span class="emphasis">&#123;% referfrom &#x27;[9]&#x27;,&#x27;小康的butterfly主题使用文档&#x27;,&#x27;https://www.antmoe.com/posts/3b43914f/&#x27; %&#125;</span></span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-29-PDF展示">2.29 PDF展示</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf 文件路径 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li><code>文件路径</code>: 可以是相对路径或者是在线链接</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 1.本地文件:在md文件路径下创建一个同名文件夹，其内放pdf文件名为xxx.pdf的文件</span></span><br><span class="line">&#123;% pdf xxx.pdf %&#125;</span><br><span class="line"><span class="section"># 2.在线链接</span></span><br><span class="line">&#123;% pdf https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><p>2.在线链接(要放到最外层才能起作用)</p><pre><code>&lt;div class=&quot;row&quot;&gt;&lt;embed src=&quot;https://cdn.jsdelivr.net/gh/Justlovesmile/CDN/pdf/小作文讲义.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;&lt;/div&gt;</code></pre><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-30-Hexo-tag-map-插件">2.30 Hexo-tag-map 插件</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% + 标签值 + 经度 + 纬度 + 文本 + 缩放等级 + 宽 + 高 + 默认图层 + %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><table><thead><tr><th style="text-align:center">地图名</th><th style="text-align:center">标签值 &lt;必填&gt;</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">缩放等级 (默认 14)</th><th style="text-align:center">宽 (默认 100%) / 高 (默认 360px)</th><th style="text-align:center">默认图层 (默认 1)</th></tr></thead><tbody><tr><td style="text-align:center">混合地图</td><td style="text-align:center">map</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~7</td></tr><tr><td style="text-align:center">谷歌地图</td><td style="text-align:center">googleMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~20</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">高德地图</td><td style="text-align:center">gaodeMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 3~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~3</td></tr><tr><td style="text-align:center">百度地图</td><td style="text-align:center">baiduMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 4~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~2</td></tr><tr><td style="text-align:center">Geoq 地图</td><td style="text-align:center">geoqMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~5</td></tr><tr><td style="text-align:center">openstreet 地图</td><td style="text-align:center">openstreetMap</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">取值 1~18</td><td style="text-align:center">百分数或具体值 (100% 或 360px)</td><td style="text-align:center">不支持此参数</td></tr></tbody></table><ol><li>参数之间，用英文逗号相隔</li><li>参数必须按上述事例顺序输入，不得为空</li><li>同一个页面，同一组经纬度值，只能插入一个相同标签值的地图 (若有需要，可以将第二个地图上，经度或纬度末尾删除一两个数)</li><li>参数取值必须在上述范围内</li><li>默认图层：即地图叠加层的值，默认常规地图还是卫星地图，可按地图显示顺序取值</li><li>缩放等级，数字越大，地图比例尺越小，显示的越精细</li><li>除标签值外，其他参数选填，但 每个参数的左边的参数必填</li><li>谷歌地图需要外网才能加载查看</li></ol><p>坐标获取：<a href="https://lbs.amap.com/tools/picker">高德地图坐标拾取系统</a> 、<a href="https://api.map.baidu.com/lbsapi/getpoint/index.html">百度地图坐标拾取系统</a></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% map 120.101101,30.239119 %&#125;</span><br><span class="line">&#123;% googleMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！ %&#125;</span><br><span class="line">&#123;% geoqMap 120.101101,30.239119, 这里是西湖灵隐寺，据说求姻缘很灵验哦！, 13, 90%, 320px, 3 %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div class="map-box"><div id="map-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div></div><script type="text/javascript">var normalm=L.tileLayer.chinaProvider('GaoDe.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imgm=L.tileLayer.chinaProvider('GaoDe.Satellite.Map',{maxZoom:20,minZoom:1,attribution:'Amap'});var imga=L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion',{maxZoom:20,minZoom:1,attribution:'Amap'});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:20,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'});routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1});var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:21,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:21,minZoom:1,attribution:'Google Maps'});var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:21,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm]),image=L.layerGroup([imgm,imga]);var baseLayers={"高德地图":normal,"智图地图":normalm1,"谷歌地图":normalMap,"高德卫星地图":imgm,"谷歌卫星地图":satelliteMap,"高德卫星标注":image,"谷歌卫星标注":routeMap};var mymap=L.map('map-120.101101-30.239119',{center:[30.239119,120.101101],zoom:14,layers:[normal],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="googleMap-120.101101-30.239119" style="max-width:100%; height:360px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalMap=L.tileLayer.chinaProvider('Google.Normal.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),satelliteMap=L.tileLayer.chinaProvider('Google.Satellite.Map',{maxZoom:22,minZoom:1,attribution:'Google Maps'}),routeMap=L.tileLayer.chinaProvider('Google.Satellite.Annotion',{maxZoom:22,minZoom:1,attribution:'Google Maps'});var baseLayers={"谷歌地图":normalMap,"谷歌卫星图":satelliteMap,"谷歌卫星标注": routeMap};var overlayLayers={};var mymap=L.map("googleMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:14,layers:[normalMap],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.css"><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet@1.7.1.js"></script><script data-pjax src="https://cdn.jsdelivr.net/npm/hexo-tag-map/lib/leaflet.ChineseTmsProviders@1.0.4.js"></script><div id="geoqMap-120.101101-30.239119" style="max-width:90%; height:320px;display: block;margin:0 auto;z-index:1;border-radius: 5px;"></div><script type="text/javascript">var normalm1=L.tileLayer.chinaProvider('Geoq.Normal.Map',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm2=L.tileLayer.chinaProvider('Geoq.Normal.PurplishBlue',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm3=L.tileLayer.chinaProvider('Geoq.Normal.Gray',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm4=L.tileLayer.chinaProvider('Geoq.Normal.Warm',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normalm5=L.tileLayer.chinaProvider('Geoq.Theme.Hydro',{maxZoom:20,minZoom:1,attribution:'GeoQ'});var normal=L.layerGroup([normalm1,normalm2,normalm3,normalm4,normalm5]);var baseLayers={"智图地图":normalm1,"午夜蓝":normalm2,"灰色":normalm3,"暖色":normalm4,"水系":normalm5};var mymap=L.map("geoqMap-120.101101-30.239119",{center:[30.239119,120.101101],zoom:13,layers:[normalm3],zoomControl:false});L.control.layers(baseLayers,null).addTo(mymap);L.control.zoom({zoomInTitle:'放大',zoomOutTitle:'缩小'}).addTo(mymap);var marker = L.marker(['30.239119','120.101101']).addTo(mymap);marker.bindPopup("这里是西湖灵隐寺，据说求姻缘很灵验哦！").openPopup();</script><br><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="2-31-隐藏块">2.31 隐藏块</h2><div class="tabs" id="分栏"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#分栏-1">标签语法</button></li><li class="tab"><button type="button" data-href="#分栏-2">参数配置</button></li><li class="tab"><button type="button" data-href="#分栏-3">示例源码</button></li><li class="tab"><button type="button" data-href="#分栏-4">渲染演示</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="分栏-1"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock display,bg,color %&#125;</span><br><span class="line">content</span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-2"><ol><li>content：要隐藏的内容</li><li>display：展示前按钮显示的文字（可选）</li><li>bg：按钮的背景颜色（可选）</li><li>color：按钮显示的文字的颜色（可选）</li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-3"><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;% hideBlock 点我预览, blue %&#125;</span><br><span class="line">这里有张图片：</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;image (1)&quot;</span> <span class="attr">style</span>=<span class="string">&quot;zoom:67%;&quot;</span> /&gt;</span></span></span><br><span class="line">&#123;% endhideBlock %&#125;</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="分栏-4"><div class="hide-block"><button type="button" class="hide-button" style="background-color:  blue;">点我预览    </button><div class="hide-content"><p>这里有张图片：<br><img src="https://s1.vika.cn/space/2022/10/30/b35fce448bc9404a8d65c3ce1e6e46eb" alt="image (1)" style="zoom:67%;" /></p></div></div><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用emoji和颜文字</title>
      <link href="/posts/20230303.html"/>
      <url>/posts/20230303.html</url>
      
        <content type="html"><![CDATA[<h1>小图标合集</h1><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">笑脸</button></li><li class="tab"><button type="button" data-href="#test-2">头像</button></li><li class="tab"><button type="button" data-href="#test-3">饰品</button></li><li class="tab"><button type="button" data-href="#test-4">蛋糕</button></li><li class="tab"><button type="button" data-href="#test-5">车辆</button></li><li class="tab"><button type="button" data-href="#test-6">爱心</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><p>😀😁😂🤣😃😄😅😆😉😊😋😎😍😘🥰😗😙😚☺🙂🤗🤩🤔<br>🤨😐😑😶🙄😏😣😥😮🤐😯😪😫🥱😴😌😛😜😝🤤😒😓😔😕<br>🙃🤑😲☹🙁😖😞😟😤😢😭😦😧😨😩🤯😬😰😱🥵🥶😳 🤪😵🥴😠😡🤬😷🤒🤕🤢🤮🤧😇🥳🥺🤡🤠🤥🤫🤭🧐<br>🤓😈👿👹👺💀☠👻👽👾🤖💩😺😸😹😻😼😽🙀😿😾🐱‍👤🐱‍🏍<br>🐱‍💻🐱‍🐉🐱‍👓🐱‍🚀🙈🙉🙊🐵🐶🐺🐱🦁🐯🦒🦊🦝🐮🐷🐗🐭🐹<br>🐰🐻🐨🐼🐸🦓🐴🦄🐔🐲🐽🐾🐒🦍🦧🦮🐕‍🦺🐩🐕🐈🐅🐆🐎🦌<br>🦏🦛🐂🐃🐄🐖🐏🐑🐐🐪🐫🦙🦘🦥🦨🦡🐘🐁🐀🦔🐇🐿🦎<br>🐊🐢🐍🐉🦕🦖🦦🦈🐬🐳🐋🐟🐠🐡🦐🦑🐙🦞🦀🐚🦆🐓🦃🦅🕊<br>🦢🦜🦩🦚🦉🐦🐧🐥🐤🐣🦇🦋🐌🐛🦟🦗🐜🐝🐞🦂🕷🕸🦠🧞<br>‍♀️🧞‍♂️🗣👤👥👁👀🦴🦷👅👄🧠🦾🦿👣🤺⛷🤼‍♂️🤼‍♀<br>👯‍♂️👯‍♀️💑👩‍❤️‍👩👨‍❤️‍👨💏👩‍❤️‍💋‍👩👨‍❤ ️<br>💋‍ 👨👪👨‍👩‍👦👨‍👩‍👧👨‍👩‍👧‍👦👨‍👩‍👦‍👦👨‍👩‍👧‍👧👨‍👨‍👦👨‍👨‍👧👨<br>‍👨‍👧‍👦👨‍👨‍👦‍👦👨‍👨‍👧‍👧👩‍👩‍👦👩‍👩‍👧👩‍👩‍👧‍👦👩‍👩‍👦‍👦👩‍👩‍👧‍👧<br>👩‍👦👩‍👧👩‍👧‍👦👩‍👦‍👦👩‍👧‍👧👨‍👦👨‍👧👨‍👧‍👦👨‍👦‍👦👨‍👧‍👧👭<br>👩🏻‍🤝‍👩🏻👩🏼‍🤝‍👩🏻👩🏼‍🤝‍👩🏼👩🏽‍🤝‍👩🏻👩🏽‍🤝‍👩🏼👩🏽‍🤝‍👩🏽👩🏾‍🤝‍👩🏻👩🏾‍🤝‍👩🏼👩🏾‍🤝‍👩🏽👩🏾‍🤝‍👩🏾👩🏿‍🤝‍👩🏻<br>👩🏿‍🤝‍👩🏼👩🏿‍🤝‍👩🏽👩🏿‍🤝‍👩🏾👩🏿‍🤝‍👩🏿👫👩🏻‍🤝‍🧑🏻👩🏻‍🤝‍🧑🏼👩🏻‍🤝‍🧑🏽👩🏻‍🤝‍🧑🏾👩🏻‍🤝‍🧑🏿<br>👩🏼‍🤝‍🧑🏻👩🏼‍🤝‍🧑🏼👩🏼‍🤝‍🧑🏽👩🏼‍🤝‍🧑🏾👩🏼‍🤝‍🧑🏿👩🏽‍🤝‍🧑🏻👩🏽‍🤝‍🧑🏼👩🏽‍🤝‍🧑🏽 👩🏽‍🤝<br>‍🧑🏾👩🏽‍🤝‍🧑🏿👩🏾‍🤝‍🧑🏻👩🏾‍🤝‍🧑🏼👩🏾‍🤝‍🧑🏽👩🏾‍🤝‍🧑🏾👩🏾‍🤝‍🧑🏿👩🏿‍🤝‍🧑🏻 👩🏿 ‍🤝‍🧑🏼👩🏿‍🤝‍🧑🏽👩🏿‍🤝‍🧑🏾<br>👩🏿‍🤝‍🧑🏿👬👨🏻‍🤝‍👨🏻👨🏼‍🤝‍👨🏻👨🏼‍🤝‍👨🏼👨🏽‍🤝‍👨🏼👨🏽‍🤝‍👨🏻 👨🏽‍🤝‍👨🏽👨🏾‍🤝‍👨🏻👨🏾‍🤝‍👨🏼👨🏾‍🤝‍👨🏽👨🏾‍🤝‍👨🏾👨🏿‍🤝‍👨🏻👨🏿‍🤝‍👨🏼👨🏿‍🤝‍👨🏽👨🏿‍🤝‍👨🏾👨🏿‍🤝‍👨🏿</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><p>👩👨🧑👧👦🧒👶👵👴🧓👩‍🦰👨‍🦰👩‍🦱👨‍🦱👩‍🦲👨‍🦲👨‍🦳👱‍♀️<br>👱‍♂️👸🤴👳‍♀️👳‍♂️👲🧔👼🤶🎅👮‍♀️👮‍♂️🕵️‍♀️🕵️‍♂️💂‍♀️<br>💂‍♂️👷‍♀️👷‍♂️👩‍⚕️👨‍⚕️👩‍🎓👨‍🎓👩‍🏫👨‍🏫👩‍⚖️👨‍⚖️<br>👩‍🌾👨‍🌾👩‍🍳👨‍🍳👩‍🔧👨‍🔧👩‍🏭👨‍🏭👩‍💼👨‍💼👩‍🔬👨‍🔬👩‍💻👨‍💻👩‍🎤👨‍🎤👩<br>‍🎨👨‍🎨👩‍✈️👨‍✈️👩‍🚀👨‍🚀👩‍🚒👨‍🚒🧕👰🤵🤱🤰🦸‍♀️🦸‍♂️🦹‍♀️🦹‍♂️<br>🧙‍♀️🧙‍♂️🧚‍♀️🧚‍♂️🧛‍♀️🧛‍♂️🧜‍♀️🧜‍♂️🧝‍♀️🧝‍♂️🧟‍♀️🧟‍♂️🙍‍♀️<br>🙍‍♂️🙎‍♀️🙎‍♂️🙅‍♀️🙅‍♂️🙆‍♀️🙆‍♂️🧏‍♀️🧏‍♂️💁‍♀️<br>💁‍♂️🙋‍♀️🙋‍♂️🙇‍♀️🙇‍♂️🤦‍♀️🤦‍♂️🤷‍♀️🤷‍♂️<br>💆‍♀️💆‍♂️💇‍♀️💇‍♂️🧖‍♀️🧖‍♂️🤹‍♀️🤹‍♂️👩‍🦽👨‍🦽👩‍🦼<br>👨‍🦼👩‍🦯👨‍🦯🧎‍♀️🧎‍♂️🧍‍♀️🧍‍♂️🚶‍♀️🚶‍♂️🏃‍♀️🏃‍♂️💃🕺<br>🧗‍♀️🧗‍♂️🧘‍♀️🧘‍♂️🛀🛌🕴🏇🏂🏌️‍♀️🏌️‍♂️🏄‍♀️🏄‍♂️🚣‍♀️<br>🚣‍♂️🏊‍♀️🏊‍♂️🤽‍♀️🤽‍♂️🤾‍♀️🤾‍♂️⛹️‍♀️⛹️‍♂️<br>🏋️‍♀️🏋️‍♂️🚴‍♀️🚴‍♂️🚵‍♀️🚵‍♂️🤸‍♀️🤸‍♂️🤳💪🦵🦶<br>👂🦻👃🤏👈👉☝👆✌✌🤞🖖🤘🤙🖐✋👌👍👎✊👊🤛🤜🤚👋✍🤟👏👐🙌🤲🙏🤝💅</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-3"><p>🎈🎆🎇🧨✨🎉🎊🎃🎄🎋🎍🎎🎏🎐🎑🧧🎀🎁🎗🎟🎫🎠🎡🎢🎪🎭🖼🎨<br>🧵🧶🛒👓🕶🦺🥽🥼🧥👔👕👖🩳🧣🧤🧦👗🥻👘👚👜👑⚾⚽🏓🏉<br>🏈🥅🥏🪁🎯🥇🥈🥉🏅🎖🏆🎰🕹🎮🪀🎴📢♥🔔♣♠🎸🎺🎷🎶🎵🔑🔐🔏🔓<br>⚒🛠🧪⚗🩸🧲🔫🖲🗿🔋💽🔍🔎📼📔📓📒📃📜📄📑📰📙📚📩📤📥📦📫<br>📪📬📭📁📂🗂🖌✒🗒📅📆🗓📎⌛⏳⌚⏰⏱⏲🗃✂📐🗑📍📌📋📊📉📈📇</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-4"><p>🍕🍔🍟🌭🧂🍿🥓🥚🍳🧇🥞🧈🍞🥐🥨🥯🥙🥪🌮🌯🥫🍖🍗🥩🍠 🥠<br>🥡🍱🍚🍛🍜🦪🍣🍤🍥🥮🍢🧆🥘🍲🍝🥣🍧🍦🍨🍩🍪🎂🍰🧁🍫🍬🍭<br>🍡🍮🍯🍼🥛🧃☕🍵🧉🍶🍾🍷🍸🍹🍺🍻🥂🥃🧊🥤🥢🍴🥄🏺🥝🥥🍇🍈🍉<br>🍊🍌🍋🍍🥭🍎🍏🍐🍑🍒🍓🍅🍆🌽🌶🍄🥑🥒🥬🥦🥔🧄🧅🥕🌰🥜💐🌸🏵<br>🌹🌺🌻🌼🌷🥀☘🌱🌲🌳🌴🌵🌾🌿🍀🍁🍂🍃</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-5"><p>🚗🚓🚕🛺🚙🚌🚎🚒🚚🚛🚜🚘🚔🚖🚍🦽🦼🛹🚲🛴🛵🏍🚄🚅🚈🚝🚞<br>🚃🚋🚆🛩🚉🪂🚊✈🚇🛫🚟🛬🚠💺🚡🚁🚀🚂🛸🛰⛵🚤🛥⛴🛳🚢⚓🌎🌏<br>🛤🏕🗺🏞🧭🛣🏔🏖⛰🏜🌋🏝🗻🏚🏙🏘🏗🏛🕋🕌🛕🕍⛩⛪去🏰🏯🗼🌉<br>🛁🌝🌤⛈⛅☁🌩🌨🌧🌦🌥🌜🌞⭐🌟🌈🌀🌬🌡☄🌠☔🌊⛱⚡❄☃⛄🔥</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-6"><p>❤🧡💛💚💙💜🤎🖤🤍💔❣💕💞💓💗💖💘💝💟💌💥💤💦💨💫🕳💯🔅🔆⚜<br>〽❓❔❗❕〰➰✔💲💱➕➖✖➗💭🗯💬🗨👁‍🗨🕐🕑🕒🕧🕦🕥🕤🕝🕟🕠🕡🕢</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h1>2.颜文字</h1><h2 id="2-1-常用颜文字：">2.1 常用颜文字：</h2><p>【啊啊】 w(ﾟДﾟ)w<br>【擦眼泪】 (ノへ￣、)<br>【不屑】 (￣_,￣ )<br>【好耶】 ヽ(✿ﾟ▽ﾟ)ノ<br>【棒】 (๑•̀ㅂ•́)و✧<br>【抽】 (￣ε(#￣)☆╰╮o(￣皿￣///)<br>【亲】 （づ￣3￣）づ╭❤～<br>【汗】 Σ( ° △ °|||)︴<br>【笨】 (～￣(OO)￣)ブ<br>【擦】 凸(艹皿艹 )<br>【啵啵】 (* ￣3)(ε￣ )<br>【挖鼻屎】 (￣rǒ￣)<br>【嗷】 ┗|｀O′|┛ 嗷~~<br>【飞】 ︿(￣︶￣)︿<br>【好滴】 (u‿ฺu✿ฺ)<br>【hi】 Hi~ o(￣▽￣)ブ<br>【啦啦】 ♪(^∇^)<br>【拍桌】 o(≧▽≦)ツ┏━┓<br>【惊喜】 ╰(°▽°)╯<br>【嘟嘴】 （○｀ 3′○）<br>【乖】 o(^＠^)o<br>【喂】 (#O′) 【愣住】 (°ー°〃) 【放屁】 ○|￣|_ =3 【哼哼】 o(￣ヘ￣o＃) 【可恶】 （＝。＝） 【切】 <s>( ﹁ ﹁ ) ~~~ 【去】 (ーー゛) 【生气】 (ー′ー)<br>【怨念】 o(一︿一+)o<br>【崩溃】 o(≧口≦)o<br>【不是我】 ㄟ( ▔, ▔ )ㄏ<br>【败了】 (o_ )ﾉ<br>【呃呃呃】 (⊙﹏⊙)<br>【切】 (ˉ▽￣～) 切</s><br>【无言】 （＊￣（エ）￣）<br>【摊手】 ┑(￣Д ￣)┍<br>【不懂】 (＠＠;)<br>【呆】 ━┳━　━┳━<br>【扶额】 (☆′益)c 【囧】 （′Д）<br>【投降】 ┗( T﹏T )┛<br>【我错了】 (。﹏。)<br>【喵星人】 ( =•ω•= )m<br>【喵呜】 ≡ω≡<br>【熊】 (￣(エ)￣)<br>【害羞】 (✿◡‿◡)<br>【脸红】 (/ω＼)<br>【呜呜呜】 ┭┮﹏┭┮<br>【拜拜】 ヾ(￣▽￣)Bye~Bye~<br>【斜眼】 ( ﹁ ﹁ ) ~→<br>【美味】 Ψ(￣∀￣)Ψ<br>【闪】 ✧(≖ ◡ ≖✿)<br>【淡定】 ━(￣ー￣*|||━━<br>【太可怕了】 ヽ(*。&gt;Д&lt;)o゜<br>【恐怖】 ┌(。Д。)┐<br>【orz】 ○|￣|_<br>【good】 o(￣▽￣)ｄ<br>【伤心】 (；′⌒`)<br>【糟糕】 X﹏X<br>【圣诞】 *&lt;|:-)</p><h2 id="2-2-高兴的颜文字">2.2 高兴的颜文字</h2><p>【棒】 (๑•̀ㅂ•́)و✧<br>【爆笑】 ヾ(≧▽≦*)o<br>【bingo】 (o゜▽゜)o☆[BINGO!]<br>【得瑟】 ～(￣▽￣～)(～￣▽￣)～<br>【得意】 &lt;(￣︶￣)&gt;<br>【嗯哪】 嗯~ o(￣▽￣)o<br>【飞】 ︿(￣︶￣)︿<br>【嘎嘎】 ．&lt;{=．．．．（嘎~嘎~嘎~）<br>【干杯】 (￣▽￣)～■干杯□～(￣▽￣)<br>【高兴】 φ(゜▽゜*)♪<br>【跟你说】 ╰(￣▽￣)╭<br>【go】 &lt;(￣︶￣)↗[GO!]<br>【good】 o(￣▽￣)ｄ<br>【哈哈哈哈】 ′∀)′∀)′∀)<em>′∀)<br>【嗨】 (｡･∀･)ﾉﾞ<br>【嗨】 ヾ(≧∇≦</em>)ゝ<br>【好滴】 (u‿ฺu✿ฺ)<br>【好滴】 （゜▽＾*））<br>【好开心】 (^▽^)<br>【好耶】 ヽ(✿ﾟ▽ﾟ)ノ<br>【happy】 (′▽ʃ♡ƪ) 【hi】 Hi~ o(<em>￣▽￣</em>)ブ 【hiahia】 ○( ＾皿＾)っHiahiahia… 【high】 (( へ(へ′∀)へ<br>【吼吼】 ^O^<br>【欢迎】 ( ＾∀＾）／欢迎＼( ＾∀＾）<br>【获胜】 ヾ(￣ー￣)X(^▽^)ゞ<br>【惊喜】 ╰(°▽°)╯<br>【惊喜】 ⊙▽⊙<br>【击掌】 ( ￣ー￣)人(^▽^ )<br>【卡拉ok】 …φ(0￣*)啦啦啦_φ(￣0￣)′<br>【k歌】 …φ(0￣)啦啦啦_φ(￣0￣)<br>【开心】 (^▽^)<br>【啦啦】 ♪(^∇^)<br>【乐】 (๑′ㅂ๑) 【乐】 φ(≧ω≦*)♪ 【乐呵】 (≧∀≦)ゞ 【满足】 (๑ˉ∀ˉ๑) 【满足】 o(<em>￣︶￣</em>)o 【咩哈哈】 &lt;(<em>￣▽￣</em>)/ 【ohyeah】 ε(<em>′･∀･｀)зﾞ 【哦哦】 （≧0≦）//（-_-。）・・・ 【噢耶】 (　ﾟ∀ﾟ) ﾉ♡ 【噢耶】 (^&amp;^)/ 【拍手】 ””(￣ー￣) (￣ー￣)//”” 【拍桌】 o(<em>≧▽≦)ツ┏━┓ 【飘】 (～￣▽￣)～ 【飘飘然】 ︿(￣︶￣)︿ 【噗】 (/≧▽≦)/ 【期待】 (☆▽☆) 【散花】 <em>★,°</em>:.☆(￣▽￣)/$:</em>.°★</em> 。 【闪】 ✧(≖ ◡ ≖✿) 【太棒了】 ㄟ(≧◇≦)ㄏ 【逃】 ヽ(ﾟ∀ﾟ*)ﾉ━━━ｩ♪ 【陶醉】 ( *︾▽︾) 【thx】 ☆⌒(<em>＾-゜)v THX!! 【天啊】 ♪(′∇)<br>【万岁】 ！★,°:.☆(￣▽￣)/$:.°★</em><br>【我回来啦】 ||ヽ(￣▽￣)ノミ|Ю<br>【我来了】 ~(～￣▽￣)～<br>【兴奋】 (p≧w≦q)<br>【幸福】 o(￣▽￣)o<br>【耶】 (＾－＾)V<br>【哟】 (＾Ｕ＾)ノ~ＹＯ<br>【有了】 (o゜▽゜)o☆<br>【赞】 (((o(ﾟ▽ﾟ)o)))<br>【涨】 (￣︶￣)↗<br>【振奋】 (o&gt;ε(o&gt;ｕ(≧∩≦)<br>【真好】 o(^▽^)o</p><h2 id="2-3-卖萌颜文字">2.3 卖萌颜文字</h2><p>【嗷】 ヾ(≧O≦)〃嗷~<br>【嗷】 ┗|｀O′|┛ 嗷~~<br>【表】 &lt;(￣3￣)&gt; 表！<br>【蹭】 ( ￣▽￣)((≧︶≦)<br>【等等】 …(*￣０￣)ノ[等等我…]<br>【好可爱】 （＾-＾）<br>【可爱】 n(≧▽≦)n<br>【卖萌】 =￣ω￣=<br>【真哒】 o(〃‘▽’〃)o</p><h2 id="2-4-震惊颜文字">2.4 震惊颜文字</h2><p>【啊啊】 Ｏ(≧口≦)Ｏ<br>【呆滞】 (￣△￣；)<br>【惊】 (⊙ˍ⊙)<br>【惊】 Σ(っ °Д °;)っ<br>【惊喜】 ╰(°▽°)╯</p><h2 id="2-5-亲吻颜文字">2.5 亲吻颜文字</h2><p>【啵啵】 (* ￣3)(ε￣ *)<br>【飞吻】 (*￣3￣)╭<br>【亲亲】 o(*￣3￣)o</p><h2 id="2-6-生气颜文字">2.6 生气颜文字</h2><p>【爆头】 ▄︻┻┳═一…… ☆（&gt;○&lt;）<br>【不开心】 ￣へ￣<br>【不满】 (￣︿￣)<br>【不满】 （＃￣～￣＃）<br>【不爽】 ( ￣︿￣)<br>【不要啊】 ヽ（≧□≦）ノ<br>【擦】 凸(艹皿艹 )<br>【哼哼】 o(￣ヘ￣o＃)</p><h2 id="2-7-无奈颜文字">2.7 无奈颜文字</h2><p>【呃呃呃】 (⊙﹏⊙)<br>【没办法】 ╮（╯＿╰）╭<br>【无奈】 ╮(╯▽╰)╭<br>【飘过】 …((/- -)/</p>]]></content>
      
      
      <categories>
          
          <category> 演示 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记</title>
      <link href="/posts/500.html"/>
      <url>/posts/500.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git常用命令">Git常用命令</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git config --global <a href="http://user.name">user.name</a> 用户名</td><td>设置用户签名</td></tr><tr><td>git config --global user.email 邮箱</td><td>设置用户签名</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库（将会记录版本）</td></tr><tr><td>git reflog</td><td>查看历史纪录</td></tr><tr><td>git log</td><td>查看详细历史记录</td></tr><tr><td>git reset --hard 版本号</td><td>版本穿梭</td></tr></tbody></table><h2 id="分支的操作">分支的操作</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把指定的分支合并到当前分支上</td></tr></tbody></table><h2 id="远程仓库操作">远程仓库操作</h2><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前所有远程地址</td></tr><tr><td>git remote add 别名 远程地址</td><td>添加远程仓库并为其起别名</td></tr><tr><td>git push 别名 分支</td><td>推送本地分支上的内容到远程仓库</td></tr><tr><td>git clone 远程地址</td><td>将远程仓库的内容克隆到本地</td></tr><tr><td>git pull 远程库地址别名 远程分支名</td><td>将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</td></tr></tbody></table><h2 id="SSH连接远程仓库">SSH连接远程仓库</h2><p>添加SSH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;553344777@qq.com&quot;</span></span><br></pre></td></tr></table></figure><p>检查SSH</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AJAX笔记</title>
      <link href="/posts/300.html"/>
      <url>/posts/300.html</url>
      
        <content type="html"><![CDATA[<h2 id="fetch">fetch</h2><blockquote><p>网站中可使用，nodejs需要安装第三方库</p></blockquote><h3 id="参数">参数</h3><p>res包含的一些内置函数：</p><ul><li><code>res.text()</code>：返回 URL 的文本内容。如果是网站，则返回 HTML。</li><li><code>res.json()</code>：返回格式化的 JSON 数据。</li><li><code>res.blob()</code>: 返回 blob 数据。</li><li><code>res.arrayBuffer()</code>：返回数组缓冲区数据</li><li><code>res.formData()</code>：返回 formData 数据。</li></ul><span id="more"></span><h3 id="基本使用">基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>())</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="搭配async-await">搭配async/await</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> <span class="title function_">fetch</span>(<span class="string">&#x27;url&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="title function_">json</span>());</span><br><span class="line">    <span class="comment">// 或者：let data = await (await fetch(&#x27;url&#x27;)).json()</span></span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="axios">axios</h2><blockquote><p>axios的请求是异步的，使用时要注意。</p></blockquote><h3 id="基本使用-2">基本使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">      .<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; data &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">      &#125;)</span><br><span class="line">      .<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure><h3 id="搭配async-await-2">搭配async/await</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; data &#125; = <span class="keyword">await</span> axios.<span class="title function_">get</span>(url)</span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="原生js封装ajax">原生js封装ajax</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Ajax</span> = &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">url, fn</span>) &#123;</span><br><span class="line">        <span class="comment">// XMLHttpRequest对象用于在后台与服务器交换数据   </span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, url, <span class="literal">true</span>);</span><br><span class="line">        xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// readyState == 4说明请求已完成</span></span><br><span class="line">            <span class="keyword">if</span> (xhr.<span class="property">readyState</span> == <span class="number">4</span> &amp;&amp; xhr.<span class="property">status</span> == <span class="number">200</span> || xhr.<span class="property">status</span> == <span class="number">304</span>) &#123;</span><br><span class="line">                <span class="comment">// 从服务器获得数据 </span></span><br><span class="line">                fn.<span class="title function_">call</span>(<span class="variable language_">this</span>, xhr.<span class="property">responseText</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        xhr.<span class="title function_">send</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使用Ajax</span></span><br><span class="line"><span class="title class_">Ajax</span>.<span class="title function_">get</span>(<span class="string">&#x27;url&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue2.0笔记</title>
      <link href="/posts/306.html"/>
      <url>/posts/306.html</url>
      
        <content type="html"><![CDATA[<h2 id="vue2-0">vue2.0</h2><h3 id="vue-指令">vue 指令</h3><h4 id="1-内容渲染指令">1. 内容渲染指令</h4><ol><li><code>v-text</code> 指令的缺点：会覆盖元素内部原有的内容！</li><li><code>&#123;&#123; &#125;&#125;</code> 插值表达式：在实际开发中用的最多，只是内容的占位符，不会覆盖原有的内容！</li><li><code>v-html</code> 指令的作用：可以把带有标签的字符串，渲染成真正的 HTML 内容！</li></ol><span id="more"></span><p><strong>v-text示例</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 把demo对应的值渲染到p标签中 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;!-- demo1的值会覆盖掉<span class="string">&quot;测试&quot;</span> --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span>测试<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="2-属性绑定指令">2. 属性绑定指令</h4><blockquote><p>注意：插值表达式只能用在元素的<strong>内容节点</strong>中，不能用在元素的<strong>属性节点</strong>中！</p></blockquote><ul><li><p>在 vue 中，可以使用 <code>v-bind:</code> 指令，为元素的属性动态绑定值；</p></li><li><p>简写是英文的 <code>:</code></p></li><li><p>在使用 v-bind 属性绑定期间，如果绑定内容需要进行动态拼接，则字符串的外面应该包裹单引号，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div :title=<span class="string">&quot;&#x27;box&#x27; + index&quot;</span>&gt;这是一个 div&lt;/div&gt;</span><br></pre></td></tr></table></figure></li></ul><h4 id="3-事件绑定指令">3. 事件绑定指令</h4><ol><li><p><code>v-on:</code> 简写是 <code>@</code></p></li><li><p>通过 v-on 绑定的事件处理函数，需要在 methods 节点中进行声明</p></li><li><p>语法格式为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;add&quot;</span>&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">   <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 如果在方法中要修改 data 中的数据，可以通过 this 访问到</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>$event</code> 的应用场景：如果默认的事件对象 e 被覆盖了，则可以手动传递一个  $event。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;add(3, $event)&quot;</span>&gt;&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">   <span class="title function_">add</span>(<span class="params">n, e</span>) &#123;</span><br><span class="line"><span class="comment">// 如果在方法中要修改 data 中的数据，可以通过 this 访问到</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">1</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>事件修饰符：</p><ul><li><p><code>.prevent</code>  阻止默认行为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a @click.<span class="property">prevent</span>=<span class="string">&quot;xxx&quot;</span>&gt;链接&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>.stop </code>  阻止事件冒泡</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button @click.<span class="property">stop</span>=<span class="string">&quot;xxx&quot;</span>&gt;按钮&lt;/button&gt;</span><br></pre></td></tr></table></figure></li><li><p><code>.capture</code>  以捕获模式触发当前的事件处理函数</p></li><li><p><code>.once</code>  绑定的事件只触发1次</p></li></ul></li><li><p>按键修饰符</p><p>在监听键盘事件时，我们经常需要判断详细的按键。此时，可以为键盘相关的事件添加按键修饰符，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;input @keyup.<span class="property">enter</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.esc</span>=<span class="string">&quot;clear&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><h4 id="4-v-model-指令">4. v-model 指令</h4><p><strong>vue 提供了 v-model 双向数据绑定指令，用来辅助开发者在不操作 DOM 的前提下，快速获取表单的数据。</strong></p><ol><li>input 输入框<ul><li>type=“radio”</li><li>type=“checkbox”</li><li>type=“xxxx”</li></ul></li><li>textarea</li><li>select</li></ol><p><strong>为了方便对用户输入的内容进行处理，vue 为 v-model 指令提供了 3 个修饰符，分别是：</strong></p><table><thead><tr><th>修饰符</th><th>作用</th><th>示例</th></tr></thead><tbody><tr><td>.number</td><td>自动将用户的输入值转为数值类型</td><td>&lt; input v-model.number=“age” &gt;</td></tr><tr><td>.trim</td><td>自动过滤用户输入的首尾空白字符</td><td>&lt; input v-model.trim=“msg” &gt;</td></tr><tr><td>.lazy</td><td>在“change”时而非“input”时更新</td><td>&lt; input v-model.lazy=“msg” &gt;</td></tr></tbody></table><h4 id="5-条件渲染指令">5. 条件渲染指令</h4><p><strong>条件渲染指令用来辅助开发者按需控制 DOM 的显示与隐藏。条件渲染指令有如下两个，分别是：</strong></p><ol><li><code>v-show</code> 的原理是：动态为元素添加或移除 <code>display: none</code> 样式，来实现元素的显示和隐藏<ul><li>如果要频繁的切换元素的显示状态，用 v-show 性能会更好</li></ul></li><li><code>v-if</code> 的原理是：每次动态创建或移除元素，实现元素的显示和隐藏<ul><li>如果刚进入页面的时候，某些元素默认不需要被展示，而且后期这个元素很可能也不需要被展示出来，此时 v-if 性能更好</li></ul></li></ol><blockquote><p>在实际开发中，绝大多数情况，不用考虑性能问题，直接使用 v-if 就好了！！！</p></blockquote><p>v-if 指令在使用的时候，有两种方式：</p><ol><li><p>直接给定一个布尔值 true 或 false</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-<span class="keyword">if</span>=<span class="string">&quot;true&quot;</span>&gt;被 v-<span class="keyword">if</span> 控制的元素&lt;/p&gt;</span><br></pre></td></tr></table></figure></li><li><p>给 v-if 提供一个判断条件，根据判断的结果是 true 或 false，来控制元素的显示和隐藏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-<span class="keyword">if</span>=<span class="string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;良好&lt;/p&gt;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>v-if</strong> 可以配合 <strong>v-else</strong> 和 <strong>v-else-if</strong> 使用</p></blockquote><h4 id="6-列表渲染指令">6. 列表渲染指令</h4><p>vue 提供了 v-for 列表渲染指令，用来辅助开发者基于一个数组来循环渲染一个列表结构。v-for 指令需要使 用 item in items 形式的特殊语法，其中：</p><ul><li>items 是待循环的数组</li><li>item 是被循环的每一项</li></ul><p><strong>v-for 中的索引</strong></p><p>v-for 指令还支持一个可选的第二个参数，即当前项的索引。</p><p>语法格式为 (item, index) in items，示例代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">v-<span class="keyword">for</span>=<span class="string">&quot;(item, index) in list&quot;</span></span><br></pre></td></tr></table></figure><p><strong>使用 v-for 建议为每项提供一个唯一的 key 属性</strong></p><p><strong>key 的注意事项</strong></p><ul><li>key 的值只能是字符串或数字类型</li><li>key 的值必须具有唯一性（即：key 的值不能重复）</li><li>建议把数据项 id 属性的值作为 key 的值（因为 id 属性的值具有唯一性）</li><li>使用 index 的值当作 key 的值没有任何意义（因为 index 的值不具有唯一性）</li><li>建议使用 v-for 指令时一定要指定 key 的值（既提升性能、又防止列表状态紊乱）</li></ul><h3 id="过滤器">过滤器</h3><ul><li><p>过滤器（Filters）是 vue 为开发者提供的功能，常用于文本的格式化。</p></li><li><p>过滤器可以用在两个地方：<strong>插值表达式</strong> 和 <strong>v-bind</strong> 属性绑定。</p></li><li><p>过滤器应该被添加在 JavaScript 表达式的尾部，由“管道符”进行调用。</p></li><li><p>在创建 vue 实例期间，可以在 <strong>filters</strong> 节点中定义过滤器。</p></li><li><p>过滤器可以串联地进行调用，通过多个管道符链接。</p></li><li><p>可以使用 <code>vue.filter()</code> 定义全局过滤器</p></li><li><p>过滤器可以传递参数</p></li></ul><p><strong>示例代码如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 管道符的前面是需要处理的值，后面是过滤器函数 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message | func &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;mid | formatid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="过滤器的注意点">过滤器的注意点</h4><ol><li>要定义到 filters 节点下，<strong>本质是一个函数</strong></li><li>在过滤器函数中，<strong>一定要有 return 值</strong></li><li>在过滤器的形参中，可以获取到“管道符”前面待处理的那个值</li><li>如果全局过滤器和私有过滤器名字一致，此时按照“<strong>就近原则</strong>”，调用的是”私有过滤器“</li></ol><h3 id="watch-侦听器">watch 侦听器</h3><h4 id="侦听器的格式">侦听器的格式</h4><ol><li><p>方法格式的侦听器</p><ul><li>缺点1：无法在刚进入页面的时候，自动触发！！！</li><li>缺点2：如果侦听的是一个对象，如果对象中的属性发生了变化，不会触发侦听器！！！</li></ul></li><li><p>对象格式的侦听器</p><ul><li><p>好处1：可以通过 <strong>immediate</strong> 选项，让侦听器自动触发！！！</p></li><li><p>好处2：可以通过 <strong>deep</strong> 选项，让侦听器深度监听对象中每个属性的变化！！！</p></li><li><blockquote><p>注意：对象格式的侦听器里面函数名必须是handel，否则会报错。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="comment">// handler 是固定写法，表示当 username 的值变化时，自动调用 handler 处理函数</span></span><br><span class="line">  <span class="attr">username</span>: &#123;</span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">n, o</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(n, o);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 表示页面初次渲染好之后，就立即触发当前的 watch 侦听器</span></span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote></li></ul></li><li><p>如果要侦听的是对象的子属性变化，则必须包裹一层单引号</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;user.username&#x27;</span>()&#123;&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="计算属性">计算属性</h3><p>特点：</p><ol><li>虽然计算属性在声明的时候被定义为方法，但是计算属性的本质是一个属性</li><li>计算属性会缓存计算的结果，只有计算属性依赖的数据变化时，才会重新进行运算</li></ol><p>好处：</p><ol><li>实现了代码的复用</li><li>只要计算属性中依赖的数据源变化了，则计算属性会自动重新求值！</li></ol><h3 id="axios">axios</h3><blockquote><p>axios 是一个专注于网络请求的库！</p></blockquote><h4 id="axios-的基本使用">axios 的基本使用</h4><ol><li><p>发起 GET 请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">  <span class="comment">// 请求方式</span></span><br><span class="line">  <span class="attr">method</span>: <span class="string">&#x27;GET&#x27;</span>,</span><br><span class="line">  <span class="comment">// 请求的地址</span></span><br><span class="line">  <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/getbooks&#x27;</span>,</span><br><span class="line">  <span class="comment">// URL 中的查询参数</span></span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">result</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>发起 POST 请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#btnPost&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 如果调用某个方法的返回值是 Promise 实例，则前面可以添加 await！</span></span><br><span class="line">  <span class="comment">// await 只能用在被 async “修饰”的方法中</span></span><br><span class="line">  <span class="keyword">const</span> &#123; <span class="attr">data</span>: res &#125; = <span class="keyword">await</span> <span class="title function_">axios</span>(&#123; <span class="comment">// 解构赋值使用：进行重命名</span></span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>, </span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://www.liulongbin.top:3006/api/post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="vue-cli-的使用">vue-cli 的使用</h3><ol><li><p>安装和使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装cli：npm install -g @vue/cli</span><br><span class="line">创建项目：vue cerate 项目的名称</span><br></pre></td></tr></table></figure></li><li><p>vue 项目中 src 目录的构成：</p><ul><li>assets 文件夹：存放项目中用到的静态资源文件，例如：css 样式表、图片资源</li><li>components 文件夹：程序员封装的、可复用的组件，都要放到 components 目录下</li><li>main.js 是项目的入口文件。整个项目的运行，要先执行 main.js</li><li>App.vue 是项目的根组件。</li></ul></li></ol><h3 id="vue组件">vue组件</h3><p>vue 中规定：组件的后缀名是 .vue。之前接触到的 App.vue 文件本质上就是一个 vue 的组件。</p><p>每个 .vue 组件都由 3 部分构成，分别是：</p><ul><li><p><strong>template</strong> -&gt; 组件的模板结构</p></li><li><p>script -&gt; 组件的 JavaScript 行为</p></li><li><p>style -&gt; 组件的样式</p></li></ul><p>其中，每个组件中必须包含 template 模板结构，而 script 行为和 style 样式是可选的组成部分。</p><p>vue 规定：<strong>.vue 组件中的 data 必须是一个函数</strong>，不能直接指向一个数据对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">username</span>:<span class="string">&quot;lsj&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>让style支持less只需要添加 lang=“less” 属性即可，为了防止组件之间的样式冲突，只需要加 <strong>scoped</strong> 属性即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=<span class="string">&quot;less&quot;</span> scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h4 id="使用组件的三个步骤">使用组件的三个步骤</h4><ol><li>使用 import 引入组件</li><li>使用 compons 节点注册组件</li><li>在 template 中以标签形式使用组件</li></ol><p><strong>通过 Vue.component() 方法，可以注册全局组件。</strong></p><h4 id="自定义属性props">自定义属性props</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">  <span class="attr">name</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="title class_">String</span>, <span class="comment">// 值类型</span></span><br><span class="line">    <span class="attr">default</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 默认值</span></span><br><span class="line">    <span class="attr">required</span>: <span class="literal">true</span> <span class="comment">// 必填项</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生命周期">生命周期</h3><p>常用：</p><p>created 创建后</p><blockquote><p>此时组件的props/data/methos已创建好，都可用。但是组件的模板结构尚未完成。（此时是发起 Ajax 最早的时机，请求数据）</p></blockquote><p>mounted 渲染后</p><blockquote><p>此时已经将内存的HTML结构渲染到浏览器之中，此时可以操作DOM（此时是操作dom最早的时机）</p></blockquote><p>updated 更新</p><blockquote><p>能够操作到最新的 DOM 元素</p></blockquote><p>destroyed 销毁</p><img src="https://cdn.leonus.cn/img/imglifecycle.webp" alt="" style="width:400px;height:auto;"><h3 id="组件之间数据共享">组件之间数据共享</h3><h4 id="父向子传数据">父向子传数据</h4><p>通过自定义属性即可</p><h4 id="子向父传数据">子向父传数据</h4><p>通过自定义事件</p><p><strong>子组件代码如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">count</span>: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">add</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> += <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// 通过$emit定义numchange事件，并进行传值。</span></span><br><span class="line">      <span class="comment">//执行add函数时numchange事件被触发，然后父组件执行getNewCount函数</span></span><br><span class="line">      <span class="comment">//getNewCount函数的参数就是$emit传的值，即this.count</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&#x27;numchange&#x27;</span>, <span class="variable language_">this</span>.<span class="property">count</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>父组件代码如下：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">Son</span> @<span class="attr">numchange</span>=<span class="string">&quot;getNewCount&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">countFromSon</span>: <span class="number">0</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getNewCount</span>(<span class="params">val</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">countFromSon</span> = val</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="兄弟之间的数据共享">兄弟之间的数据共享</h4><p>vue2.x 中，兄弟（爷孙等也可以）组件之间数据共享的方案是 EventBus。</p><ul><li>创建 eventBus.js 模块，并向外共享一个 Vue 的实例对象</li><li>在数据发送方，调用 bus.$emit(‘事件名称’, 要发送的数据) 方法触发自定义事件</li><li>在数据接收方，调用 bus.$on(‘事件名称’, 事件处理函数) 方法注册一个自定义事件</li></ul><img src="https://cdn.leonus.cn/img/img2022-03-12__16.18.webp" alt="" style="width:400px;height:auto;"><h3 id="ref引用">ref引用</h3><p>ref 用来辅助开发者在不依赖于 jQuery 的情况下，获取 DOM 元素或组件的引用。</p><p>每个 vue 的组件实例上，都包含一个 $refs 对象，里面存储着对应的 DOM 元素或组件的引用。默认情况下， 组件的 $refs 指向一个空对象。</p><h4 id="使用-ref-引用-DOM-元素">使用 ref 引用 DOM 元素</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">ref</span>=<span class="string">&quot;demoref&quot;</span>&gt;</span>ref测试<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;setref&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">setref</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">demoref</span>.<span class="property">style</span>.<span class="property">backgroundColor</span> = <span class="string">&#x27;red&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="使用-ref-引用组件">使用 ref 引用组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">Mycount</span> <span class="attr">ref</span>=<span class="string">&quot;countref&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Mycount</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getref&quot;</span>&gt;</span>点我<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> <span class="title class_">Mycount</span> <span class="keyword">from</span> <span class="string">&quot;@/components/mycount.vue&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">namme</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">components</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title class_">Mycount</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">getref</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="comment">// 通过ref调用组件的方法</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">countref</span>.<span class="title function_">add</span>()</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="this-nextTick-cb-方法">this.$nextTick(cb) 方法</h4><p><strong>组件的 <code>$nextTick(cb)</code> 方法，会把 cb 回调推迟到下一个 DOM 更新周期之后执行。</strong></p><p>通俗的理解是：等组件的 DOM 更新完成之后，再执行 cb 回调函数。从而能保证 cb 回调函数可以操作到最新的 DOM 元素。</p><h3 id="动态组件">动态组件</h3><p><code>&lt;component&gt;</code> 组件，专门用来实现动态组件的渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;component :is=<span class="string">&quot;comName&quot;</span>&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure><p>默认情况下，切换动态组件时无法保持组件的状态。此时可以使用 vue 内置的 <code>&lt;keep-alive&gt;</code> 组件保持动态组件的状态。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p><strong>keep-alive 对应的生命周期函数</strong></p><ul><li>当组件被缓存时，会自动触发组件的 deactivated 生命周期函数。</li><li>当组件被激活时，会自动触发组件的 activated 生命周期函数。</li></ul><p>keep-alive 的 include 属性用来指定：只有名称匹配的组件会被缓存。多个组件名之间使用英文的逗号分隔。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include=<span class="string">&quot;Left, Right&quot;</span>&gt;</span><br><span class="line"> <span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">&quot;comName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><h3 id="插槽">插槽</h3><p>插槽（Slot）是 vue 为组件的封装者提供的能力。</p><p>允许开发者在封装组件时，把不确定的、希望由用户指定的部分定义为插槽。</p><p>可以把插槽认为是组件封装期间，为用户预留的内容的占位符。</p><p>在封装组件时，可以通过 <code>&lt;slot&gt;</code> 元素定义插槽，从而为用户预留内容占位符。</p><p>封装组件时，可以为预留的插槽提供<strong>后备内容（默认内容）</strong>。如果组件的使用者没有为插槽提供任何内容，则后备内容会生效。</p><p>如果在封装组件时需要预留多个插槽节点，则需要为每个  插槽指定具体的 name 名称。这种带有具体 名称的插槽叫做“具名插槽”。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;slot name=<span class="string">&quot;demo&quot;</span>&gt;这里是后备内容&lt;/slot&gt;</span><br></pre></td></tr></table></figure><p>在向具名插槽提供内容的时候，我们可以在一个 <code>&lt;template&gt;</code> 元素上使用 <code>v-slot</code> 指令，并以 v-slot 的参数的形式提供其名称。</p><p>跟 v-on 和 v-bind 一样，v-slot 也有缩写，即把参数之前的所有内容 (v-slot:) 替换为字符 <code>#</code>。例如 v-slot:header 可以被重写为 #header</p><p>App.vue：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Mycount</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:s1</span>&gt;</span>aaaaaaaaaaaa<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">s2</span>&gt;</span>bbbbbbbbbbbbb<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">s3</span>&gt;</span>cccccccccccccc<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Mycount</span>&gt;</span><br></pre></td></tr></table></figure><p>组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;s1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line">&lt;/p&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;s2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;s3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="作用域插槽">作用域插槽</h4><p>在封装组件的过程中，可以为预留的插槽绑定 props 数据，这种带有 props 数据的  叫做“作用 域插槽”</p><p>组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 在封装组件时，为预留的 &lt;slot&gt; 提供属性对应的值，这种用法，叫做 “作用域插槽” --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span> <span class="attr">msg</span>=<span class="string">&quot;hello vue.js&quot;</span> <span class="attr">:user</span>=<span class="string">&quot;userinfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Mycount</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">content</span>=<span class="string">&quot;obj&quot;</span>&gt;</span> // obj是一个对象，建议写成scope</span></span><br><span class="line"><span class="language-xml">    &#123;&#123; obj.msg &#125;&#125; // hello vue.js</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Mycount</span>&gt;</span><br></pre></td></tr></table></figure><p><strong>作用域插槽对外提供的数据对象，可以使用解构赋值简化数据的接收过程。</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="title class_">Mycount</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">template</span> #<span class="attr">content</span>=<span class="string">&quot;&#123; msg &#125;&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">    &#123;&#123; msg &#125;&#125; // 效果同上</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line">&lt;/<span class="title class_">Mycount</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义指令">自定义指令</h3><p>在每个 vue 组件中，可以在 <code>directives</code> 节点下声明私有自定义指令。</p><p><strong>定义</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namme</span>: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  <span class="attr">directives</span>: &#123;</span><br><span class="line">    <span class="attr">color</span>: &#123;</span><br><span class="line">      <span class="title function_">bind</span>(<span class="params">el</span>) &#123;</span><br><span class="line">        el.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><p>使用只需要在自定义指令前加上 v-</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-color&gt;<span class="number">1111111111111111</span>&lt;/p&gt;</span><br></pre></td></tr></table></figure><h4 id="动态绑定参数">动态绑定参数</h4><p>在 template 结构中使用自定义指令时，可以通过等号（=）的方式，为当前指令动态绑定参数值</p><p>在声明自定义指令时，可以通过形参中的第二个参数，来接收指令的参数值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-color</span>=<span class="string">&quot;color&quot;</span>&gt;</span>1111111111111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span> // 不能直接输入值</span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">namme</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">directives</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">color</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="title function_">bind</span>(<span class="params">el, binding</span>) &#123; <span class="comment">// binding是一个对象</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span> <span class="comment">//通过.value可以获取到动态参数的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>bind 函数只调用 1 次：当指令第一次绑定到元素时调用，当 DOM 更新时 bind 函数不会被触发。 update 函 数会在每次 DOM 更新时被调用。</p><p>如果 bind 和update 函数中的逻辑完全相同，则对象格式的自定义指令可以简写成函数格式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-color</span>=<span class="string">&quot;color&quot;</span>&gt;</span>1111111111111111<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;color=&#x27;red&#x27;&quot;</span>&gt;</span>点我切换成红色<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">namme</span>: <span class="string">&#x27;App&#x27;</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">directives</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// color: &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   bind(el, binding) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     el.style.color = binding.value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   &#125;,</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   update(el, binding) &#123;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//     el.style.color = binding.value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">//   &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// &#125;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 简写形式</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">color</span>(<span class="params">el, binding</span>) &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>全局共享的自定义指令需要通过 <code>Vue.directive()</code> 进行声明</p><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="路由">路由</h3><p>就是对应关系</p><h4 id="SPA与路由">SPA与路由</h4><p>SPA 指的是一个 web 网站只有唯一的一个 HTML 页面，所有组件的展示与切换都在这唯一的一个页面内完成。</p><p>此时，不同组件之间的切换需要通过前端路由来实现。</p><p>结论：在 SPA 项目中，不同功能之间的切换，要依赖于前端路由来完成！</p><h4 id="什么是前端路由">什么是前端路由</h4><p>通俗易懂的概念：Hash 地址与组件之间的对应关系。</p><h4 id="路由的工作方式">路由的工作方式</h4><ul><li>用户点击了页面上的路由链接</li><li>导致了 URL 地址栏中的 Hash 值发生了变化</li><li>前端路由监听了到 Hash 地址的变化</li><li>前端路由把当前 Hash 地址对应的组件渲染都浏览器中</li></ul><h4 id="vue-router">vue-router</h4><p>vue-router 是 vue.js 官方给出的路由解决方案。它只能结合 vue 项目进行使用，能够轻松的管理 SPA 项目 中组件的切换。</p><p>vue-router 的官方文档地址：<a href="https://router.vuejs.org/zh/">https://router.vuejs.org/zh/</a></p><p><strong>vue-router使用教程</strong></p><ul><li>安装 vue-router 包</li><li>创建路由模块</li><li>导入并挂载路由模块</li><li>声明路由链接和占位符</li></ul><h5 id="安装vue-router">安装vue-router</h5><p><strong>npm i vue-router@3.5.2</strong></p><h5 id="创建路由模块">创建路由模块</h5><p>在 src 源代码目录下，新建 router/index.js 路由模块，并初始化如下的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h5 id="导入并挂载">导入并挂载</h5><p>在 src/main.js 入口文件中，导入并挂载路由模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;@/router/&quot;</span>;  <span class="comment">// 导入</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property">config</span>.<span class="property">productionTip</span> = <span class="literal">false</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;color&#x27;</span>, <span class="function">(<span class="params">el, binding</span>) =&gt;</span> &#123;</span><br><span class="line">    el.<span class="property">style</span>.<span class="property">color</span> = binding.<span class="property">value</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    router <span class="comment">// 挂载</span></span><br><span class="line">&#125;, ).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="声明路由链接和占位符">声明路由链接和占位符</h5><p>在 src/App.vue 组件中，使用 vue-router 提供的 <code>&lt;router-link&gt;</code> 和 <code>&lt;router-view&gt;</code> 声明路由链接和占位符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/home&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie&quot;</span>&gt;</span>电影<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h5 id="声明路由的匹配规则">声明路由的匹配规则</h5><p>在 src/router/index.js 路由模块中，通过 routes 数组声明路由的匹配规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;@/views/Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Movie</span> <span class="keyword">from</span> <span class="string">&quot;@/views/Movie.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;@/views/About.vue&quot;</span>; <span class="comment">// 导入组件</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [ <span class="comment">// 定义路由规则列表</span></span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/movie&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>, <span class="attr">component</span>: <span class="title class_">About</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123; routes &#125;) </span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h5 id="路由重定向">路由重定向</h5><p>路由重定向指的是：用户在访问地址 A 的时候，强制用户跳转到地址 C ，从而展示特定的组件页面。 通过路由规则的 <code>redirect</code> 属性，指定一个新的路由地址，可以很方便地设置路由的重定向</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/home&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h5 id="嵌套路由">嵌套路由</h5><p><strong>声明子路由链接和子路由占位符</strong></p><p>在 About.vue 组件中，声明 tab1 和 tab2 的子路由链接以及子路由占位符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>关于插件<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/t1&quot;</span>&gt;</span>tab1<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about/t2&quot;</span>&gt;</span>tab2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>在 src/router/index.js 路由模块中，导入需要的组件，并使用 children 属性声明子路由规则</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&quot;vue-router&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&quot;@/views/Home.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Movie</span> <span class="keyword">from</span> <span class="string">&quot;@/views/Movie.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">About</span> <span class="keyword">from</span> <span class="string">&quot;@/views/About.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Tab1</span> <span class="keyword">from</span> <span class="string">&quot;@/views/Tab1.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Tab2</span> <span class="keyword">from</span> <span class="string">&quot;@/views/Tab2.vue&quot;</span>; <span class="comment">// 导入子组件</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/home&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">&#x27;/movie&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span> &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">About</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;t1&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab1</span> &#125;, <span class="comment">// 声明子路由规则</span></span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;t2&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Tab2</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h5 id="动态分配路由">动态分配路由</h5><p>动态路由指的是：把 Hash 地址中可变的部分定义为参数项，从而提高路由规则的复用性。 在 vue-router 中使用英文的冒号（:）来定义路由的参数项。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/home/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Home</span> &#125;</span><br></pre></td></tr></table></figure><p>在动态路由渲染出来的组件中，可以使用 <code>this.$route.params</code> 对象访问到动态匹配的参数值。</p><p>app.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">&quot;/movie/1&quot;</span>&gt;电影<span class="number">1</span>&lt;/router-link&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/2&quot;</span>&gt;</span>电影2<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/3&quot;</span>&gt;</span>电影3<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/movie/4&quot;</span>&gt;</span>电影4<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/movie/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span> &#125;</span><br></pre></td></tr></table></figure><p>movie.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>电影插件 -- &#123;&#123; this.$route.params.id &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>为了简化路由参数的获取形式，vue-router 允许在路由规则中开启 props 传参。</p><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">path</span>: <span class="string">&#x27;/movie/:id&#x27;</span>, <span class="attr">component</span>: <span class="title class_">Movie</span>, <span class="attr">props</span>: <span class="literal">true</span> &#125;</span><br></pre></td></tr></table></figure><p>movie.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>电影插件 -- &#123;&#123; id &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">props</span>: [<span class="string">&#x27;id&#x27;</span>]</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="编程导航API">编程导航API</h5><ol><li><p>this.$router.<strong>push</strong>(‘hash 地址’)</p><ul><li>跳转到指定 hash 地址，并增加一条历史记录</li></ul></li><li><p>this.$router.<strong>replace</strong>(‘hash 地址’)</p><ul><li>跳转到指定的 hash 地址，并替换掉当前的历史记录</li></ul></li><li><p>this.$router.<strong>go</strong>(数值 n)</p><ul><li>实现导航历史前进、后退</li></ul></li></ol><h5 id="导航守卫">导航守卫</h5><p>导航守卫可以控制路由的访问权限。</p><p>每次发生路由的导航跳转时，都会触发全局前置守卫。因此，在全局前置守卫中，程序员可以对每个路由进行访问权限的控制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用路由实例对象的 beforeEach 方法，即可声明 “全局前置守卫”</span></span><br><span class="line"><span class="comment">// 每次发生路由跳转的时候，都会自动触发 fn 这个 “回调函数”</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(fn) <span class="comment">// 写在实例后面</span></span><br></pre></td></tr></table></figure><p>全局前置守卫的回调函数中接收 3 个形参</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// to 是即将访问的路由的信息对象</span></span><br><span class="line">    <span class="comment">// from 是将要离开的路由的信息对象</span></span><br><span class="line">    <span class="comment">// next 是一个函数，调用next()表示放行，允许这次路由导航</span></span><br><span class="line">    <span class="comment">// 没有权限强行跳转到登陆界面 next(&#x27;/login&#x27;)，或者不允许跳转next(false)</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 例子</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> == <span class="string">&#x27;/admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;token&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> (token) &#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="其他">其他</h2><h3 id="常用命令">常用命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm init –y </span><br><span class="line">npm i xxx  == npm install xxx</span><br><span class="line">npm run xxx</span><br></pre></td></tr></table></figure><h3 id="知识补充">知识补充</h3><p>vue-devtools 浏览器调试vue插件</p>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python笔记</title>
      <link href="/posts/304.html"/>
      <url>/posts/304.html</url>
      
        <content type="html"><![CDATA[<h2 id="基础知识">基础知识</h2><h3 id="匿名函数lambda">匿名函数lambda</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="keyword">lambda</span> 参数 : 表达式</span><br></pre></td></tr></table></figure><h3 id="字符串String">字符串String</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python支持原始字符串，字符串前面加上 `r` 即可（输入什么显示什么,注意引号）</span></span><br><span class="line">a = <span class="string">r&#x27;print(&quot;\&quot;)&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment"># 输出结果：print(&quot;\&quot;)</span></span><br><span class="line">s.isdigit() <span class="comment">#检测字符串是否只由数字组成</span></span><br><span class="line">s.isupper() <span class="comment">#检测字符串中所有的字母是否都为大写</span></span><br><span class="line">s.islower() <span class="comment">#检测字符串中所有的字母是否都为小写</span></span><br></pre></td></tr></table></figure><h3 id="字符串切片">字符串切片</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sname[start:end:step]</span></span><br><span class="line">s = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="built_in">print</span>(s[<span class="number">0</span>::<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 结果：hlowrd</span></span><br></pre></td></tr></table></figure><h3 id="列表List">列表List</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#列表推导式</span></span><br><span class="line">ls = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)] <span class="comment">#[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]</span></span><br><span class="line"></span><br><span class="line">ls.sort(key,reverse=<span class="literal">True</span>) <span class="comment">#按降序排序</span></span><br></pre></td></tr></table></figure><h3 id="元组Tuple">元组Tuple</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 元组和列表非常相似，都可存放多个数据，可存放不同数据类型的数据</span></span><br><span class="line"><span class="comment"># 不同点：</span></span><br><span class="line"><span class="comment"># 列表使用 [] 定义，元组使用 () 定义</span></span><br><span class="line"><span class="comment"># 列表中数据可修改，元组中数据不能修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空元组(没有意义，因为元组不可修改)</span></span><br><span class="line">tuple1 = ()</span><br><span class="line">tuple2 = <span class="built_in">tuple</span>()</span><br><span class="line"><span class="comment"># 定义一个数据元素的元组</span></span><br><span class="line">tuple3 = (<span class="number">1</span>,)</span><br><span class="line"><span class="comment"># 不能是 tuple3 = (1)，这样是一个int类型</span></span><br></pre></td></tr></table></figure><h3 id="字典Dictionary">字典Dictionary</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;key1:value1,key2:value2, ...&#125;</span><br><span class="line"><span class="comment"># 字典的key 可以是 字符串类型和数字类型（int float），不能是列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空字典</span></span><br><span class="line">dict2 = &#123;&#125;</span><br><span class="line">dict3 = <span class="built_in">dict</span>()</span><br><span class="line"><span class="comment"># 字典中没有下标的概念，通过key值访问对应的value值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果key值不存在</span></span><br><span class="line"><span class="comment"># print(dict1[&#x27;key&#x27;]) #代码报错</span></span><br><span class="line"><span class="comment"># dict1.get(key) 不会报错,返回none</span></span><br><span class="line"></span><br><span class="line">s = &#123;<span class="string">&#x27;a&#x27;</span>:<span class="number">1</span>,<span class="string">&#x27;b&#x27;</span>:<span class="number">2</span>,<span class="string">&#x27;c&#x27;</span>:<span class="number">3</span>&#125;</span><br><span class="line">s.items() <span class="comment">#(&#x27;a&#x27;, 1),(&#x27;b&#x27;, 2),(&#x27;c&#x27;, 3)</span></span><br><span class="line">s,keys() <span class="comment">#a,b,c</span></span><br><span class="line">s.values() <span class="comment">#1,2,3</span></span><br><span class="line">s.get(key,default) <span class="comment">#查找key，有的话返回值，没有返回default。</span></span><br></pre></td></tr></table></figure><h2 id="常用函数">常用函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">bin</span>(number)  <span class="comment"># 转二进制</span></span><br><span class="line"><span class="built_in">oct</span>(number)  <span class="comment"># 转八进制</span></span><br><span class="line"><span class="built_in">hex</span>(number)  <span class="comment"># 转十六进制</span></span><br><span class="line"><span class="built_in">len</span>(x)  <span class="comment"># 字符串x长度</span></span><br><span class="line"><span class="built_in">chr</span>(x)  <span class="comment"># 返回Unicode编码x对应的字符</span></span><br><span class="line"><span class="built_in">ord</span>(x)  <span class="comment"># 返回字符x对应的Unicode编码</span></span><br></pre></td></tr></table></figure><h2 id="常用模块和库">常用模块和库</h2><h3 id="os">os</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.getcwd() <span class="comment">#当前目录</span></span><br><span class="line">os.listdir() <span class="comment">#返回指定目录下的所有文件和目录名</span></span><br><span class="line">os.remove() <span class="comment">#删除一个文件</span></span><br><span class="line">os.path.isfile() <span class="comment">#检测给出的路径是否是一个文件</span></span><br><span class="line">os.path.isdir() <span class="comment">#检测给出的路径是否是一个目录</span></span><br><span class="line">os.path.exists() <span class="comment">#检测给出的路径是否存在</span></span><br><span class="line">os.path.dirname() <span class="comment">#获取路径名</span></span><br><span class="line">os.path.abspath() <span class="comment">#获取绝对路径</span></span><br><span class="line">os.path.basename() <span class="comment">#获取文件名</span></span><br><span class="line">os.system() <span class="comment">#运行shell命令</span></span><br><span class="line">os.rename(old,new) <span class="comment">#重命名</span></span><br><span class="line">os.removedirs() <span class="comment">#删除多级目录</span></span><br><span class="line">os.makedirs() <span class="comment">#创建多级目录</span></span><br><span class="line">os.mkdir() <span class="comment">#创建目录</span></span><br></pre></td></tr></table></figure><h3 id="time">time</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">time.time() <span class="comment">#获取时间戳</span></span><br><span class="line">time.localtime()  <span class="comment"># 将一个时间戳转换为当前时区的struct_time，参数可为空</span></span><br><span class="line">time.gmtime() <span class="comment">#将一个时间戳转换成UTC时区的struct_time</span></span><br><span class="line">time.mktime() <span class="comment">#将一个struct_time转成时间戳</span></span><br><span class="line">time.sleep(n) <span class="comment">#推迟n秒</span></span><br><span class="line">time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>) <span class="comment">#格式化时间,可添加指定参数struct_time，默认time.localtime()</span></span><br><span class="line">time.strptime() <span class="comment">#把一个格式化时间转成struct_time，和time.strftime()是逆操作</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="datetime">datetime</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line">datetime.date <span class="comment">#表示日期的类</span></span><br><span class="line">datetime.time <span class="comment">#表示时间的类</span></span><br><span class="line">datetime.datetime <span class="comment">#表示日期时间</span></span><br><span class="line">datetime.timedelta <span class="comment"># 表示时间间隔，即两个时间点之间的长度</span></span><br><span class="line">datetime.tzinfo <span class="comment">#与时区有关的相关信息</span></span><br><span class="line">datetime.datetime.now() <span class="comment">#2022-06-03 15:23:01.394036</span></span><br><span class="line">datetime.date.fromtimestamp() <span class="comment">#将一个时间戳转成date日期类型</span></span><br></pre></td></tr></table></figure><h3 id="random">random</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.choices(demo, k=n)  <span class="comment"># 放回抽样选取</span></span><br><span class="line">random.sample(demo, n)  <span class="comment"># 不放回抽样选取</span></span><br></pre></td></tr></table></figure><h3 id="turtle">turtle</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">turtle.seth() <span class="comment"># 函数角度的方向</span></span><br><span class="line">turtle.tracer(<span class="literal">False</span>) <span class="comment"># 图形将一次性画好</span></span><br></pre></td></tr></table></figure><h3 id="jieba">jieba</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jieba.cut(<span class="built_in">str</span>) <span class="comment"># 返回可迭代的数据类型</span></span><br><span class="line">jieba.lcut(<span class="built_in">str</span>) <span class="comment"># 返回一个列表类型，建议使用</span></span><br></pre></td></tr></table></figure><blockquote><p>参考文档：<a href="https://www.cnblogs.com/wkfvawl/p/9487165.html">https://www.cnblogs.com/wkfvawl/p/9487165.html</a></p></blockquote><h3 id="wordcloud">wordcloud</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">w=wordcloud.WordCloud(font_path=<span class="string">&quot;C:\\Windows\\Fonts\\msyh.ttf&quot;</span>) <span class="comment"># 创建对象，设置图片样式</span></span><br><span class="line">w.generate(<span class="built_in">str</span>) <span class="comment"># str：用空格隔开的字符串</span></span><br><span class="line">w.to_file(<span class="string">&quot;demo.png&quot;</span>) <span class="comment"># 保存图片</span></span><br></pre></td></tr></table></figure><blockquote><p>参考文档：<a href="https://www.cnblogs.com/dadazunzhe/p/11215452.html">https://www.cnblogs.com/dadazunzhe/p/11215452.html</a></p></blockquote><h3 id="tkinter">tkinter</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 空间优先级别为：界面空间 &gt; 前辈组件独占空间 &gt; 后辈组件独占空间 &gt; 前辈组件可扩展空间 &gt; 后辈组件可扩展空间</span></span><br><span class="line"></span><br><span class="line">win.geometry(<span class="string">&#x27;800x500&#x27;</span>)</span><br><span class="line">win.geometry(<span class="string">&#x27;+560+250&#x27;</span>)</span><br><span class="line">win.title(<span class="string">&#x27;富贵论坛自动评论-v0.1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">Entry.get()</span><br><span class="line">Text.get(<span class="string">&#x27;1.0&#x27;</span>,END) <span class="comment">#1.0表示第一行第一列</span></span><br><span class="line">Entry.insert(<span class="string">&#x27;insert&#x27;</span>,<span class="string">&#x27;内容&#x27;</span>) <span class="comment"># 插入内容，Text通用</span></span><br></pre></td></tr></table></figure><blockquote><p>参考文档：</p><p><a href="https://blog.csdn.net/qq_46018418/article/details/105927203">https://blog.csdn.net/qq_46018418/article/details/105927203</a></p><p><a href="https://blog.csdn.net/superfanstoprogram/article/details/83713196">https://blog.csdn.net/superfanstoprogram/article/details/83713196</a></p><p><a href="https://www.runoob.com/python/python-gui-tkinter.html">https://www.runoob.com/python/python-gui-tkinter.html</a></p></blockquote><h3 id="selenium">selenium</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> wedriver</span><br><span class="line">wb = webdriver.Chrome()</span><br><span class="line">wb.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">wb.implicitly_wait(<span class="number">10</span>) <span class="comment"># 10秒内没找到元素报错</span></span><br><span class="line">wb.delete_all_cookies() <span class="comment"># 删除所有cookies</span></span><br><span class="line">wb.refresh() <span class="comment"># 刷新</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取cookies</span></span><br><span class="line">c = wb.get_cookies()</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加cookies</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookies:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;expiry&#x27;</span> <span class="keyword">in</span> cookies:</span><br><span class="line">        <span class="keyword">del</span> cookies[<span class="string">&#x27;expiry&#x27;</span>]</span><br><span class="line">    browser.add_cookie(item)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 下滑到底部</span></span><br><span class="line">wb.execute_script(<span class="string">&quot;window.scrollTo(0, document.body.scrollHeight);&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入内容</span></span><br><span class="line">browser.find_element_by_xpath(<span class="string">&#x27;xpath语法&#x27;</span>).send_keys(<span class="string">&#x27;内容&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取标签文本</span></span><br><span class="line">text = browser.find_element_by_xpath(<span class="string">&#x27;xpath语法&#x27;</span>).get_attribute(<span class="string">&#x27;textContent&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>参考文档：</p><p><a href="https://zhuanlan.zhihu.com/p/111859925">https://zhuanlan.zhihu.com/p/111859925</a></p></blockquote><h2 id="爬虫笔记">爬虫笔记</h2><h3 id="常用模块和方法">常用模块和方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="comment">#get post 超时使用属性timeout=2</span></span><br><span class="line"><span class="keyword">import</span> re <span class="comment">#findall(正则表达式，内容)</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> lxml <span class="comment">#etree</span></span><br><span class="line"><span class="keyword">import</span> jsom</span><br><span class="line"><span class="keyword">import</span> js2py</span><br><span class="line"><span class="keyword">import</span> jsonpath <span class="comment">#jsonpath</span></span><br><span class="line"><span class="keyword">from</span> fake_useragent <span class="keyword">import</span> UserAgent <span class="comment">#UserAgent().random</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> moviepy.editor</span><br></pre></td></tr></table></figure><h2 id="小细节">小细节</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">切片s[:<span class="number">2</span>] <span class="comment"># 不包含2</span></span><br><span class="line">randint[<span class="number">1</span>:<span class="number">100</span>] <span class="comment"># 包含100</span></span><br><span class="line"><span class="built_in">range</span>(<span class="number">10</span>) <span class="comment"># 不包含10</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
